#!/bin/bash
#set -x
# Options:
#  -s         -- seed app name
#  -i         -- read admin's password from stdin
#  -I         -- set admin's password identical to mysql normal user password found in .mysql.passwd
#  -P         -- ACTION: reset all passwords (no ACTIONS at all defaults to -P)
#  -p         -- ACTION: only reset admin's password
#  -m ADDRESS -- ACTION: change admin's email
#  -M         -- ACTION: send new passwords to admin's address (requires -P)
#  -n         -- ACTION: only update settings.php

usage() {
  local progname=$(basename "$0")
  local msg="$1"

  printf "Usage:\n"
  printf "  %s < options >\n" "$progname"
  printf "\n  Options:\n"
  printf "  -s         -- seed app name
  -i              -- read admin's password from stdin
  -I              -- set admin's password identical to mysql normal user password
                     found in .mysql.passwd
  -P              -- ACTION: reset all passwords
  -p              -- ACTION: only reset admin's password
  -m ADDRESS      -- ACTION: change admin's email
  -M              -- ACTION: send new passwords to admin's address (requires -P)
  -n              -- ACTION: only update settings.php
  -C              -- ACTION: clear the cache of the application
  -F              -- initial deployment - indicates the this is the first
                     time the app is being configured
  -O name=value   -- set the name and value of a variable
     Accepted variables:
        use_my_cnf (=1) - read mysql credentials from ~/.my.cnf

"

  [ -n "$msg" ] && echo $msg

  exit 1
}

append() { local a="$1" b="$2"; if [ -z "$a" ]; then echo "$b"; else echo -e "$a\n$b"; fi; }

fn_exists()
{
  if [ -n "$(type $1 2>&1 | grep 'is a function')" ]; then
    return 0
  fi
  return 1
}

run()
{
  echo "  running $@"
  "$@"
}
run_ised()
{
  run "$dir/ised" -I -L -f - -- "$@"
}
run_ised_p()
{
  run "$dir/ised" -p -I -L -f - -- "$@"
}
run_mysql()
{
  echo "  running mysql $@" >&2
  mysql "$@"
}
run2()
{
  echo "  running $@" >&2
  "$@"
}

urlencode()
{
  local URL="$1"
  /usr/bin/perl -MCGI -e 'print CGI::escape($ARGV[0]), "\n"' -- "$URL"
}

sedencode()
{
  local s="$1"
  /usr/bin/perl -e '($s = $ARGV[0]) =~ s/[\\&\/]/\\$&/g; print "$s\n"' -- "$s"
}

sedphpencode()
{
  local s="$1"
  /usr/bin/perl -e '
     %m = ("&" => "\\&", "/" => "\\/", "\\" => "\\\\\\\\" );
     ($s = $ARGV[0]) =~ s/[\\&\/]/$m{$&}/ge; $s =~ s/'\''/\\\\$&/g; print "$s\n";' -- "$s"
}


error()
{
  local message="$1"
  echo "ERROR${message:+: }$message" >&2
  exit 1;
}

is_valid_subsystem_name_format() {
  local subsystem_regex='^[a-zA-Z0-9_-]+$'
  local subsystem="$1"

  if echo -n "$subsystem" |egrep -q $subsystem_regex; then
    return 0
  else
    return 1
  fi
}

set_database_variables() {
  database=`deref_contents "$config_dir/app:0:_:db_name"`
  if [ $? -ne 0 ]; then
    database="$subsystem"
  fi

  echo "Obtaining mysql credentials"
  if [ -n "$use_my_cnf" ]; then
    mysql_host=`ini_section_get_key_value ~/.my.cnf client host`
    mysql_user=`ini_section_get_key_value ~/.my.cnf client user`
    mysql_port=`ini_section_get_key_value ~/.my.cnf client port`
    mysql_password=`ini_section_get_key_value  ~/.my.cnf client password`

    # remove leading and trailing quotes from the password
    mysql_password=${mysql_password#[\"\']}
    mysql_password=${mysql_password%[\"\']}
  elif [ -L "$config_dir/app:0:_:db_host" ]; then
    mysql_host=`deref_contents "$config_dir/app:0:_:db_host"`
    mysql_port=`deref_contents "$config_dir/app:0:_:db_port"`
    mysql_user=`deref_contents "$config_dir/app:0:_:db_user"`
    mysql_password=`deref_contents "$config_dir/app:0:_:db_password"`
    table_prefix=`deref_contents "$config_dir/app:0:_:db_table_prefix" 2>/dev/null`
  else
    mysql_passwd_file="$vhost_config_dir/.mysql.passwd"
    [ -r "$mysql_passwd_file" ] || mysql_passwd_file="$home/.mysql.passwd"

    if [ -n "$WEBENABLED_HOSTING_LINK_MYSQL_USER" ]
    then
      mysql_user="$WEBENABLED_HOSTING_LINK_MYSQL_USER"
      mysql_password="$WEBENABLED_HOSTING_LINK_MYSQL_PASSWORD"
      mysql_host="$WEBENABLED_HOSTING_LINK_MYSQL_HOST"
      mysql_port="$WEBENABLED_HOSTING_LINK_MYSQL_PORT"
      [ -z "$port" ] && port=3306
    else
      mysql_user=$user_web
      mysql_password=`run2 awk "BEGIN{FS=\":\";}\\$1==\"$user_web\"{s=\\$0; gsub(\"^[^:]+:\",\"\",s);print s;f=1}END{exit f==0}" "$mysql_passwd_file"` || error
      mysql_host=`run2 awk "BEGIN{FS=\":\"}\\$1==\"$user_db\"{print \\$5;f=1}END{exit f==0}" $dir/../config/os/pathnames/opt/dbmgr/config/db-daemons.conf` || error
      mysql_port=`run2 awk "BEGIN{FS=\":\"}\\$1==\"$user_db\"{print \\$6;f=1}END{exit f==0}" $dir/../config/os/pathnames/opt/dbmgr/config/db-daemons.conf` || error

    fi
  fi

  urlencoded_mysql_password="`urlencode \"$mysql_password\"`" || exit 1
  sedphpencoded_mysql_password="`sedphpencode \"$mysql_password\"`" || exit 1
  #echo "grg DEBUG sedphpencoded_mysql_password=$sedphpencoded_mysql_password"
  sedencoded_mysql_password="`sedencode \"$mysql_password\"`" || exit 1
  hosting_database="$WEBENABLED_HOSTING_LINK_MYSQL_DATABASE"
  [ -z "$hosting_database" ] && hosting_database=$database

  # global auxiliary variables
  mysql_url_with_pw="mysql://$mysql_user:$mysql_password@$mysql_host:$mysql_port/$database"
  mysqli_url_with_pw="mysqli://$mysql_user:$mysql_password@$mysql_host:$mysql_port/$database"
}

sql_query()
{
  local query="$1"
  run_mysql -B -e "$query" "$database"
}


sql_query_result()
{
  local query="$1"
  local result="`sql_query \"$1\"`"
  local code=$?
  echo "$result"|sed 1d || return 1
  return $code
}

sql_clear_table()
{
  for i
  do
    sql_query "delete from $i"
  done
}

check_user()
{
  local user="$1"
  if ! `id -u "$user" 2>/dev/null >/dev/null`
  then
    echo "check_user(): No such user: $user"
    return 1
  fi
}

load_subsystem_functions() {
  local subsystem="$1"
  # 'source' is unknown to Ubuntu sh
  . "$dir/seeds/$subsystem/restore-vhost.functions"
}

cleanup_env_vars() {
  opt_m="" opt_M="" opt_p="" opt_P="" subsystem="" opt_i="" opt_I="" opt_n=""
  buffer=""  email=""
  use_my_cnf=""
  initial_deployment="" clear_cache=""
  config_function="" git_db_type="" git_db_source=""
}

generate_password() {
  local user="$1"
  local new_password

  # if user is admin and -i or -I provided
  if [ "$user" == "$admin_user" ] && [ -n "$opt_i" -o -n "$opt_I" ]; then
    if   [ -n "$opt_I" ]; then
      new_password="$mysql_password"
    elif [ -n "$opt_i" ]; then
      new_password="$new_password_read_from_stdin"
    fi
  else
    new_password=`${subsystem}_genpass`
    if [ $? -ne 0 ]; then
      printf "generate_password(): Could not generate '$user' password" 1>&2
      return 1
    fi
  fi
  
  printf -- "$new_password"
  return 0
}


reset_passwords() {
  local subsystem="$1"
  local users_file="$2"
  local n_lines

  fn_exists "${subsystem}_encrypt"
  if [ $? -ne 0 ]; then
    return 0
  fi

  if [ ! -r "$users_file" ]; then
    printf "reset_passwords(): could not read the list of users temp file %s\n" \
    "$users_file" 1>&2
    return 1
  fi

  n_lines=$(cat "$users_file" | wc -l)
  if [ $n_lines -eq 0 ]; then
    printf "%s(): error, received an empty temp file\n" reset_passwords 1>&2
    return 1
  fi

  while read user; do
    [ -z "$user" ] && continue # ignore blank lines

    new_password=$(generate_password "$user")
    if [ $? -ne 0 ]; then
      printf "could not generate password for user '%s' subsystem '%s'\n" \
        "$user" "$subsystem" 1>&2
      return 1
    fi

    buffer=`append "$buffer" "$user:$new_password"`
    new_password_encrypted=`${subsystem}_encrypt "$new_password"`
    if [ $? -ne 0 ]; then
      printf "ERROR: Unable to encrypt password for user '%s'\n" \
        "$user" 1>&2
      return 1
    fi

    # call set_password() from the seed API
    ${subsystem}_set_password "$user" "$new_password_encrypted" 1>&2
    if [ $? -ne 0 ]; then
      printf "Cannot change the password for user '%s'\n" \
        "$user" 1>&2
      return 1
    fi

  done < "$users_file"

  printf "$buffer"

  return 0

}

dump_passwd_info() {
  local buffer="$1"
  local user password

  local tmp=$(mktemp)
  echo "$buffer" >$tmp

  while read line; do
    user=$(echo $line | cut -d: -f 1)
    password=$(echo $line | cut -d: -f 2)

    echo "${subsystem}_user_pass $user:$password"
    echo "webenabled_private_subsystem_password $subsystem:$user:$password"
  done < $tmp
  rm -f $tmp
}

create_vhost_dirs() {
  local dir="$home/.webenabled"

  if [ ! -d "$dir" ]; then
    if ! run mkdir -p -m 0711 "$dir"; then
      printf "%s(): unable to create directory '%s'\n" \
        "create_vhost_dir" "$dir" 1>&2
      return 1
    fi
  fi

  dir="$home/$vhost_config_dir"
  if [ ! -d "$dir" ]; then
    if ! run mkdir -p -m 0711 "$dir" ; then
      printf "%s(): unable to create directory '%s'\n" \
        "create_vhost_dir" "$dir" 1>&2
      return 1
    fi
  fi

  return 0
}

test_flags_logic() {
  if [ -n "$opt_P" -a -n "$opt_p" ]; then
    printf "%s(): -P and -p cannot be used together\n" \
      "test_flags_logic" 1>&2
    return 1
  fi

  if [ -n "$opt_n" ] && \
    [ -n "$opt_m" -o -n "$opt_P" -o -n "$opt_p" -o -n "$opt_M" ]; then
    printf "%s(): -n should not be used with other options\n" \
      "test_flags_logic" 1>&2
    return 1
  fi

  # if it's requested to send the new password to the admin user, be sure that 
  # the password operation has been specified (-p or -P)
  if [ -n "$opt_M" ] && [ -z "$opt_P" -a -z "$opt_p" ]; then
    printf "%s(): -M requires -P or -p\n" "test_flags_logic" 1>&2;
    return 1
  fi

  if [ -n "$opt_i" -a -n "$opt_I" ]; then
    printf "%s(): options -i and -I can't be used together.\n" \
      test_flags_logic 1>&2
    return 1
  fi

  return 0
}

test_target_account() {
  if ! check_user "$user_db" || ! check_user "$user_web"; then
    return 1
  fi

  if ! check_user "$user_web"; then
    return 1
  fi

  if ! [ -d "$home" ]; then
    printf "%s(): home dir '%s' doesn't exist\n" \
      test_target_account "$home" 1>&2
    return 1
  fi

  return 0
}

is_in_array() {
  local value="$1"
  shift
  local v

  for v in "$@"; do
    if [ "$v" == "$value" ]; then
      return 0
    fi
  done

  return 1
}

##########
# main()
##########

# if receives no arguments, show usage()
[ $# -eq 0 ] && usage "[i]: Please, provide an action"

cleanup_env_vars

# load auxiliary functions from devPanel library
curr_dir="`dirname "${BASH_SOURCE[0]}"`"
we_base_dir=`readlink -e "$curr_dir/.."`

self_path_dir="$we_base_dir/bin/.path"
if [[ "$PATH" != *"$self_path_dir"* ]]; then
  # for when running on a non-login shell
  PATH="$self_path_dir:$PATH"
fi

lib_file="`readlink -e "$curr_dir/../lib/functions"`"
if [ $? -ne 0 ]; then
  error "unable to find auxiliary library file. Should have been at ../lib/functions from this script directory"
fi
if ! source "$lib_file"; then
  error "unable to load the external library file '$lib_file'"
fi

while getopts 'pPMm:s:O:iInFC' OPTOPT; do
  case $OPTOPT in
    s) subsystem="$OPTARG";;
    m) opt_m="$OPTARG"; email="$OPTARG";;
    i) opt_i=1;;
    I) opt_I=1;;
    M) opt_M=1;;
    P) opt_P=1;;
    p) opt_p=1;;
    n) opt_n=1;;
    F) initial_deployment=1 ;;
    C) clear_cache=1 ;;
    O)
      # the logic below reads name=value strings passed to the -O option
      accepted_opt_names=('use_my_cnf' 'site_title' 'email' \
                          'install_profile' \
                          'config_function' 'git_db_type' 'git_db_source' )
      prev_char=""
      name_value=""
      declare -i n_pos=0
      while [ $n_pos -lt ${#OPTARG} ]; do
        char=${OPTARG:$n_pos:1}
        n_pos+=1
        if [ "$char" == "," ] && [ -z "$name_value" -o -z "$prev_char" ]; then
          continue
        elif [ "$char" == "," -a "$prev_char" != "\\" -a "$prev_char" != "," ]; then
          received_options+=( "$name_value" )
          name_value=""
          prev_char=""
        elif [ "$char" == "," -a "$prev_char" == "\\" ]; then
          name_value="${name_value:0:$(( $n_pos - 1 ))},"
          prev_char="$char"
        else
          name_value+="$char"
          prev_char="$char"
        fi
      done
      [ -n "$name_value" ] && received_options+=("$name_value")

      for name_value in "${received_options[@]}"; do
        if ! [[ "$name_value" =~ ^([A-Za-z0-9_]+)=(.+) ]]; then
          error "option specified in an invalid format: '$name_value'"
        fi

        opt_name=${name_value%%=*}
        opt_value=${name_value#*=}

        if is_in_array "$opt_name" ${accepted_opt_names[@]}; then
          eval "$opt_name"=`printf '%q' "$opt_value"`
        else
          error "unknown option name '$opt_name'"
        fi
      done
      ;;

    *) error;;
  esac
done

# set main system variables
user_web="$USER"

if ! vhost=$(get_vhost_from_linuxuser); then
  error "unable to get vhost name"
fi

user_db="b_${user_web#w_}"
config_dir="$we_base_dir/config/vhosts/$vhost"
home="`eval \"echo ~$user_web\"`"
vhost_config_dir=.webenabled/private
dir=`dirname "$0"`
seeds_home_dir="$dir/seeds"

if [ -z "$subsystem" ]; then
  subsystem=`deref_contents "$config_dir/app:0:_:seed_app"`
  if [ $? -ne 0 ]; then
    # if didn't receive a subsystem name, show usage()
    usage "[i] Please provide a subsystem (-s)"
  fi
fi
subsystem_seeds_dir="$seeds_home_dir/$subsystem"

set_database_variables # load database information

# validate subsystem syntax
if ! is_valid_subsystem_name_format "$subsystem"; then
  error "Invalid subsystem name format."
fi

if [ ! -d "$subsystem_seeds_dir" ]; then
  error "missing subsystem seeeds dir. Did you enter a valid subsystem name?"
fi

# load subsystem helper functions that will be used later
if ! load_subsystem_functions "$subsystem"; then
  error "unable to load helper functions for subsystem $subsystem"
fi

test_flags_logic    || error "Inconsistency in the cmdline flags"
test_target_account || error "Problems in target user account"

servername_link="$config_dir/apache_vhost:0:_:ServerName"
if fqdn=`deref_contents "$servername_link"`; then
  :
elif ! fqdn=`deref_contents "$config_dir/names/default"` || ! [ -n "$fqdn" ]
then
  error "Cannot get the primary name from $config_dir/names/default"
fi

# some of the scripts of the seed apps use relative paths, and some users
# add lines to .bash_profile and .bashrc to chdir to the public_html by
# default, and this can break some of the apps. So we chdir to $HOME to
# avoid that.
if ! cd "$HOME"; then
  error "unable to chdir to $HOME"
fi

# auxiliary variable to be used by the templates
public_html_dir="$HOME/public_html/$vhost"
export DEVPANEL_VHOST_PUBLIC_DIR="$public_html_dir"

if [ -n "$opt_i" -o -n "$opt_M" -o -n "$opt_P" -o \
     -n "$opt_m" -o -n "$email" -o -n "$opt_I" ]; then
  # connect to the database (credentials from ~/.my.cnf)
  echo "Looking for database '$database'"
  databases=`run_mysql -B -e "show databases;"` 2>&1
  if [ $? -ne 0 ]; then
    error "Unable to retrieve database list from the mysql server"
  fi

  if ! echo "$databases"|egrep -q "^$database\$"
  then
    error "couldn't find database '$database'"
  fi

  # call seed's API to get the admin's user
  admin_user=`${subsystem}_get_admin_user`
  if [ $? -ne 0 ]; then
    error "Unable to get admin username for vhost: $vhost, subsystem: $subsystem"
  fi
fi

# if -i option provided, read password from stdin
if [ "$opt_i" = 1 ]; then
  printf "Please, enter the new admin password (reading from stdin): "
  read -r new_password_read_from_stdin || 
    error "Cannot read admin password from stdin"
fi

# change the admin's e-mail (-m) or -O email=addr
if [ -n "$opt_m" -o -n "$email" ]; then
  # call the set_email() function from the seed API
  if ! ${subsystem}_set_email "$admin_user" "$email"; then
    error "Could not change admin's email for subsystem '$subsystem'"
  fi
fi

# -p or -P provided, change passwords
if [ -n "$opt_P" -o -n "$opt_p" ]; then
  create_vhost_dirs || error

  USER_TMP_FILE="`mktemp -t restore-vhost-subsystem.XXXXXXXXXX`"
  if [ $? -ne 0 ]; then
    error "Unable to create tempfile for storing the list of users"
  fi

  trap 'echo "Removing temporary archive $TMPFILE"; rm -f -- "$USER_TMP_FILE"' \
    EXIT HUP INT QUIT ILL TRAP ABRT BUS FPE KILL SEGV PIPE STOP ALRM TERM

  # -P (all passwords). now get list of users
  if [ -n "$opt_P" ]; then
    ${subsystem}_get_users > "$USER_TMP_FILE"
    if [ $? -ne 0 ]; then
      error "Unable to retrieve the list of users for $subsystem"
    fi
  else
    # -p only admin password. admin is the only user written to the list
    printf "%s\n" "$admin_user" > "$USER_TMP_FILE"
  fi

  passwd_contents=$(reset_passwords "$subsystem" "$USER_TMP_FILE")
  if [ $? -ne 0 ]; then
    error "unable to change users' passwords (subsystem: $subsystem)"
  fi

  dump_passwd_info "$passwd_contents"

  # send the passwd contents to admin's e-mail
  if [ -n "$opt_M" ]; then
    # call seed API to get the admin's e-mail
    admin_email=$(${subsystem}_get_email "$admin_user")
    if [ $? -ne 0 ]; then
      error "unable to retrieve admin's e-mail for subsystem '$subsystem'"
    fi

    rm -f "$home/$subsystem.passwd" # backward compat
    rm -f "$home/$vhost_config_dir/$subsystem.passwd"
    rm -f "$home/$vhost_config_dir/web.passwd"

    echo "$passwd_contents" | \
      run mail -s "new $subsystem password${opt_P:+(s)} for $fqdn" \
      "$admin_email"

      if [ $? -ne 0 ]; then
        error "unable to send passwd file for admin ($admin_email) of subsystem '$subsystem'"
      fi
  else
    # -M not set, write the passwd file
    passwd_file="$home/$vhost_config_dir/$subsystem.passwd"

    if [ -n "$opt_p" ]; then
      admin_pw=$(echo "$passwd_contents" |cut -d: -f 2)
      admin_pw_esc=$(escape_sed "$admin_pw")
      if [ -f "$passwd_file" ]; then
        echo "s/^$admin_user:.\+$/$admin_user:$admin_pw_esc/" \
        | run_ised "$passwd_file" || \
        error "unable to change admin password in password file $passwd_file"
      else
        echo "$admin_user:$admin_pw" | tee "$passwd_file" >/dev/null ||
          error "unable to create password file '$passwd_file'"
      fi
    else
      # changing all passwords, rewriting the whole file
      echo "$passwd_contents" | tee "$passwd_file" >/dev/null ||
        error "unable to write passwd file '$passwd_file'"
    fi

    ln -sf "$passwd_file" "$home/$password_basename" # backward compat
    ln -sf "$subsystem.passwd" "$home/$vhost_config_dir/web.passwd"
  fi # // opt_M
fi # end of password changing

# -n: update settings.ini
if [ -n "$opt_n" ]; then
  if [ -z "$config_function" ]; then
    config_function="custom"
  fi

  ${subsystem}_${config_function} # run the seed's API customization function
  if [ $? -ne 0 ]; then
    error "Cannot perform $subsystem-specific cusmomizations"
  fi

  # Update php.ini to point to new vhost home
  echo "
           s/\/w_[[:alnum:]]\{2,6\}/w_${vhost}/g
  " | run_ised "$home/.php/php.ini" || \
    error "unable to edit $home/.php/php.ini"
fi

if [ -n "$clear_cache" ]; then
  if ! type "${subsystem}_clear_cache" &>/dev/null; then
    echo "Warning: don't know how to clear the cache of apps of type: $subsystem" 1>&2
  else
    ${subsystem}_clear_cache
  fi
fi

exit 0
