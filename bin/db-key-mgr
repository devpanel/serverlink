#!/usr/bin/env perl
use strict;
use warnings;
use DB_File;
use Fcntl (qw( :DEFAULT :flock ));
use Getopt::Long;

sub usage {
  print "
  This script adds or deletes one key at a time from a db file.

  Usage: $0 [ options ] <file> <operation> <key> [ value ]

  Options:
    -i            read the value from STDIN (the value should be terminated
                  by a newline. The newline character will not be part of the value)

    -s            enable strict mode (return error when adding a key that
                  already exists, or removing a key that doesn't exist)


  Valid operations: add, delete
";

  exit(1);
}

sub error {
  my($msg, $exit_code) = @_;

  if(!defined($msg)) {
    $msg = "";
  }

  if(!defined($exit_code)) {
    $exit_code = 1;
  }

  warn "Error: $msg\n";
  exit($exit_code);
}

# main
if($#ARGV < 2) {
  usage();
}

my %opts = (
  strict => 0,
  stdin  => 0,
);

my %opt_defs = (
  's|strict'       => \$opts{strict},
  'i|input-stdin'  => \$opts{stdin},
);

if(!GetOptions(%opt_defs)) {
  exit(1);
}

my $dbh;
my %entries;
my($db_file, $operation, $key, $value);

$db_file     = $ARGV[0];
$operation   = lc($ARGV[1]);
$key         = $ARGV[2];
$value       = defined($ARGV[3]) ? $ARGV[3] : '';

if(! -e $db_file) {
  error("file '$db_file' doesn't exist.");
} elsif(! -f $db_file) {
  error("path '$db_file' is not a regular file");
} elsif(! -w $db_file) {
  error("file '$db_file' is not writable");
}

my @known_ops = ("add", "delete");
if(!grep({ $operation eq $_; } @known_ops)) {
  error("unknown operation");
}

my $lock_file = $db_file . ".lock";
if(!open(LOCK_FILE, ">$lock_file")) {
  error("unable to open lock_file '$lock_file': $!");
}
flock(LOCK_FILE, LOCK_EX);

$dbh = tie %entries, 'DB_File', $db_file, O_RDWR, 0640, $DB_HASH;
if(!$dbh) {
  error("unable to open file '$db_file': $!");
}

if($operation eq "add") {
  if(exists($entries{$key}) && $opts{strict}) {
    error("key '$key' already exists");
  }

  if($opts{stdin}) {
    warn "Reading STDIN...\n";
    while(<STDIN>) {
      $value .= $_;
    }
    chomp($value);
    if(!defined($value) || length($value) == 0) {
      error("didn't receive a value from STDIN");
    }
  }

  $entries{$key} = $value;
} elsif($operation eq "delete") {
  if(exists($entries{$key})) {
    delete($entries{$key});
  } elsif($opts{strict}) {
    error("key '$key' doesn't exist");
  }
}

undef($dbh);
untie %entries;
flock(LOCK_FILE, LOCK_UN);
