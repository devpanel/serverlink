#!/bin/sh
id='2009-08-27'

email='Grigoriy Strokin <grg@philol.msu.ru>'
help()
{
echo "ised -- in-place sed
Usage: ised [options] COMMAND_LINE [ \\| COMMAND_LINE ..] -- FILE ...
  Pass file(-s) to an utility such as sed, tr etc. and replace the contents
  of the file(-s) with the output(-s) of the utility. In order to join
  several utilities into a pipe, pipe sign must be escaped.
Options:
  -I        Pass stdin to command and filename as an argument
	    (by default, command is run without arguments and gets file as stdin)
            The contents of stdin will be memorized by ised and repeatedly
            passed to command for each file to be processed.
            NB: Some filters such as tr(1) do not accept filename as argument.
  -e        Prepend 'sed -e' to the COMMAND_LINE
  -f        Prepend 'sed -f' to the COMMAND_LINE
  -D DELIM  Use DELIM arg as a delimiter of COMMAND_LINE and FILES
            instead of \`--'
  -P PSIGN  Use PSIGN arg as a pipe sign instead of \`\\|'
  -H        Preserve hardlinks (use \`cat >' instead of \`mv'), and 
            use \${TMPDIR-/tmp} for temporary files (SLOW for large files)
              If -H is not specified, ised removes hard links, and creates
              temporary files in the directory the file being processed is
              in, so that \`mv' be done quickly.
  -p        Preserve file permissions by doing chmod on the new version of 
            the file (ignored if -H is also specified)
  -L MODE   Follow symlinks (otherwise, the script will fail)
  -r        Save backup copies using RCS (ci -l -f -q)
  -b        Save backup copies in files named FILE~ (not implemented yet)
  -h        Display this help and exit
  -W        If a file cannot be processed, issue a warning and proceed with 
            other files instead of exit 1
  -v        Output version information and exit
Examples:
  ised -e \"s/\.htm\'/.html\'/g\" -- *.html
    (1) Replace lame <a href=\"xxx.htm\"> references with xxx.html ones in
        all.html files
  ised tr -d '\\r' -- *.txt
    (2) Convert newlines in all text files from DOS format to UNIX

Send comments and bug reports to $email
"
exit 0
}

# Interesting things with hardlinks (ln file1 file2; touch file3)
#    - cp file3 file2 preserves the link
#    - mv file3 file2 removes the link
#    - perl -i -lpe '1' file2 removes the link
# The same with symlinks
#

version()
{
echo -n 'ised version '
echo -n $id| 
sed 's|^.*ised,v  *\([0-9.]\{1,\}\) *\([0-9]\{1,\}\)/.*$|\1, \2|'
echo " $email"
exit 0
}


optstring="vhcHefP:D:rLpWI"
pipe_sign="|"
delim="--"

while getopts $optstring OPTOPT
do
  eval opt_$OPTOPT=1 2>/dev/null
  case "$OPTOPT" in
    P) pipe_sign=$OPTARG;;
    D) delim=$OPTARG;;
    e) sed_opt=e;;
    f) sed_opt=f;;
    h) help;;
    v) version;;
    "?") exit 1;;
  esac
done

shift `expr $OPTIND - 1`

[ $# = 0 ] && help


[ -n "$sed_opt" ] && args="sed -$sed_opt "

while [ $# != 0 -a "$1"O != "$delim"O ]
do
  [ "$1"O = "$pipe_sign"O ] && \
    arg="|" || arg="'`echo \"$1\"|sed \"s/'/'\\\\''/g\"`'"
  args="$args$arg "
  shift
done

if [ "$1"O != "$delim"O ]
then
  echo "ised: No \`$delim' found at the command line"\
       "or empty command before \`$delim'" >&2
  exit 1
fi

shift

save_rcs()
{
cat <<EOF | ci -l -f -q "$1"
A backup copy of $1 automatically generated by \`ised' before applying the
following script:
#---
$args
#---
EOF
}

tmp=""

trap 'if [ -n "$tmp" ]; then echo "Removing temporary file \"$tmp\""; rm -f -- "$TMPFILE"; fi' \
  EXIT HUP INT QUIT ILL TRAP ABRT BUS FPE KILL SEGV PIPE STOP ALRM TERM

if [ -z "$opt_W" ]
then
  failcmd='exit 1'
else
  failcmd='shift;continue'
fi

input=""
if [ -n "$opt_I" ]
then
  input="`cat`"
fi

process()
{
  local cmd="$1"
  local filename="$2"
  if [ -z "$opt_I" ]
  then
    eval "$cmd" <"$filename"
  else
    /bin/echo "$input"|eval "$cmd" "$filename"
  fi
}

while [ -n "$1" ]
do
    file="$1"
    if [ -f "$file" ]
    then
      if [ -h "$file" ]
      then
        if [ -z "$opt_L" ]
        then
          echo "ised: Skipping $file: symlink, use -L to follow them" >&2
          eval "$failcmd"
        else
          if ! file="`readlink -e \"$file\"`"
          then
            echo "ised: Skipping $file: invalid symlink" >&2
            eval "$failcmd"
          fi
        fi
      fi
      if [ -n "$opt_r" ]
      then
        case "$file" in
        *,v) echo "ised: Skipping $file: attempt to garble an RCS file"\
                  "despite of the -r option" >&2
             eval "$failcmd";;
        *) if ! save_rcs "$file"
           then
             echo "ised: Cannot save backup copy of \`$file',"\
                  "file not modified" >&2
             eval "$failcmd";
           fi;;
        esac
      fi
      if [ -z "$opt_H" ]
      then
         dir="`dirname "$file"`"
         [ -w "$dir" ]; mvmode=$?
      else
         mvmode=1
      fi
      case $mvmode in
        0) if ! tmp="`mktemp \"$file.ised.$$.XXXXXX\"`"
           then
             echo "ised: Skipping \`$file': could not create temporary file" >&2
             eval "$failcmd";
           fi
            ;;
        1) if ! tmp="`mktemp -t \"ised.$$.XXXXXX\"`"
           then
             echo "ised: Skipping \`$file': could not create temporary file" >&2
             eval "$failcmd";
           fi
            ;;
      esac
      if process "$args" "$file" >"$tmp" 
      then
        case $mvmode in
          0) 
             if [ -n "$opt_p" ]
             then
               if ! chmod --reference "$file" "$tmp"
               then
                 echo "ised: Failed to change permissions, \`$file', use chmod if needed" >&2
               fi
             fi
             mv -f "$tmp" "$file";;
          *) cat "$tmp" >"$file"
             rm "$tmp";;
        esac
        tmp=""
      else
        echo "ised: Error processing \`$file', file not modified" >&2
        rm -f $tmp
        tmp=""
        eval "$failcmd"
      fi
    else
      echo "ised: Skipping" `file "$file"`", not a regular file" >&2
    fi
  shift
done
