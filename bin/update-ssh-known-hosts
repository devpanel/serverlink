#!/bin/bash

usage() {
  echo "Usage: `basename "$0"` <action> [target_file]

  Accepted actions: add_or_update, remove

  This script reads one or more ssh keys from stdin and adds or deletes the 
  keys on target_file.
"
  exit 1
}

extract_only_key() {
  local full_txt="$1"
  # assuming here that it's a simple: host key-type key-txt
  echo "$full_txt" | cut -d' ' -f 2,3
}

error() {
  local msg="$1"

  echo "Error: $msg" 1>&2
  exit 1
}

cleanup() {
  unlock_path "$target_file"
  [ -f "$tmp_file" ] && rm -f -- "$tmp_file"
}

# main
[ $# -eq 0 ] && usage

self_bin=$(readlink -e "$0")
self_dir=$(dirname "$self_bin")
sys_dir=$(readlink -e "$self_dir/..")

lib_file="$sys_dir/lib/functions"
if ! source "$lib_file"; then
  error "unable to import library file '$lib_file'"
fi

getopt_flags='i'
while getopts $getopt_flags OPTNAME; do
  case $OPTNAME in
    i)
      input_file="$OPTARG"
      ;;
    *)
      usage
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

action="$1"
if [ -z "$action" ]; then
  error "missing action parameter"
fi

if [ -z "$2" -o "$2" == "-" ]; then
  if [ $EUID -eq 0 ]; then
    target_file="/etc/ssh/ssh_known_hosts"
  else
    target_file="$HOME/.ssh/known_hosts"
  fi
else
  target_file="$2"
fi

if [ ! -e "$target_file" ]; then
  error "file '$target_file' doesn't exist"
elif [ ! -f "$target_file" ]; then
  error "path '$target_file' is not a regular file"
elif [ ! -w "$target_file" ]; then
  error "cannot write '$target_file'"
fi

declare -a keys
declare -a fingerprints

if [ "$action" != "add_or_update" -a "$action" != "remove" ]; then
  error "unknown action"
fi

if ! lock_path "$target_file" >/dev/null; then
  error "unable to lock file $target_file"
fi
trap 'cleanup' EXIT

declare -i key_n=0
while read ssh_key; do
  [ -z "$ssh_key" ] && continue
  [ "${ssh_key:0:1}" == "#" ] && continue

  key_n+=1
  if fingerprint=`get_sshkey_fingerprint "$ssh_key" "$target_file"`; then
    keys+=( "$ssh_key" )
    fingerprints+=( $fingerprint )
  else
    error "could not calculate fingerprint of key $key_n"
  fi
done

if [ ${#keys[*]} -eq 0 ]; then
  error "didn't receive any key"
fi

tmp_file=$(mktemp "$target_file.XXXXXX")
if [ $? -ne 0 ]; then
  error "unable to create temporary file"
fi

orig_perm=$(stat -c %a "$target_file")
if [ $? -ne 0 ]; then
  error "unable to get the permissions from $target_file"
fi

if ! chmod "$orig_perm" "$tmp_file"; then
  error "unable to set permission $orig_perm to $tmp_file"
fi

cat "$target_file" >"$tmp_file"
if [ $? -ne 0 ]; then
  error "unable to copy the contents from '$target_file' to $tmp_file"
fi

declare -i n_changes=0
if [ "$action" == "add_or_update" ]; then
  for ((i=0; i < ${#keys[*]}; i+=1)); do
    key_fp=${fingerprints[$i]}
    key_txt="${keys[$i]}"
    if is_sshkey_in_keyfile "$key_fp" "$tmp_file"; then
      echo "Warning: skipping key $(( $i + 1 )) (fp: $key_fp) already in file"
      continue
    else
      if echo "$key_txt" >> "$tmp_file"; then
        n_changes+=1
      else
        error "unable to add key $(( $i + 1 )) (fp: $key_fp)"
      fi
    fi
  done
elif [ "$action" == "remove" ]; then
  for ((i=0; i < ${#keys[*]}; i+=1)); do
    key_fp=${fingerprints[$i]}
    key_txt=$(extract_only_key "${keys[$i]}")
    if ! is_sshkey_in_keyfile "$key_fp" "$tmp_file"; then
      echo "Warning: skipping key $(( $i + 1 )) (fp: $key_fp) not in file"
      continue
    else
      key_txt_esc=$(escape_sed "$key_txt")
      sed -i -e "/$key_txt_esc/d" "$tmp_file"
      if [ $? -eq 0 ]; then
        n_changes+=1
      else
        error "unable to remove key $(( $i + 1 )) from file '$tmp_file'" 1>&2
      fi
    fi
  done
fi

if [ $n_changes -eq 0 ]; then
  echo "Warning: no updates performed." 1>&2
  exit 0
else
  mv -f "$tmp_file" "$target_file"
  if [ $? -eq 0 ]; then
    echo "Successfully updated $target_file."
    exit 0
  else
    error "unable to save updates to file $target_file."
  fi
fi
