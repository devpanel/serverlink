#!/bin/bash

usage() {
  local prog=`basename "$0"`

  echo "Usage: [ OPTS ] $prog <-D bare_repo_dir>

  Options
    -C committer_email    only display commits of the specified committer
    -r repo_name          search repo_name in the standard repo path ~/repositories/
    -D dir                directory to the bare git repo
                          (-D and -r can't be used together)
    -c commit             reference commit
    -n number             show the previous N commits
    -B branch             show only the specified branches
                          (this option can be used more than once)
"

  exit 1
}

error() {
  local msg="$1"
  local exit_code="${2:-1}"

  [ -n "$msg" ] && echo "Error: $msg" 1>&2
  exit $exit_code
}

# main

[ $# -eq 0 ] && usage

std_repo_path="$HOME/repositories"
declare -i show_n=20
declare -a branches
declare -a committers

git_args=''
commit_id="HEAD"

getopt_flags='D:c:n:B:r:C:'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    C)
      if [[ "$OPTARG" =~ [^A-Za-z0-9.@-] ]]; then
        error "invalid characters in the committer name"
      else
        committers+=( "$OPTARG" )
      fi
      ;;
    D)
      GIT_DIR="$OPTARG"
      ;;
    c)
      commit_id="$OPTARG"
      if [ ${#commit_id} -ne 40 ]; then
        error "invalid length of commit id"
      elif ! [[ "$commit_id" =~ ^[a-f0-9]+$ ]]; then
        error "commit id must be composed of only a-f0-9 characters"
      fi
      ;;
    n)
      show_n="$OPTARG"
      if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
        error "argument to option -n is not numeric"
      fi
      ;;
    B)
      branches+=( "$OPTARG" )
      ;;
    r)
      repo_name="$OPTARG"
      if ! [[ "$repo_name" =~ ^[A-Za-z0-9_-]+$ ]]; then
        error "invalid characters in repo name (option -r)"
      fi
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

if [ -n "$repo_name" -a -n "$GIT_DIR" ]; then
  error "options -D and -r can't be used together"
elif [ -n "$repo_name" ]; then
  GIT_DIR="$std_repo_path/${repo_name}.git"
fi

if [ -z "$GIT_DIR" ]; then
  error "please specify the repository name (option -r) or directory, option -D"
elif [ ! -e "$GIT_DIR" ]; then
  error "dir '$GIT_DIR' doesn't exist."
elif [ ! -d "$GIT_DIR" ]; then
  error "path '$GIT_DIR' is not a directory."
fi

if [ "$commit_id" != "HEAD" -a ${#branches[@]} -gt 1 ]; then
  error "when using commit_id (option -c), use only one branch."
fi

if [ ! -d "$GIT_DIR/refs/heads" ]; then
  error "missing dir '$GIT_DIR/refs/heads' dir"
fi

n_heads=`ls "$GIT_DIR/refs/heads" | wc -l`
if [ $n_heads -eq 0 ]; then
  echo "--branch: master|0"
  exit 0
fi

# if the branch was not specified, get the list of branches
if [ ${#branches[*]} -eq 0 ]; then
  while read line; do
    branch=${line##[ \*] }
    branches+=( "$branch" )
  done < <(GIT_DIR="$GIT_DIR" git branch)
fi

for branch in ${branches[@]}; do
  git_args=""

  for committer in ${committers[*]}; do
    git_args+=" --committer=$committer"
  done

  n_commits=`env "GIT_DIR=$GIT_DIR" git rev-list "$branch" | wc -l`
  if [ $n_commits -eq 0 ]; then
    echo "--branch: $branch|0"
    continue
  fi

  if [ "$commit_id" != "HEAD" ]; then
    commit_number=`env GIT_DIR="$GIT_DIR" git rev-list "$branch" | fgrep -n "$commit_id" | cut -d: -f 1`
    git_args+=" --skip $commit_number"
  fi

  echo "--branch: $branch|$n_commits"
  GIT_DIR="$GIT_DIR" git --no-pager log --date=iso $git_args -$show_n "$branch"
done
