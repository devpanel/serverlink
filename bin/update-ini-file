#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename;

BEGIN {
  use Cwd (qw( abs_path ));
  my $local_perl5_lib = abs_path(dirname(__FILE__) . '/../lib/perl5/');
  if(defined($local_perl5_lib) && (-d $local_perl5_lib || -l $local_perl5_lib)) {
    unshift(@INC, $local_perl5_lib);
  }
}

use Config::Tiny;
use Getopt::Long;

sub usage {
  my $prog = basename($0);

  print "Usage: $prog [ -c ] <file> 
  
  Options:
    -c            create the specified file if it doesn't exist
    -q            quiet, don't print informational msgs to stdout


  This script creates or updates a .ini file.

  Send to STDIN the key = value. The key can be a dotted value, e.g:
    taskd.uuid = cb5dd59d-890d-4fb9-b2b8-2a4ad091bbc6

";
  exit(1);
}

if($#ARGV < 0) {
  usage();
}

my %r_opts;
my %getopt_flags = (
    'c'         => \$r_opts{create_file},
    'q'         => \$r_opts{quiet},
);

if(!GetOptions(%getopt_flags)) {
  exit(1);
}

my $cfg_r;
my $file = $ARGV[0];
if(!defined($file) || length($file) == 0) {
  usage();
}

if(defined($r_opts{create_file}) && ! -e $file) {
  # just creating it, to check if we're really able to do or not, and exit
  # early if not
  if(!open(INI_FILE, ">$file")) {
    die "Error: unable to create file $file: $!\n";
  }
  close(INI_FILE); # the actual write will be done by Config::Tiny
} else {
  if($file ne "-" && ! -f $file) {
    die "Error: file '$file' does not exist.\n";
  }
}

if($file eq "-") {
  $cfg_r = Config::Tiny->new();
} else {
  $cfg_r = Config::Tiny->read($file);
  if(!$cfg_r) {
    die "Error: unable to open file '$file': " . Config::Tiny::errstr() .
        "\n";
  }


  if(! -w $file) {
    die "Error: no write access to file '$file'.\n";
  }
}

if(!$r_opts{quiet}) {
  print "Reading stdin...\n";
}

my $std_key_regex = '([A-Za-z0-9_]+[A-Za-z0-9 _.-]*[A-Za-z0-9])';
my $regex_add_key       = qr/^$std_key_regex\s*=\s*(.+)$/;
my $regex_remove_key    = qr/^-\s*$std_key_regex\s*$/;
my $regex_add_word      = qr/^$std_key_regex\s*\+=w \s*(.+)$/;
my $regex_remove_word   = qr/^$std_key_regex\s*-=w\s*(.+)$/;

my $line_n = 0;
my $values_set_n = 0;
while(<STDIN>) {
  $line_n++;
  chomp();
  next if(length($_) == 0);

  my($section, $key, $value, $sec_key);
  if($_ =~ $regex_add_key) {
    # add/set values
    ($key, $value) = ($1, $2);
    $key =~ s/\s+/ /; # remove multiple spaces in the key name
    $key =~ s/\s+$//; # remove trailing spaces
    if($key !~ /^(.+)\.(.+)$/) {
      warn "Invalid key value on line $line_n. Skipping...\n";
      next;
    }

    $section = $1;
    $sec_key = $2;

    $cfg_r->{$section}->{$sec_key} = $value;

    $values_set_n++;
  } elsif($_ =~ $regex_remove_key) {
    # remove values
    my $section_key = $1;
    ($section, $key)  = split('\.', $section_key, 2);
    if(defined($key) && length($key) > 0) {
      if(exists($cfg_r->{$section}->{$key})) {
        delete($cfg_r->{$section}->{$key});
        $values_set_n++;
      } else {
        print "Warning: ignoring unknown key-section $section_key\n";
        next;
      }

      if(!defined($cfg_r->{$section}) || ! scalar(keys(%{ $cfg_r->{$section} }))) {
        # if the section became empty, then delete it, to avoid writing empty
        # sections
        delete($cfg_r->{$section});
      }
    } else {
      # remove whole section
      if(exists($cfg_r->{$section})) {
        delete($cfg_r->{$section});
        $values_set_n++;
      } else {
        print "Warning: ignoring unknown section $_\n";
        next;
      }
    }
  } elsif($_ =~ $regex_add_word) {
    my $section_key = $1;
    my $new_value = $2;
    ($section, $key)  = split('\.', $section_key, 2);
    if(defined($key) && length($key) > 0) {
      if(exists($cfg_r->{$section}->{$key})) {
        my $curr_value = $cfg_r->{$section}->{$key};
        if($curr_value !~ /\b\Q$new_value\E\b/) {
          $cfg_r->{$section}->{$key} .= " " . $new_value;
          $values_set_n++;
        }
      } else {
        $cfg_r->{$section}->{$key} = $new_value;
        $values_set_n++;
      }
    }
  } elsif($_ =~ $regex_remove_word) {
    my $section_key  = $1;
    my $search_value = $2;
    ($section, $key)  = split('\.', $section_key, 2);
    if(defined($key) && length($key) > 0) {
      if(exists($cfg_r->{$section}->{$key})) {
        my $curr_value = $cfg_r->{$section}->{$key};
        if($curr_value =~ /\b\Q$search_value\E\b/) {
          $cfg_r->{$section}->{$key} =~ s/\b\Q$search_value\E\b//g;
          $cfg_r->{$section}->{$key} =~ s/^\s+//g;
          $cfg_r->{$section}->{$key} =~ s/\s+$//g;
          if(length($cfg_r->{$section}->{$key}) == 0) {
            delete($cfg_r->{$section}->{$key});
          }
          $values_set_n++;
        }
      }
    }
  } else {
    warn "Invalid line format on line $line_n. Skipping...\n";
    next;
  }
}

if($values_set_n > 0) {
  if(!$r_opts{quiet} && $file ne "-") {
    print "Successfully wrote $values_set_n changes to file '$file'.\n";
  }
  if($file eq "-") {
    print $cfg_r->write_string;
  } else {
    $cfg_r->write($file);
  }
} else {
  print "Error: no values updated.\n";
  exit(1);
}
