#!/bin/bash

usage_default() {

  if [ $EUID -eq 0 ]; then
    show_help_msg usage-root
  else
    show_help_msg usage-non-root
  fi

  exit 1
}

usage() {
  local name="$1"
  local msg

  if [ -z "$name" ]; then
    if [ -z "$namespace" ]; then
      usage_default
    elif [ -n "${devpanel_usage_r[$namespace]}" ]; then
      echo "${devpanel_usage_r[$namespace]}" 1>&2
    else 
      usage_default
    fi
  else
    if [ -n "${devpanel_usage_r[$namespace]}" ]; then
      echo "${devpanel_usage_r[$namespace]}" 1>&2
    else
      echo "Error: (missing usage msg for '$name')" 1>&2
    fi
  fi

  exit 1
}

error() {
  local msg="$1"
  local exit_code="${2:-1}"

  [ -n "$msg" ] && echo "Error: $msg" 1>&2

  if [ "$exit_code" == - ]; then
    return 1
  else
    exit $exit_code
  fi
}

devpanel_load_n_run() {
  local function_name="$1"
  local bin_file="$2"
  shift 2

  if ! . "$bin_file"; then
    echo "$FUNCNAME(): failed to load '$bin_file'" 1>&2
    return 1
  fi

  devpanel_cmd__$function_name "${@:+$@}"
}

set_usage_msg() {
  local msg="$1"

  if [ -z "$namespace" ]; then
    echo "$FUNCNAME(): namespace is not defined" 1>&2
    return 1
  elif [ -z "$msg" ]; then
    echo "$FUNCNAME(): missing msg argument" 1>&2
    return 1
  fi

  devpanel_usage_r[$namespace]="$msg"
}

error_missing_value() {
  local name="${1#--}"

  error "missing value of parameter --$name"
}

error_missing_param() {
  local name="${1#--}"

  error "missing required parameter --$name. Please specify it."
}

escape_sed() {
  local str="$1"
  local escaped="$str"

  escaped=${escaped//\'/\\\'}
  escaped=${escaped//\*/\\\*}
  escaped=${escaped//\;/\\\;}
  escaped=${escaped//\[/\\\[}
  escaped=${escaped//\]/\\\]}
  escaped=${escaped//\\+/+\]}
  escaped=${escaped//\\\?/\?}
  escaped=${escaped//\\\(/\(}
  escaped=${escaped//\\\)/\)}
  escaped=${escaped//\//\\\/}
  escaped=${escaped//\&/\\\&}
  escaped=${escaped//$'\n'/\\n}

  echo -n "$escaped"
}

devpanel_run() {
  local -a cmd_ar=()
  local -a non_opts_ar=()
  local -a extra_args_ar=()
  local action was_in_debug_mode

  while [ -n "$1" ] && [ "${1:0:1}" != "-" ] && [[ "$1" =~ ^[A-Za-z0-9_.-]+$ ]]; do
    non_opts_ar+=( "$1" )
    shift
  done

  # NOTE: this variable $action is used on imported files to display the
  # command in the usage line. So don't remove or rename it (unless you
  # update all the files that use it).
  action="${non_opts_ar[*]}"

  local arg filename n_last_arg
  local test_bin full_bin_path found_bin run_bin
  local namespace

  n_last_arg=${#non_opts_ar[@]}
  for((i=$n_last_arg; $i >= 0; i--)); do
    old_IFS="$IFS"
    IFS=-
    filename="${non_opts_ar[*]:0:$i}"
    IFS="$old_IFS"

    for test_dir in bin sbin; do
      test_bin="$lib_dir/$test_dir/$filename"
      if [ -f "$test_bin" -a -x "$test_bin" ]; then
        found_bin=1

        if [ "$test_dir" == sbin -a $EUID -ne 0 ]; then
          error "this command requires ROOT privileges" -
          break 2
        fi

        full_bin_path="$test_bin"
        namespace=${filename//-/_}

        if [[ "$-" == *x* ]]; then
          # in the set - below it disables the debug mode, so we need to
          # re-enable it in case it was enabled
          was_in_debug_mode=1
        fi

        cmd_ar=( "${non_opts_ar[@]:0:$i}" )
        extra_args_ar=( "${non_opts_ar[@]:$i}" )
        set - "${extra_args_ar[@]}" "$@"
        if [ -n "$was_in_debug_mode" ]; then
          set -x
        fi

        run_bin=1
        break 2
      fi
    done
  done

  if [ -n "$found_bin" ]; then
    if [ -n "$run_bin" ]; then
      devpanel_load_n_run "$namespace" "$full_bin_path" "$@"
    else
      return 1
    fi
  else
    error "no such command" -
    return 1
  fi
}

_devpanel_cli_cleanup() {
  exit_code=$?

  local _tmp_file _tmp_dir
  if [ ${#temp_files_ar[@]} -gt 0 ]; then
    for _tmp_file in "${temp_files_ar[@]}"; do
      rm -f "${_tmp_file}"
    done
  fi

  if [ ${#temp_dirs_ar[@]} -gt 0 ]; then
    for _tmp_dir in "${temp_dirs_ar[@]}"; do
      rm_rf_safer "${_tmp_dir}"
    done
  fi

  # execute the exit functions of the commands (if any defined)
  local cmd
  if [ -n "${devpanel_trap_exit_cmds_ar[*]}" ]; then
    for cmd in "${devpanel_trap_exit_cmds_ar[@]}"; do
      eval $cmd
    done
  fi
}

show_help_msg() {
  local section="$1"
  shift

  local sb

  if [ $EUID -eq 0 ]; then
    sb='\#'
  else
    sb='\$'
  fi

  local msg_dir="$sys_dir/lib/cli/.usage-msgs"
  local msg_file="$msg_dir/$section.txt"

  if [ ! -f "$msg_file" ]; then
    echo -n "$FUNCNAME(): unknown section $section. "
    echo    "Please try running: ${sb#\\} $bin_name help" 1>&2
    return 1
  fi

  local name value name_esc value_esc
  local -a sed_replace_ar=()
  local basename=$(escape_sed "$self_basename")

  sed_replace_ar+=( "s/@self_basename@/$basename/g; s/@sb@/$sb/g;"$'\n' )
  while [ -n "$1" ]; do
    [[ ! "$1" == *=* ]] && continue
    name="${1%%=*}"
    value="${1##*=}"

    name_esc=$(escape_sed "$name")
    value_esc=$(escape_sed "$value")

    sed_replace_ar+=( "s/@$name_esc@/$value_esc/g;"$'\n' )
    shift
  done

  local tmp_file

  tmp_file=$(mktemp) || return 1
  temp_files_ar+=( "$tmp_file" )

  echo "${sed_replace_ar[@]}" >"$tmp_file" || return $?

  sed -r -f "$tmp_file" "$msg_file"
}

# main
[ -n "${BASH_SOURCE[0]}" ] && \
  __self_bin=`readlink -e "${BASH_SOURCE[0]}"`
if [ $? -ne 0 ]; then
  echo "Error: unable to get self path" 1>&2
  exit 1
fi

declare -r self_bin="$__self_bin"
declare -r self_basename="${0##*/}"
declare -r bin_name=${self_bin##*/}
declare -r self_bin_dir="${self_bin%/*}"
declare -r sys_dir="${self_bin_dir%/*}"

declare -r lib_dir="$sys_dir/lib/cli"

declare -A devpanel_usage_r=()
declare -a temp_files_ar=()
declare -a temp_dirs_ar=()

# Note: adding the exit trap here because the usage msg creates temporary
#       files, and to cleanup those files it needs to be setup early.
trap _devpanel_cli_cleanup EXIT

[ $# -eq 0 -o -z "$1" ] && usage

unset verbose lock_name
getopt_flags='vhL:-'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    v)
      verbose=1
      ;;
    h)
      usage
      ;;
    L)
      lock_name="$OPTARG"
      ;;
    -)
      case "$1" in
        --help|-help)
          usage
          ;;
        *)
          error "unknown option $1"
          ;;
      esac
      ;;
    *)
      exit 1
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

lib_file="$sys_dir/lib/functions"
if ! . "$lib_file"; then
  error "unable to load lib file '$lib_file'"
fi

if [ -n "$lock_name" ]; then
  if devpanel_lock "$lock_name"; then
    devpanel_trap_exit_cmds_ar+=( "devpanel_unlock $lock_name" )
  else
    exit 1
  fi
fi

load_devpanel_config || exit $?

load_state_data || exit $?

devpanel_run "$@"
