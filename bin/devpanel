#!/bin/bash

usage_default() {
  # devpanel <word>
  # devpanel <action> <object> <specific> <args>
  #            create   vhost    
  #            remove   vhost    
  #            get      vhost    token
  #            get      vhost    token

  local -A sections_r=()
  local summ_dir tmp_summ_file tmp_section tmp_desc_file desc
  local tmp_real_file tmp_msg tmp_cmd tmp_cmd_str tmp_cmd_line
  local section section_l section_b cmd_f
  local -a commands_ar=()

  echo "Usage: ${0##*/} <command> [args]"
  echo

  summ_dir="$lib_dir/.usage-lines"
  for section_l in $summ_dir/.section.[0-9]; do
    section_b=${section_l##*/}

    section=$(readlink "$section_l")
    echo "  $section"

    for tmp_summ_file in $summ_dir/$section_b.cmd.*; do
      if [ ! -L "$tmp_summ_file" ]; then
        continue
      fi

      tmp_cmd_str=${tmp_summ_file#$summ_dir/$section_b.cmd.*.}
      tmp_real_file=$(readlink -m "$tmp_summ_file")
      desc=${tmp_real_file##*/}

      printf "    %-20s %s\n" "$tmp_cmd_str" "$desc"

      # tmp_cmd_line=$(printf "    %-20s %s\n" "$tmp_cmd_str" "$desc")
      # commands_ar+=( "$tmp_cmd_line" )
    done
      
    echo # print a new line at the end of the section
  done

  echo "
  For more information about a specific command, run:
    $ devpanel COMMAND --help

    Example: $ devpanel create vhost --help
"
  # if [ ${#commands_ar[@]} -gt 0 ]; then
  #   echo "
  # Commands: "
  #
  #   for tmp_cmd in "${commands_ar[@]}"; do
  #     echo "$tmp_cmd"
  #   done
  # 
  #   echo
  # fi

  exit 1
}

usage() {
  local name="$1"
  local msg

  if [ -z "$name" ]; then
    if [ -n "${devpanel_usage_r[$namespace]}" ]; then
      echo "${devpanel_usage_r[$namespace]}" 1>&2
    else 
      usage_default
    fi
  else
    if [ -n "${devpanel_usage_r[$namespace]}" ]; then
      echo "${devpanel_usage_r[$namespace]}" 1>&2
    else
      echo "Error: (missing usage msg for '$name')" 1>&2
    fi
  fi

  exit 1
}

error() {
  local msg="$1"
  local exit_code="${2:-1}"

  [ -n "$msg" ] && echo "Error: $msg" 1>&2
  exit $exit_code
}

get_namespace() {
  local path="$1"

  local action subject object
  local basename namespace
  basename="${path#$lib_dir/*/}"

  if [[ "$basename" == *-*-* ]]; then
    IFS=- read action object subject <<< "$basename"
    namespace="${object}_${action}_${subject}"
  elif [[ "$basename" == *-* ]]; then
    IFS=- read action object <<< "$basename"
    namespace="${object}_${action}"
  else
    namespace=${basename//\//_}
  fi


  echo -n "$namespace"
}

get_executable_basename() {
  local path="$1"

  local action subject object
  local name
  name="${path#$lib_dir/*/}"

  if [[ "$name" == *-*-* ]]; then
    echo "$name" | IFS=/ read action subject object
    name="${object}_${action}_${subject}"
  elif [[ "$name" == *-* ]]; then
    echo "$name" | IFS=/ read action object
    name="${object}_${action}"
  fi


  echo -n "$name"
}


devpanel_load_n_run() {
  local function_name="$1"
  local bin_file="$2"
  shift 2

  if ! . "$bin_file"; then
    echo "$FUNCNAME(): failed to load '$bin_file'" 1>&2
    return 1
  fi

  $function_name "${@:+$@}"
}

set_usage_msg() {
  local msg="$1"

  if [ -z "$namespace" ]; then
    echo "$FUNCNAME(): namespace is not defined" 1>&2
    return 1
  elif [ -z "$msg" ]; then
    echo "$FUNCNAME(): missing msg argument" 1>&2
    return 1
  fi

  devpanel_usage_r[$namespace]="$msg"
}

print_object_help() {
  local obj="$1"

  local t_file usage_file t_dir t_bname line op usage_msg help_msg

  t_dir="$lib_dir/$obj"

  usage_msg+="Usage: $bin_name <action> $obj [options]"$'\n'$'\n'

  for usage_file in $t_dir/.summary-files/*; do
    [ ! -f "$usage_file" ] && continue

    line=$(head -1 "$usage_file")
    help_msg+=$(printf "    %-15s %s" "$op" "$line")
    help_msg+=$'\n'
  done

  if [ -n "$help_msg" ]; then
    usage_msg+="  Actions:"$'\n'
    help_msg+=$'\n'
    echo "$usage_msg"
    echo "$help_msg"
    return 0
  else
    echo "$FUNCNAME(): no help msg for $obj" 1>&2
    return 1
  fi
}

error_missing_value() {
  local name="$1"

  error "missing value of parameter --$name"
}

error_missing_param() {
  local name="$1"

  error "missing required parameter --$name. Please specify it."
}

# main
__self_bin=`readlink -e "$0"`
if [ $? -ne 0 ]; then
  echo "Error: unable to get self path" 1>&2
  exit 1
fi

declare -r self_bin="$__self_bin"
declare -r bin_name=${self_bin##*/}
declare -r self_bin_dir="${self_bin%/*}"
declare -r sys_dir="${self_bin_dir%/*}"

declare -r lib_dir="$sys_dir/lib/cli"

[ $# -eq 0 -o -z "$1" ] && usage

declare -A devpanel_usage_r=()

unset verbose
getopt_flags='v'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    v)
      verbose=1
      ;;
    *)
      exit 1
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

unset full_bin_path found_bin
unset action object

declare -a walk_args=()
path_walk=""

while [ -n "$1" ] && [ "${1:0:1}" != "-" ] && [[ "$1" =~ ^[A-Za-z0-9_.-]+$ ]]; do
  walk_args+=( "$1" )
  shift
done

if [ ${#walk_args[@]} -eq 1 ]; then
  arg="${walk_args[0]}"
  if [ -d "$lib_dir/$arg" ]; then
    print_object_help "$arg"
    exit 1
  fi

  if [ $EUID -eq 0 ]; then
    path_walk="$lib_dir/sbin/$arg"
  else
    path_walk="$lib_dir/bin/$arg"
  fi

  if [ -f "$path_walk" -a -x "$path_walk" ]; then
    action="$arg"
    object=""
    namespace="$action"
    full_bin_path="$path_walk"
    found_bin=1
    # shift # crucial as there's only one argument
  fi
elif [ ${#walk_args[@]} -ge 2 ]; then
  action="${walk_args[0]}"
  object="${walk_args[1]}"

  namespace="${object}_${action}"

  path_walk="$lib_dir/libexec/$action-$object"

  if [ -d "$path_walk" -a ${#walk_args[@]} -eq 2 ]; then
    print_object_help "$action"
  elif [ -f "$path_walk" -a -x "$path_walk" ]; then
    full_bin_path="$path_walk"
    found_bin=1
  else
    for((i=2; $i < ${#walk_args[@]}; i++)); do
      arg=${walk_args[$i]}
      path_walk+="-$arg"
      namespace+="_$arg"

      if [ -f "$path_walk" -a -x "$path_walk" ]; then
        full_bin_path="$path_walk"
        found_bin=1
        break
      fi
    done
  fi
fi
 
if [ -z "$found_bin" ]; then
  error "unknown command (not found)"
fi

if [ -n "$verbose" ]; then
  echo
  echo "Executing: $full_bin_path $@"
fi

namespace=${namespace//-/_}
devpanel_load_n_run "$namespace" "$full_bin_path" "$@"
