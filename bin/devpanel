#!/bin/bash

usage_default() {

  if [ $EUID -eq 0 ]; then
    show_help_msg usage-root
  else
    show_help_msg usage-non-root
  fi

  exit 1
}

usage() {
  local name="$1"
  local msg

  if [ -z "$name" ]; then
    if [ -n "${devpanel_usage_r[$namespace]}" ]; then
      echo "${devpanel_usage_r[$namespace]}" 1>&2
    else 
      usage_default
    fi
  else
    if [ -n "${devpanel_usage_r[$namespace]}" ]; then
      echo "${devpanel_usage_r[$namespace]}" 1>&2
    else
      echo "Error: (missing usage msg for '$name')" 1>&2
    fi
  fi

  exit 1
}

error() {
  local msg="$1"
  local exit_code="${2:-1}"

  [ -n "$msg" ] && echo "Error: $msg" 1>&2

  if [ "$exit_code" == - ]; then
    return 1
  else
    exit $exit_code
  fi
}

get_namespace() {
  local path="$1"

  local action subject object
  local basename namespace
  basename="${path#$lib_dir/*/}"

  if [[ "$basename" == *-*-* ]]; then
    IFS=- read action object subject <<< "$basename"
    namespace="${object}_${action}_${subject}"
  elif [[ "$basename" == *-* ]]; then
    IFS=- read action object <<< "$basename"
    namespace="${object}_${action}"
  else
    namespace=${basename//\//_}
  fi


  echo -n "$namespace"
}

get_executable_basename() {
  local path="$1"

  local action subject object
  local name
  name="${path#$lib_dir/*/}"

  if [[ "$name" == *-*-* ]]; then
    echo "$name" | IFS=/ read action subject object
    name="${object}_${action}_${subject}"
  elif [[ "$name" == *-* ]]; then
    echo "$name" | IFS=/ read action object
    name="${object}_${action}"
  fi


  echo -n "$name"
}


devpanel_load_n_run() {
  local function_name="$1"
  local bin_file="$2"
  shift 2

  if ! . "$bin_file"; then
    echo "$FUNCNAME(): failed to load '$bin_file'" 1>&2
    return 1
  fi

  devpanel_cmd__$function_name "${@:+$@}"
}

set_usage_msg() {
  local msg="$1"

  if [ -z "$namespace" ]; then
    echo "$FUNCNAME(): namespace is not defined" 1>&2
    return 1
  elif [ -z "$msg" ]; then
    echo "$FUNCNAME(): missing msg argument" 1>&2
    return 1
  fi

  devpanel_usage_r[$namespace]="$msg"
}

error_missing_value() {
  local name="$1"

  error "missing value of parameter --$name"
}

error_missing_param() {
  local name="$1"

  error "missing required parameter --$name. Please specify it."
}

escape_sed() {
  local str="$1"
  local escaped="$str"

  escaped=${escaped//\'/\\\'}
  escaped=${escaped//\*/\\\*}
  escaped=${escaped//\;/\\\;}
  escaped=${escaped//\[/\\\[}
  escaped=${escaped//\]/\\\]}
  escaped=${escaped//\\+/+\]}
  escaped=${escaped//\\\?/\?}
  escaped=${escaped//\\\(/\(}
  escaped=${escaped//\\\)/\)}
  escaped=${escaped//\//\\\/}
  escaped=${escaped//\&/\\\&}
  escaped=${escaped//$'\n'/\\n}

  echo -n "$escaped"
}

devpanel_run() {
  local -a cmd_ar=()
  local -a non_opts_ar=()
  local -a extra_args_ar=()

  while [ -n "$1" ] && [ "${1:0:1}" != "-" ] && [[ "$1" =~ ^[A-Za-z0-9_.-]+$ ]]; do
    non_opts_ar+=( "$1" )
    shift
  done

  local arg filename n_last_arg
  local test_bin full_bin_path found_bin run_bin
  local namespace

  n_last_arg=${#non_opts_ar[@]}
  for((i=0; $i < $n_last_arg; i++)); do
    arg=${non_opts_ar[$i]}
    cmd_ar+=( $arg )

    if [ $i -eq 0 ]; then
      filename="$arg"
    else
      filename+="-$arg"
    fi

    for test_dir in libexec bin sbin; do
      test_bin="$lib_dir/$test_dir/$filename"
      if [ -f "$test_bin" -a -x "$test_bin" ]; then
        found_bin=1

        if [ "$test_dir" == sbin -a $EUID -ne 0 ]; then
          error "this command requires ROOT privileges" -
          break 2
        fi

        full_bin_path="$test_bin"
        namespace=${filename//-/_}
        extra_args_ar=(${non_opts_ar[@]:$(($i+1))})
        run_bin=1
        break 2
      fi
    done
  done

  if [ -n "$found_bin" ]; then
    if [ -n "$run_bin" ]; then
      devpanel_load_n_run "$namespace" "$full_bin_path" "$@"
    else
      return 1
    fi
  else
    error "no such command" -
    return 1
  fi
}


# main
__self_bin=`readlink -e "$0"`
if [ $? -ne 0 ]; then
  echo "Error: unable to get self path" 1>&2
  exit 1
fi

declare -r self_bin="$__self_bin"
declare -r self_basename="${0##*/}"
declare -r bin_name=${self_bin##*/}
declare -r self_bin_dir="${self_bin%/*}"
declare -r sys_dir="${self_bin_dir%/*}"

declare -r lib_dir="$sys_dir/lib/cli"

show_help_msg() {
  local section="$1"

  local msg_dir="$sys_dir/lib/cli/.usage-msgs"

  local msg_file="$msg_dir/$section.txt"

  local basename=$(escape_sed "$self_basename")

  local sb

  if [ $EUID -eq 0 ]; then
    sb='\#'
  else
    sb='\$'
  fi

  if [ -f "$msg_file" ]; then
    sed -e "s/@self_basename@/$basename/g; s/@sb@/$sb/g;" "$msg_file"
  else
    echo -n "$FUNCNAME(): unknown section $section. "
    echo    "Please try running: ${sb#\\} $basename help" 1>&2
    return 1
  fi
}

[ $# -eq 0 -o -z "$1" ] && usage

declare -A devpanel_usage_r=()

unset verbose
getopt_flags='v'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    v)
      verbose=1
      ;;
    *)
      exit 1
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

# TODO: load functions
devpanel_run "$@"
