#!/bin/bash

error() {
  local msg="$1"
  echo "Error: $msg" 1>&2
  exit 1
}

usage() {
  echo "Usage: `basename "$0"` [ options ] <original_file> <key1> [ key2 ] [ keyN ]

  Options
    -o output_file                write the output to output_file instead of
                                  modifying the original file
    -n                            don't load default keys
    -v                            display more verbose messages
"
  exit 1
}

# main

[ $# -lt 2 -o -z "$1" -o -z "$2" ] && usage

getopt_flags='o:vn'

unset output_file verbose
while getopts $getopt_flags OPTN; do
  case $OPTN in
    o)
      output_file="$OPTARG"
      ;;
    v)
      verbose=1
      ;;
    *)
      usage
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

self_bin=$(readlink -e "${BASH_SOURCE[0]}")
if [ $? -ne 0 ]; then
  error "unable to get self path"
fi
self_dir=${self_bin%/*}
sys_dir=${self_dir%/*}

lib_file="$sys_dir/lib/functions"
if ! source "$lib_file"; then
  error "unable to source lib file $lib_file"
fi
load_devpanel_config || exit $?

umask 077
tmp_sed_file=`mktemp`
if [ $? -ne 0 ]; then
  error "unable to create temporary file"
fi

original_file="$1"

if [ -n "$output_file" ]; then
  tmp_output_file=`mktemp "$output_file.XXXXXXXXXXXXXX"`
  if [ $? -ne 0 ]; then
    error "unable to create temporary file (output)"
  fi

  if ! cat "$original_file" > "$tmp_output_file"; then
    error "unable to copy the contents of '$file' to '$tmp_output_file'"
  fi
else
  tmp_output_file="$original_file"
  output_file="$original_file"
fi

trap 'rm -f "$tmp_sed_file" "$tmp_output_file"' HUP INT QUIT EXIT TERM

if ! exec 3>$tmp_sed_file; then
  error "unable to open '$tmp_sed_file'"
fi

for var in ${!conf__*} ${!lamp__*}; do
  value_esc=$(escape_sed "${!var}")
  if ! echo "s/@@__${var^^}__@@/$value_esc/g;" 1>&3; then
    error "failed writing to $tmp_sed_file"
  fi
done

sed -i -f "$tmp_sed_file" "$tmp_output_file"
if [ $? -ne 0 ]; then
  error "unable to update file '$tmp_output_file'"
fi

if [ "$tmp_output_file" == "$output_file" ]; then
  [ -n "$verbose" ] && echo "Successfully wrote output file '$output_file'"
  exit 0
else
  cp -f "$tmp_output_file" "$output_file"
  [ -n "$verbose" ] && echo "Successfully wrote output file '$output_file'"
fi

exit 0
