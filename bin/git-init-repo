#!/bin/bash

usage() {
  echo "Usage: `basename "$0"` [ options ] [name]
  
  Options
    -d <target_dir>              the target directory where to clone
    -I                           add a first commit to the repository
    -r remote_name=remote_addr   sets the remote name and address
                                 (this flag can be used multiple times)
    -c key=value                 options to be saved by git config.
                                 This option can be used multiple times
    -n                           create a non-bare repository
    -P                           create a non-bare repository on the
                                 public_html directory of the vhost

  Creates a bare git repository on the specified target directory.

  [name] is just a friendly short name when the -d option is not used
"
  exit 1
}


# main

[ $# -eq 0 ] && usage

if [ $EUID -eq 0 ]; then
  echo "Error: this script should not be run with ROOT privileges" 1>&2
  exit 1
fi

self_bin=`readlink -e "$0"`
if [ $? -ne 0 ]; then
  echo "Error: unable to get self path" 1>&2
  exit 1
fi

self_dir="${self_bin%/*}"
sys_dir="${self_dir%/*}"

getopt_flags='d:r:c:IPn'
is_bare=1
unset GIT_DIR initial_commit target_dir
declare -a remotes_ar=()
declare -a configs_ar=()
while getopts $getopt_flags OPTNAME; do
  case "$OPTNAME" in
    d)
      target_dir="$OPTARG"
      ;;
    I)
      initial_commit=1
      ;;
    r)
      if echo "$OPTARG" | egrep -q '^[A-Za-z0-9._-]+=.+'; then
        remotes_ar+=( "$OPTARG" )
      else
        echo "Error: parameter passed to -r has an invalid format." 1>&2
        exit 1
      fi
      ;;
    c)
      if echo "$OPTARG" | egrep -q '^[A-Za-z0-9._-]+=.+'; then
        configs_ar+=( "$OPTARG" )
      else
        echo "Error: parameter passed to -c has an invalid format." 1>&2
        exit 1
      fi
      ;;
    P)
      target_dir="$HOME/public_html/${USER#w_}"
      unset is_bare
      ;;
    n)
      unset is_bare
      ;;
    *)
      exit 1
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

if [ -z "$target_dir" -a -z "$1" ]; then
  usage
elif [ -z "$target_dir" -a -n "$1" ]; then
  name=$(basename "$1")
  target_dir="$HOME/repositories/$name.git"
elif [ -n "$target_dir" -a "${target_dir:0:1}" != "/" ]; then
  target_dir="$HOME/$target_dir"
fi

if [ -n "$is_bare" ]; then
  dot_git_dir="$target_dir"
else
  dot_git_dir="$target_dir/.git"

  if ! cd "$target_dir"; then
    echo "Error: unable to cd into $target_dir" 1>&2
    exit 1
  fi
fi

git init ${is_bare:+--bare "$target_dir"}
if [ $? -ne 0 ]; then
  echo "Error: unable to initiliaze a git repo on dir '$target_dir'" 1>&2
  exit 1
fi

if [ -n "$initial_commit" ]; then
  if [ -n "$is_bare" ]; then
    tmp_work_dir=`mktemp -d`
    if [ $? -ne 0 ]; then
      echo "Error: unable to create temporary directory" 1>&2
      exit 1
    fi
    work_dir="$tmp_work_dir"
    trap 'rm -rf "$tmp_work_dir"' EXIT

    git clone -l "file://$target_dir" "$work_dir"
    if [ $? -ne 0 ]; then
      echo "Error: unable to clone from '$target_dir'" 1>&2
      exit 1
    fi
  else
    work_dir="$target_dir"
  fi

  if ! cd "$work_dir"; then
    echo "Error: unable to chdir to $work_dir" 1>&2
    exit 1
  fi

  if ! author_name=`git config --global user.name 2>/dev/null`; then
    author_name='DevPanel Service'
  fi
  if ! author_email=`git config --global user.email 2>/dev/null`; then
    author_email="support@devpanel.com"
  fi

  git -c "user.name=$author_name" \
    -c "user.email=$author_email" commit --allow-empty \
    -m "Repository initiliazed using DevPanel"

  if [ $? -ne 0 ]; then
    echo "Error: failed to add the initial commit to the repo" 1>&2
    exit 1
  fi

  if [ -n "$is_bare" ]; then
    git push origin master
    if [ $? -ne 0 ]; then
      echo "Error: unable to push the initial commit back to the repository" 1>&2
      exit 1
    fi
  fi
fi

if ! cd "$target_dir"; then
  echo "Error: unable to chdir to $target_dir" 1>&2
  exit 1
fi

if [ -n "$name" ]; then
  repo_ssh_key="$HOME/.ssh/id_rsa_dp_repo_$name"
  if "$sys_dir/bin/gen-temp-sshkey" "$repo_ssh_key" >/dev/null; then
    "$sys_dir/bin/update-dot-ssh-config" "$HOME/.ssh/config" \
      add_section "git-repo-$name.*" "IdentityFile=$repo_ssh_key"
    if [ $? -ne 0 ]; then
      echo "Warning: failed to update .ssh/config with the repo key" 1>&2
    fi
  else
    echo "Warning: failed to generate repo ssh key $repo_ssh_key" 1>&2
  fi
fi
 
for remote_str in ${remotes_ar[@]}; do
  # split the name=value string
  remote_name=${remote_str%%=*}
  remote_addr=${remote_str#*=}

  origin_path="$dot_git_dir/refs/remotes/origin/"
  if [ -e "$origin_path" ]; then
    git remote remove origin
  fi

  git remote add "$remote_name" "$remote_addr"
done

for config_str in ${configs_ar[@]}; do
  # split the name=value string
  config_key=${config_str%%=*}
  config_vle=${config_str#*=}

  git config "$config_key" "$config_vle"
done

exit 0
