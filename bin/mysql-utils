#!/bin/bash
#
# Converts MySQL tables storage types from one type to the other
# E.g.:  MyISAM -> InnoDB, InnoDB -> MyISAM

usage_repair_db() {
  local prog=$(basename "$0")
  echo "Usage: $prog <db_name>
Usage: $prog 

This command repairs the MySQL database of the current vhost.
"
  exit 1
}

usage_convert_tables_engine() {
  echo "Usage: $(basename "$0") <db_name> <new_engine>

Converts the specified database storage engine to the new engine type.
"
  exit 1
}

usage_convert_shortcut() {
  local prog=$(basename "$0")
  local type=${prog##*-}

  echo "Usage: $prog --yes
Usage: $prog <db_name>

This command converts the tables of the database to engine $type
"
  exit 1
}

usage_mysql_overwrite_db() {
  local prog=$(basename "$0")
  local type=${prog##*-}

  echo "Usage: $prog <db_name> <sql_file>

  Overwrite the current site database with contents from the sql file.

  db_name: can be set to '-' to guess the database name.
  sql_file: can be set to '-' to read from STDIN

  Both db_name and sql_file are required parameters.
"
  exit 1
}

usage_mysql_dump_split_db() {
  local prog=$(basename "$0")
  local type=${prog##*-}

  echo "Usage: $prog <db_name> <target_file>

  Dumps database to the specified target file, splitting database schema and
  data into separate files inside the specified target_file with format
  .tar.gz.
"
  exit 1
}

usage_test_split_dump() {
  local prog=$(basename "$0")
  local type=${prog##*-}

  echo "Usage: $prog <dump_file>

  Tests whether the dump file was successfully created.
"
  exit 1
}

usage_mysql_import_split_dump() {
  local prog=$(basename "$0")
  local type=${prog##*-}

  echo "Usage: $prog [options] <db_name> <dump_file>

  Options:
    -o          overwrite the database if it already exists

  Imports the database from the dump file into the specified database name.
"
  exit 1
}

usage_dump_db_schema() {
  local prog=$(basename "$0")

  echo "Usage: $prog <db_name>

  Dumps the schema of the specified database.
"
  exit 1
}

mysql_test_split_dump() {
  local dump_source="$1"
  local dump_type="" dump_file="" dump_dir="" tmp_dump_dir=""

  if [ -f "$dump_source" ]; then
    dump_type="file"
    dump_file="$dump_source"
  elif [ -d "$dump_source" ]; then
    dump_type="dir"
    dump_dir="$dump_source"
  else
    echo "$FUNCNAME(): unable to find file $dump_file" 1>&2
    return 1
  fi

  if [ "$dump_type" == "file" ]; then
    tmp_dump_dir=$(mktemp -d)
    if [ $? -ne 0 ]; then
      echo "$FUNCNAME(): unable to create temporary directory" 1>&2
      return 1
    fi

    dump_dir="$tmp_dump_dir"
    tar -zxf "$dump_file" -C "$dump_dir"
    if [ $? -ne 0 ]; then
      echo "$FUNCNAME(): unable to extract dump file" 1>&2
      return 1
    fi
  fi

  local schema_file="$dump_dir/schema.sql"
  local data_file="$dump_dir/data.sql"

  if [ ! -f "$schema_file" ]; then
    echo "$FUNCNAME(): missing schema file on the dump" 1>&2
    return 1
  elif [ ! -f "$data_file" ]; then
    echo "$FUNCNAME(): missing data file on the dump" 1>&2
    return 1
  fi

  local tmp_db_name="test_$(wedp_gen_random_str 7)"
  mysql -BN -e "CREATE DATABASE $tmp_db_name;"
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to create temporary database $tmp_db_name"
    return 1
  fi

  mysql -BN -D "$tmp_db_name" < "$schema_file"
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to import db schema" 1>&2
    return 1
  fi

  if ! convert_database_engine "$tmp_db_name" BLACKHOLE >/dev/null; then
    echo "$FUNCNAME(): unable to convert database to blackhole format" 1>&2
    return 1
  fi

  if ! mysql -BN -D "$tmp_db_name" < "$data_file"; then
    echo "$FUNCNAME(): unable to import data into db $tmp_db_name" 1>&2
    return 1
  fi

  if ! mysql -BN -e "DROP DATABASE $tmp_db_name;"; then
    echo "$FUNCNAME(): Warning, unable to remove temporary database $tmp_db_name" 1>&2
  fi

  [ -n "$tmp_dump_dir" ] && rm_rf_safer "$tmp_dump_dir"

  return 0
}

is_valid_mysql_name() {
  local name="$1"
  local name_type="$2"

  if is_valid_mysql_db_or_table_name "$name"; then
    return 0
  else
    echo "$FUNCNAME(): invalid $name_type name" 1>&2
    return 1
  fi
}

is_valid_name_or_exit() {
  local status

  is_valid_mysql_name "$@"
  status=$?
  if [ $status -eq 0 ]; then
    return $status
  else
    exit $status
  fi
}

convert_database_engine() {
  local db_name="$1"
  local new_engine="$2"

  is_valid_mysql_name "$db_name" database  || return 1
  is_valid_mysql_name "$new_engine" engine || return 1

  if ! is_mysql_engine_supported "$new_engine"; then
    echo "$FUNCNAME(): engine '$new_engine' not supported" 1>&2
    return 1
  fi

  local schema_db="information_schema"
  local sql_select="SELECT * FROM ENGINES WHERE ENGINE = '$new_engine';"
  local tables_with_schema="SELECT TABLE_NAME FROM TABLES WHERE "
  local tables_with_schema+="ENGINE != '$new_engine' AND TABLE_SCHEMA = '$db_name';"


  # confirm that engine exists on mysqld
  local engine_exists=$(mysql -BN -D "$schema_db" -e "$sql_select")
  if [ $? -ne 0 -o -z "$engine_exists" ]; then
    echo "$FUNCNAME(): error, engine '$new_engine' not enabled on MySQL server" 1>&2
    return 1
  fi

  # confirm that can access the $db_name
  if ! mysql -BN -D "$db_name" -e "SHOW TABLES" &>/dev/null; then
    echo "$FUNCNAME(): unable to access database $db_name" 1>&2
    return 1
  fi

  # get the list of tables with a different engine
  tables_to_convert=$(mysql -BN -D "$schema_db" -e "$tables_with_schema")
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to get the list of tables to convert" 1>&2
  fi

  if [ -z "$tables_to_convert" ]; then
    echo "Warning: there are no tables to be converted" 1>&2
    return 0
  fi

  local -i n_tables=0
  local -i n_success=0
  local -i n_failed=0
  local table
  while read table; do
    n_tables+=1
    local sql_convert="ALTER TABLE $table ENGINE = $new_engine;"

    if mysql -D "$db_name" -e "$sql_convert"; then
      local sql_table_engine="SELECT ENGINE FROM TABLES WHERE "
      local sql_table_engine+="TABLE_NAME = '$table' AND ENGINE = '$new_engine';"
      
      local engine_confirmed=$(mysql -BN -D "$schema_db" -e "$sql_table_engine")
      local status=$?
      if [ $status -eq 0 -a -z "$engine_confirmed" ]; then
        echo "$FUNCNAME(): Failed to convert table $table, maybe engine $new_engine is disabled on mysqld" 1>&2
        n_failed+=1
      elif [ $status -eq 0 ]; then
        n_success+=1
        echo "Successfully converted table $table"
      fi
    else # failed ALTER TABLE...
      n_failed+=1
      echo "$FUNCNAME(): Failed to convert table $table" 1>&2
    fi
  done <<< "$tables_to_convert"

  local msg=""
  if [ $n_success -gt 0 ]; then
    msg="Successfully converted $n_success tables to $new_engine"
  fi

  local ret_code
  if [ $n_failed -gt 0 ]; then
    ret_code=1
    if [ $n_success -eq 0 ]; then
      msg="Failed to convert $n_failed tables"
    else
      msg+=", failed to convert $n_failed tables"
    fi
  elif [ $n_failed -eq 0 -a $n_success -gt 0 ]; then
    ret_code=0
  else
    ret_code=1
    echo "$FUNCNAME(): unknown condition when evaluating success or failure. This code needs more work."
  fi
  
  echo "$msg"

  return $ret_code
}

cleanup_import_split_db() {
  [ -f "$tmp_dump_file" ] && rm -f "$tmp_dump_file"
  [ -d "$tmp_dump_dir" ] && rm_rf_safer "$tmp_dump_dir"
}

guess_database_name() {
  db_name=$(get_apache_metadata_value "$sys_dir" 'app:0:_:db_name')
  if [ $? -eq 0 -a -n "$db_name" ]; then
    echo "$db_name"
    return 0
  else
    echo "$FUNCNAME(): unable to determine web site main database" 1>&2
    return 1
  fi
}

does_db_exist() {
  local db_name="$1"

  mysql -D "$db_name" -e 'SELECT "whatever";' &>/dev/null
}

if ! hash mysqlcheck &>/dev/null; then
  echo "Error: missing mysqlcheck command" 1>&2
  exit 1
elif ! hash mysql &>/dev/null; then
  echo "Error: missing mysql command" 1>&2
  exit 1
fi

self_bin=$(readlink -e "$0")
dir=$(dirname "$self_bin")
sys_dir=$(readlink -e "$dir/..")

operation=$(basename "$0")

lib_file="$sys_dir/lib/functions"
if ! source "$lib_file"; then
  echo "Error: unable to source lib file $lib_file" 1>&2
  exit 1
fi

case "$operation" in
  repair-vhost-db)

    [ -n "$1" -a "$1" == "-h" ] && usage_repair_db

    if [ -z "$1" ]; then
      db_name=$(guess_database_name) || exit 1
    fi

    is_valid_name_or_exit "$db_name" database

    echo "Running a repair on database $db_name..."
    sleep 2
    run_verbose mysqlcheck -r "$db_name"
    exit_code=$?
    if [ $exit_code -eq 0 ]; then
      echo
      echo "Successfully finished repair of database $db_name"
    else
      echo "Error: repair failed" 1>&2
    fi
    ;;
  convert-tables-engine)
    [ -z "$1" -o -z "$2" ] && usage_convert_tables_engine
    db_name="$1"
    new_engine="$2"
    convert_database_engine "$db_name" "$new_engine"
    exit_code=$?
    ;;
  convert-tables-to-innodb|convert-tables-to-myisam)
    [ $# -eq 0 -o -z "$1" ] && usage_convert_shortcut

    if [ $# -eq 1 -a "$1" == "--yes" ]; then
      db_name=$(guess_database_name) || exit 1
    elif [ $# -eq 1 ]; then
      db_name="$1"
    else
      usage_convert_shortcut
    fi

    is_valid_name_or_exit "$db_name" database

    new_engine=${operation##*-}

    convert_database_engine "$db_name" "$new_engine"
    exit_code=$?

    ;;

  $(basename "$self_bin"))
    msg="please don't run this command directly. Check on this directory "
    msg+="for the scripts that link to this file."
    error "$msg"
    ;;
  mysql-dump-db-schema)
    [ $# -eq 0 -o -z "$1" ] && usage_dump_db_schema
    db_name="$1"

    if ! does_db_exist "$db_name"; then
      error "database '$db_name' doesn't seem to exist"
    fi

    mysqldump --no-data "$db_name"
    ;;
  mysql-import-split-dump)
    [ $# -eq 0 ] && usage_mysql_import_split_dump

    getopt_flags='o'
    unset overwrite_db db_exists
    while getopts $getopt_flags OPTN; do
      case "$OPTN" in
        o)
          overwrite_db=1
          ;;
        *)
          exit 1
          ;;
      esac
    done
    [ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

    [ -z "$1" -o -z "$2" ] && usage_mysql_import_split_dump

    if [ "$1" == "-" ]; then
      db_name=$(guess_database_name)
      if [ $? -ne 0 ]; then
        error "unable to guess database name"
      fi
    else
      db_name="$1"
    fi

    if does_db_exist "$db_name"; then
      db_exists=1
    fi

    if [ -z "$overwrite_db" -a -n "$db_exists" ]; then
      error "database '$db_name' already exists, won't overwrite."
    fi

    trap 'cleanup_import_split_db' EXIT
    dump_file="$2"
    if [ "$dump_file" == "-" ]; then
      tmp_dump_file=$(mktemp)
      if [ $? -ne 0 ]; then
        error "unable to create temporary file"
      fi
      dump_file="$tmp_dump_file"

      cat >"$dump_file"
      if [ $? -ne 0 ]; then
        error "unable to save STDIN to temporary file"
      elif [ ! -s "$dump_file" ]; then
        error "received dump file is empty"
      fi
    else
      if [ ! -f "$dump_file" ]; then
        error "unable to find file '$dump_file'"
      fi
    fi

    tmp_dump_dir=$(mktemp -d)
    if [ $? -ne 0 ]; then
      error "unable to create temporary directory"
    fi

    if ! tar -zxf "$dump_file" -C "$tmp_dump_dir"; then
      error "unable to extract dump file $dump_file"
    fi
    
    if ! mysql_test_split_dump "$tmp_dump_dir"; then
      error "received a malformed dump file"
    fi

    if [ -n "$overwrite_db" -a -n "$db_exists" ]; then
      if mysql -BN -e "DROP DATABASE $db_name;"; then
        unset db_exists
      else
        error "unable to drop existing database $db_name"
      fi
    elif [ -z "$db_exists" ]; then
      :
    elif [ -z "$overwrite_db" -a -n "$db_exists" ]; then
      error "database '$db_name' already exists, won't overwrite."
    else
      error "unknown condition on validating db existance"
    fi

    if [ -z "$db_exists" ]; then
      if ! mysql -BN -e "CREATE DATABASE $db_name;"; then
        error "unable to create database $db_name"
      fi
    fi

    if ! mysql -BN -D "$db_name" < "$tmp_dump_dir/schema.sql"; then
      error "unable to import database schema into db $db_name"
    fi

    if ! mysql -BN -D "$db_name" < "$tmp_dump_dir/data.sql"; then
      error "unable to import database data into db $db_name"
    fi

    echo "Successfully imported database $db_name"
    exit_code=0
    ;;
  mysql-dump-split-db-tar-gz)
    [ $# -lt 2 -o -z "$1" -o -z "$2" ] && usage_mysql_dump_split_db
    db_name="$1"
    target_file="$2"

    if [ "$db_name" == "-" ]; then
      db_name=$(guess_database_name)
      if [ $? -ne 0 ]; then
        error "unable to guess database name"
      fi
    fi

    if ! does_db_exist "$db_name"; then
      error "database '$db_name' doesn't seem to exist."
    fi

    if [ -e "$target_file" ]; then
      error "target file '$target_file' already exists"
    fi

    tmp_target_file=$(mktemp "$target_file.XXXXXX")
    if [ $? -ne 0 ]; then
      error "unable to create temporary target file"
    fi

    tmp_db_dir=$(mktemp -d)
    if [ $? -ne 0 -o -z "$tmp_db_dir" ]; then
      error "unable to create temporary directory"
    else
      trap '[ -d "$tmp_db_dir" ] && rm_rf_safer "$tmp_db_dir"' EXIT
    fi

    tmp_schema_file="$tmp_db_dir/schema.sql"
    tmp_data_file="$tmp_db_dir/data.sql"

    mysqldump --no-data "$db_name" >"$tmp_schema_file"
    if [ $? -ne 0 ]; then
      error "unable to dump schema from database"
    fi

    mysqldump --no-create-db --no-create-info "$db_name" >"$tmp_data_file"
    if [ $? -ne 0 ]; then
      error "unable to dump data from database"
    fi

    tar -zcf "$tmp_target_file" -C "$tmp_db_dir" .
    if [ $? -ne 0 ]; then
      error "unable to create tar.gz file on $tmp_target_file"
    fi

    if ! mv -n "$tmp_target_file" "$target_file"; then
      error "unable to move file '$tmp_target_file' to '$target_file'"
    fi

    echo "Successfully dumped database schema and data to file $target_file"
    exit_code=0
    ;;
  mysql-test-split-dump-db-tar-gz)
    [ -z "$1" ] && usage_test_split_dump

    dump_file="$1"

    if mysql_test_split_dump "$dump_file"; then
      echo "Successfully validated dump from schema $dump_file"
      exit_code=0
    else
      exit_code=1
    fi
    ;;
  *)
    exit_code=1
    echo "Error: unknown operation" 1>&2
    ;;
esac

exit $exit_code
