#!/bin/bash

usage() {
  echo "Usage: `basename "$0"` [ options ] <file>

  Generates a new SSH private key and sends the public key to stdout
    <file>      generate the key on the specified file

  Options:
    -p            if the key file already exists, just extract the key and
                  print to stdout (but don't generate a new one)
    -c <cmd_str>  prepend a forced command to the key
    -a            output the line with the syntax ready to be piped to
                  public-key-vhost stdin

    -C comment    a comment string to append to the key
    -h            displays the usage msg
"
  exit 1
}

# main
getopt_flags='ahpc:C:'
unset target_file print_existing format_add_stdin forced_command comment_str
while getopts $getopt_flags OPTF; do
  case $OPTF in
    h)
      usage
      ;;
    p)
      print_existing=1
      ;;
    c)
      forced_command="$OPTARG"
      ;;
    a)
      format_add_stdin=1
      ;;
    C)
      comment_str="$OPTARG"
      ;;
    *)
      usage
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

[ -z "$1" ] && usage
target_file="$1"

self_bin=$(readlink -e "$0")
self_dir=$(dirname "$self_bin")
sys_dir=$(readlink -e "$self_dir/..")

if [ -e "$target_file" -a -z "$print_existing" ]; then
  echo "Error: file '$target_file' already exists" 1>&2
  exit 1
elif [ -e "$target_file" -a -n "$print_existing" ]; then
  key_str=`ssh-keygen -f "$target_file" -y`
  if [ $? -ne 0 ]; then
    echo "Error: unable to extract public key from file '$target_file'" 1>&2
    exit 1
  fi
else # key doesn't exist, try to generate it
  target_dir=`dirname "$target_file"`
  if [ ! -e "$target_dir" ] && ! mkdir -m 700 "$target_dir"; then
    echo "Error: could not create target dir '$target_dir'" 1>&2
    exit 1
  fi

  ssh-keygen -b 4096 -f "$target_file" -P '' -C "$comment_str" &>/dev/null
  if [ $? -ne 0 ]; then
    echo "Error: unable to generate key file" 1>&2
    exit 1
  fi

  key_str=`cat "$target_file.pub"`
  if [ $? -ne 0 -o -z "$key_str" ]; then
    echo #
    echo "Error: unable to retrieve key contents" 1>&2
    exit 1
  fi
fi

if [ -n "$format_add_stdin" ]; then
  echo -n "+:"
fi

if [ -n "$forced_command" ]; then
  cmd_tmpl='command="%q",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty'
  cmd_line=`printf $cmd_tmpl "$forced_command"`
  cmd_line=${cmd_line//@system_dir@/$sys_dir}
  echo -n "$cmd_line"' '
fi

echo "$key_str"
