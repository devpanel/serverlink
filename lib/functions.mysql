#!/bin/bash

mysql_database_exists() {
  local db="$1"

  if mysql -B -D "$db" -e "SHOW TABLES" &>/dev/null; then
    return 0
  else
    return $?
  fi
}

mysql_rename_database() {
  local old_name="$1"
  local new_name="$2"
  local sql_l
  local sql_rename

  sql_l="SELECT CONCAT('RENAME TABLE ',table_schema,'.',table_name,"
  sql_l+=" ' TO ','$new_name.',table_name,';') FROM information_schema.TABLES"
  sql_l+=" WHERE table_schema LIKE '$old_name';"
          

  if sql_rename=$(mysql -B -N -e "$sql_l" ); then
    if [ -n "$sql_rename" ]; then
      echo "$sql_rename" | mysql -B -D "$new_name"
      return $?
    else
      # ok, no tables (empty db)
      return 0
    fi
  else
    echo "$FUNCNAME(): failed to rename '$old_name' to '$new_name'" 1>&2
    return 1
  fi

}

mysql_import_databases_from_dir() {
  local file database opt safer_overwrite tmp_db import_name
  local file_type
  local db_regex='^[A-Za-z0-9_-]+$'

  while [ -n "$1" -a "${1:0:1}" == - ]; do
    opt="$1"
    case "$opt" in
      --safer-overwrite)
        safer_overwrite=1
        shift
        ;;
      *)
        echo "$FUNCNAME(): unknown option '$opt'" 1>&2
        return 1
        ;;
    esac
  done

  local dir="$1"

  if [ ! -d "$dir" ]; then
    echo "$FUNCNAME(): path '$dir' is not a directory" 1>&2
    return 1
  elif [ ! -r "$dir" ]; then
    echo "$FUNCNAME(): path '$dir' is not readable" 1>&2
    return 1
  fi

  for file in "$dir"/*.sql "$dir"/*.sql.gz; do
    [ ! -f "$file" ] && continue

    if [[ "$file" == *.sql ]]; then
      database=${file%.*}
      database=${database##*/}
      file_type=sql
    elif [[ "$file" == *.sql.gz ]]; then
      database=${file%.*.*}
      database=${database##*/}
      file_type=sql_gz
    fi

    [[ ! "$database" =~ $db_regex ]] && continue

    if mysql_database_exists "$database"; then
      if [ -n "$safer_overwrite" ]; then
        random_str="${BASH_PID}${RANDOM}${RANDOM}"
        tmp_db="${database}_$random_str"
        import_name="$tmp_db"

        if ! mysql -B -e "CREATE DATABASE \`$tmp_db\`"; then
          echo "$FUNCNAME(): failed to create tmp database '$tmp_db',"
                 "skipping importing database '$database'..." 1>&2
          continue
        fi
      else
        import_name="$database"
        if ! mysql -B -e "DROP   DATABASE \`$database\`"; then
          echo "$FUNCNAME(): failed to drop database '$database', skipping..." 1>&2
          continue
        fi

        if ! mysql -B -e "CREATE DATABASE \`$database\`"; then
          echo "$FUNCNAME(): failed to re-create database '$database', skipping..." 1>&2
          continue
        fi
      fi
    else
      import_name="$database"

      if ! mysql -B -e "CREATE DATABASE \`$import_name\`"; then
        echo "$FUNCNAME(): failed to re-create database '$import_name', skipping..." 1>&2
        continue
      fi
    fi

    [ "$import_name" == "$database" ] && \
      echo "Importing database $database..."

    case $file_type in
      sql)
        if ! mysql -B -D "$import_name" < $file; then
          echo "$FUNCNAME(): failed to import database '$database'" 1>&2
          continue
        fi
        ;;

      sql_gz)
        if ! zcat $file | mysql -B -D "$import_name"; then
          echo "$FUNCNAME(): failed to import database '$database'" 1>&2
          continue
        fi
        ;;
    esac

    # if the import name is not equal to the import database, rename the
    # temporary database to the new name
    if [ -n "$safer_overwrite" -a "$database" != "$import_name" ]; then
      if mysql_database_exists "$database" 2>/dev/null; then
        echo "Dropping old database '$database'..."
        mysql -B -e "DROP DATABASE \`$database\`;"
      fi

      echo "Re-creating database '$database'..."
      mysql -B -e "CREATE DATABASE \`$database\`;"

      echo "Importing backup data into '$database'..."
      if mysql_rename_database "$import_name" "$database"; then
        mysql -B -e "DROP DATABASE \`$import_name\`;"
      else
        echo "$FUNCNAME(): failed renaming tmp database." \
               "Skipping import of '$database..." 1>&2
        continue
      fi
    fi
  done

  return 0
}

