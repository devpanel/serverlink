#!/bin/bash

set_usage_msg \
  "Usage: $bin_name ${cmd_ar[*]} <--vhost name> [opts]

  Options:
    --vhost name              name of the new vhost
    --domain domain.tld       add the specified domain (can be used more than
                              once to add more than one domain)

    --subsystem name          name of the app subsystem (e.g. drupal,
                              wordpress, etc)

    --dedicated-mysql         create a new dedicated MySQL instance

    --skip-mysql              don't do any MySQL configuration for this vhost

    --mysql-instance name     the name of the mysql instance to use
    --mysql-dbs               name of the mysql databases to create
    --db-name name            the name of the main database of the app

    --php-version <version>   the PHP version to use on this vhost (e.g.: 5, 7)

    --dont-activate-now       don't activate the vhost now (i.e. don't
                              reload Apache now). The normal behavior, when
                              this option is not passed, is to activate the
                              Apache vhost.

    --description text        optional description text for the vhost


  Creates a new LAMP vhost.
"

devpanel_cmd__create_lamp_vhost() {
  [ $# -eq 0 -o -z "$1" ] && usage

  local activate_now=yes
  local name vhost subsystem php_version description
  local dedicated_mysql with_mysql=yes
  local mysql_instance mysql_pw mysql_db_name create_mysql_instance
  local db_name db_prefix db_suffix
  local -a domains_ar apache_args_ar opts_ar

  while [ -n "$1" ]; do
    name="$1"
    case "$name" in
      --help)
        usage
        ;;

      --)
        shift
        break
        ;;

      --domain)
        [ -z "$2" ] && { error_missing_value "$name" ; return $?; }
        domains_ar+=( "$2" )
        apache_args_ar+=( --domain "$2" )
        shift 2
        ;;

      --vhost)
        [ -z "$2" ] && { error_missing_value "$name" ; return $?; }
        vhost="$2"
        shift 2
        ;;

      --dedicated-mysql)
        dedicated_mysql=yes
        if ! is_var_set_to_yes with_mysql; then
          error "conflicting mysql options on command line" -
          return $?
        fi

        shift
        ;;

      --skip-mysql)
        if [ -n "$dedicated_mysql" ]; then
          error "can't use $name with --dedicated-mysql at the same time" -
          return $?
        elif [ -n "$mysql_instance" ]; then
          error "can't use $name with --mysql-instance at the same time" -
          return $?
        fi

        unset with_mysql
        shift
        ;;

      --subsystem)
        [ -z "$2" ] && { error_missing_value "$name" ; return $?; }
        if is_known_seedapp_subsystem "$2"; then
          subsystem="$2"
        else
          error "unknown subsystem" -
          return 1
        fi

        shift 2
        ;;

      --db-name)
        [ -z "$2" ] && { error_missing_value "$name" ; return $?; }
        db_name="$2"
        shift 2
        ;;

      --dont-activate-now)
        unset activate_now
        shift
        ;;

      --php-version)
        [ -z "$2" ] && { error_missing_value "$name" ; return $?; }
        php_version="$2"
        shift 2
        ;;

      --description)
        [ -z "$2" ] && { error_missing_value "$name" ; return $?; }
        description="${2//$'\n'/ \\n }"
        shift 2
        ;;

      --mysql-instance)
        [ -z "$2" ] && { error_missing_value "$name" ; return $?; }
        if ! is_var_set_to_yes with_mysql; then
          error "conflicting mysql options on command line" -
          return $?
        fi

        mysql_instance="$2"
        shift 2
        ;;

      *)
        error "unknown option '$name'"
        ;;
    esac
  done

  [ -z "$vhost" ] && usage

  if vhost_exists "$vhost"; then
    error "vhost already exists." -
    return $?
  fi

  if mysql_instance_exists "$vhost"; then
    # NOTE: technically it'd be possible to have an instance and a vhost
    #       with the same name. But to avoid any confusion we don't
    #       allow it.
    error "there's already a mysql instance with name '$vhost'" -
    return $?
  fi

  if [ -n "$mysql_instance" ]; then
    mysql_is_valid_instance_name "$mysql_instance" || return $?
  fi

  if is_var_set_to_yes with_mysql; then
    if [ -n "$mysql_instance" -a -z "$dedicated_mysql" ]; then
      if ! mysql_instance_exists "$mysql_instance"; then
        error "there's no MySQL instance named '$mysql_instance'" -
        return $?
      fi

      load_mysql_instance_config "$mysql_instance" || return $?

      if ! is_var_set_to_yes mysql__params__shared; then
        error "the specified mysql instance is not set as shared. So can't use it." -
        return $?
      fi
    elif [ -n "$mysql_instance" -a -n "$dedicated_mysql" ]; then
      if mysql_instance_exists "$mysql_instance"; then
        load_mysql_instance_config "$mysql_instance" || return $?

        if is_var_set_to_yes mysql__params__shared; then
          # mysql instance is shared
          error "can't use this mysql instance because it's shared" -
          return $?
        else
          if [ -n "$mysql__params__vhosts" ]; then
            # mysql instance is not shared, but there's already a vhost
            error "this mysql instance is already being used by another vhost." -
            return $?
          fi
        fi
      else
        # mysql instance doesn't exist, and a name was specified for it
        create_mysql_instance=yes
      fi
    elif [ -z "$mysql_instance" -a -n "$dedicated_mysql" ]; then
      create_mysql_instance=yes
      mysql_instance="$vhost"
    elif [ -z "$mysql_instance" -a -z "$dedicated_mysql" ]; then
      if [ -n "$lamp__mysql__default_instance" ]; then
        # no mysql was specified, but there's a system default:
        #   use the default mysql instance
        mysql_instance="$lamp__mysql__default_instance"
      else
        # backwards compatible behavior: create a new mysql instance when
        # there isn't a default mysql instance in the configuration
        #
        # Each mysql instance generally requires hundreds of MB of memory
        # allocation, what significantly limits the number of vhosts on a
        # server. This is why we reverted this default.
        create_mysql_instance=yes
        mysql_instance="$vhost"
      fi
    else
      error "unknown condition for determining mysql instance." -
      return $?
    fi
  fi # // with_mysql sanity checks

  # NOTE: the apache vhost needs to be created before the dedicated mysql
  #       instance because it needs to check/create the vhost user and the
  #       linux user of the mysql database is based on username of the
  #       apache vhost
  #
  if ! apache_vhost_create "${apache_args_ar[@]}" "$vhost"; then
    error "unable to create apache vhost" -
    return $?
  fi

  if is_var_set_to_yes with_mysql; then
    if is_var_set_to_yes create_mysql_instance; then
      # create a new dedicated mysql instance
      if mysql_create_instance_for_vhost "$vhost"; then
        load_mysql_instance_config "$vhost"
      else
        error "unable to create mysql instance" -
        return $?
      fi
    else
      # use an existing mysql instance, just setup the credentials
      mysql_pw=$(gen_random_str_az09_lower 12)
      db_prefix="${vhost//-/_}__"
      if [ -n "$db_name" ]; then
        mysql_db_name="${db_prefix}${db_name}"
      elif [ -n "$subsystem" ]; then
        mysql_db_name="${db_prefix}${subsystem}"
      fi
      
      mysql_create_unpriv_user_for_vhost --user "$v__vhost__linux_user" \
        --instance "$mysql_instance" --password "$mysql_pw"             \
        --vhost "$vhost" --write-my-cnf --db-prefix "$db_prefix"

      opts_ar+=( "mysql.external = yes" )
      opts_ar+=( "mysql.database_prefix = $db_prefix" )

      save_opts_in_mysql_instance "$mysql_instance" \
        "params.vhosts +=w $vhost"

      load_mysql_instance_config "$mysql_instance"
    fi

    opts_ar+=( "mysql.instance      = $mysql_instance" )

    if [ -n "$db_name" ]; then
      if [ -n "$db_prefix" ]; then
        mysql_db_name="${db_prefix}${db_name}"
      else
        mysql_db_name="$db_name"
      fi
    else
      if [ -n "$subsystem" ]; then
        if [ -n "$db_prefix" ]; then
          mysql_db_name="${db_prefix}${subsystem}"
        else
          mysql_db_name="${subsystem}"
        fi
      fi
    fi

    if [ -n "$mysql_db_name" ]; then
      opts_ar+=( "app.database_name   = $mysql_db_name"  )
    fi

    if is_webenabled_backwards_compat_enabled ; then
      # backwards compatibility with Webenabled v1
      # print line so that the dashboard gets the mysql information
      printf "started: user=%s type=mysql host=127.0.0.1:%s status=0\n" \
        "$mysql__params__linux_user" "$mysql__params__port"
    fi
  fi # // with_mysql

  if [ -n "$subsystem" ]; then
    opts_ar+=( "app.subsystem       = $subsystem"     )
  fi

  if [ -n "$description" ]; then
    opts_ar+=( "vhost.description = $description" )
  fi

  # save all options on config file
  if ! save_opts_in_vhost_config "$vhost" "${opts_ar[@]}"; then
    echo "$FUNCNAME(): failed to save config for '$vhost'"
    return 1
  fi

  if [ -n "$php_version" ]; then
    devpanel_run set php version --vhost "$vhost" --version "$php_version"
  fi
 
  if [ -n "$activate_now" ]; then 
    if ! rewrite_vhost_apache_config "$vhost"; then
      echo 1>&2
      echo "Warning: vhost created, but failed to activate it" 1>&2
      [ -t 0 ] && sleep 2
    fi
  fi

  echo
  echo "Successfully created LAMP vhost '$vhost'"
}
