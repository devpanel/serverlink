#!/bin/bash

set_usage_msg \
  "Usage: $bin_name $action <--instance name>

  Options:
    --instance <name>         name of the instance
    --generate                automatically generate a new password

  Change password for the root user on MySQL.
"

devpanel_cmd__change_mysql_root_password() {
  local opt instance sql_query generate ini_file mysql_user=root
  local new_password new_password_esc
  local -a info_ar=()
  
  [ $# -eq 0 -o -z "$1" ] && usage

  while [ -n "$1" ]; do
    opt="$1"

    case $opt in
      --instance)
        [ -z "$2" ] && error_missing_value $opt
        instance="$2"
        shift 2
        ;;

      --generate)
        generate=yes
        shift 1
        ;;

      --help)
        usage
        ;;

      --)
        shift
        break
        ;;

      *)
        error "unknown option: $opt" -
        return $?
        ;;
    esac
  done

  [ -z "$instance" ] && usage

  if ! mysql_instance_exists "$instance"; then
    error "there's no instance with this name" -
    return $?
  fi

  load_mysql_instance_config "$instance" || return $?

  mysql_ping_instance "$instance" >/dev/null || return $?

  if [ "$generate" == yes ] ; then
    new_password=$(gen_random_str_az09_lower 15)
  else
    if ! read -s -p "Enter password (stdin): " new_password; then
      error "ended without changing password" -
      return $?
    fi
    echo ; echo
  fi

  if [ -z "$new_password" ]; then
    error "got an empty password" -
    return $?
  fi

  mysql_change_user_password --instance "$instance" --user "$mysql_user" \
    --host localhost --password "$new_password"
  if [ $? -eq 0 ]; then
    if [[ "$new_password" =~ [^a-z0-9A-Z_,.-] ]]; then
      new_password_esc=$(escape_quotes "$new_password" )
    else
      new_password_esc="$new_password"
    fi

    write_ini_file "$mysql__root_client_cnf" "client.password = '$new_password_esc'"
    echo "Successfully changed user password."
  else
    error "failed to change user password" -
    return $?
  fi

}
