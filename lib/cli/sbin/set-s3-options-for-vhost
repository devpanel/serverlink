#!/bin/bash

set_usage_msg \
  "Usage: $bin_name ${cmd_ar[*]} <--vhost name> <opts>

  Required Options:
    --vhost <name>                  name of the vhost


  Optional Options:

    --upload-enabled yes/no         enable/disable automated uploads to S3

    --bucket <name>                 name of the bucket

    --server <name>                 name of the server profile to use

    --upload-path <path>            relative path on S3 bucket where to upload
                                    the files (default: $conf__s3__upload_path)

    --delete-after-upload yes/no    whether local files should be deleted
                                    after a successful upload or not
                                    (default: no)

    --remove-all-opts               remove from config files all S3 options
                                    previously saved (this option can't be used
                                    with other options in the same command line)

  Sets options for S3 integration specifically for a vhost.
"

devpanel_cmd__set_s3_options_for_vhost() {
  [ $# -eq 0 -o -z "$1" ] && usage

  local vhost server bucket upload_path
  local delete_after_upload upload_enabled remove_all
  local var
  local -a cmd_args=()

  while [ -n "$1" ]; do
    name="$1"
    case "$name" in
      --vhost)
        [ -z "$2" ] && error_missing_value "$name"
        vhost="$2"
        shift 2
        ;;

      --upload-enabled)
        [ -z "$2" ] && error_missing_value "$name"
        if [ "${2,,}" != yes -a "${2,,}" != no ]; then
          error "invalid value for $name option. Must be yes/no." -
          return 1
        fi
        upload_enabled="${2,,}"
        shift 2
        ;;

      --server)
        [ -z "$2" ] && error_missing_value "$name"
        server="$2"
        shift 2
        ;;

      --bucket)
        [ -z "$2" ] && error_missing_value "$name"
        bucket="$2"
        shift 2
        ;;

      --upload-path)
        [ -z "$2" ] && error_missing_value "$name"
        upload_path="$2"
        shift 2
        ;;

      --delete-after-upload)
        [ -z "$2" ] && error_missing_value "$name"
        if [ "$2" != yes -a "$2" != no ]; then
          error "invalid value for --delete-after-upload option. Must be yes/no." -
          return 1
        fi
        delete_after_upload="$2"
        shift 2
        ;;

      --remove-all-opts)
        remove_all=yes
        shift
        ;;

      --help)
        usage
        ;;

      --)
        shift
        break
        ;;

      *)
        error "unknown option $name"
        ;;
    esac
  done

  [ -z "$vhost" ] && usage

  load_vhost_config "$vhost" || return $?

  local st
  local -a opts_ar=()
  for var in  upload_enabled server bucket upload_path delete_after_upload; do
    if [ -n "${!var}" ]; then
      opts_ar+=( "s3.$var = ${!var}" )
    fi
  done

  if is_var_set_to_yes remove_all; then
    if [ ${#opts_ar} -gt 0 ]; then
      error "option --remove-all-opts can't be used along with other options" -
      return $?
    fi

    save_opts_in_vhost_config "$vhost" "- s3"
    return $?
  else
    if [ ${#opts_ar} -eq 0 ]; then
      error "no change specified." -
      return $?
    fi
  fi

  save_opts_in_vhost_config "$vhost" "${opts_ar[@]}"
  st=$?

  if [ $st -eq 0 ]; then
    echo "Successfully saved S3 options for vhost '$vhost'."
  else
    error "failed to save s3 options" -
    return $?
  fi

}
