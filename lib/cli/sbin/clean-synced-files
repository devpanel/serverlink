#!/bin/bash

set_usage_msg \
  "Usage: $bin_name ${cmd_ar[*]} <--vhost name>

  Options:
    --vhost name        name of the vhost

  Removes local files that are already synced to S3.
"

devpanel_cmd__clean_synced_files() {
  [ $# -eq 0 -o -z "$1" ] && usage

  local tmp_dir local_files_txt remote_files_txt
  local vhost vhost_archives_dir
  local -a cmd_args=()

  while [ -n "$1" ]; do
    name="$1"
    case "$name" in
      --vhost)
        [ -z "$2" ] && error_missing_value "$name"
        vhost="$2"
        shift 2
        ;;

      --help)
        usage
        ;;

      --)
        shift
        break
        ;;

      *)
        break
        ;;
    esac
  done

  if ! hash s3cmd &>/dev/null; then
    error "command s3cmd is not installed." -
    return $?
  fi

  [ -z "$vhost" ] && usage

  if [ -z "$conf__s3__bucket_name" ]; then
    error "S3 integration is not configured" -
    return $?
  fi

  if ! vhost_exists_and_is_enabled "$vhost"; then
    return 1
  fi

  tmp_dir=$(mktemp -d ) || return $?
  temp_dirs_ar+=( "$tmp_dir" )

  s3_base_url=$(get_s3_url_base_for_vhost "$vhost" ) || return $?

  vhost_archives_dir=$(get_vhost_archives_dir "$vhost" ) || return $?

  if [ ! -d "$vhost_archives_dir" ]; then
    [ -t 0 ] && \
      echo "Warning: dir '$vhost_archives_dir' doesn't exist for vhost $vhost" 1>&2
    return 0
  fi

  # get the list of local md5 files
  local local_files_txt_raw local_files_txt local_md5_list_txt
  local_files_txt_raw="$tmp_dir/local-files-raw.txt"
  local_files_txt="$tmp_dir/local-files.txt"
  local_md5_list_txt="$tmp_dir/local-md5-list.txt"
  find "$vhost_archives_dir" -type f -iname \*.md5 -print 2>/dev/null \
    >$local_files_txt_raw

  if [ $? -ne 0 ]; then
    error "unable to get the list of local files" -
    return 1
  fi

  if [ ! -s "$local_files_txt_raw" ]; then
    [ -t 0 ] && echo "Warning: no local md5 files found..." 1>&2
    return 0
  fi

  local file lmd5_file lsha1_file lreal_file lmd5_str lfile_rel_path r_path
  while read lmd5_file; do
    lreal_file=${lmd5_file%.md5}
    if [ ! -f "$lreal_file" ]; then
      continue
    fi

    read lmd5_str < $lmd5_file || continue

    lfile_rel_path=${lreal_file#$vhost_archives_dir/}

    echo "$lmd5_str $lfile_rel_path" >>$local_files_txt
  done < $local_files_txt_raw

  if [ ! -s "$local_files_txt" ]; then
    [ -t 0 ] && echo "Warning: no local files found..." 1>&2
    return 0
  fi

  # sort the list
  sort $local_files_txt >$local_md5_list_txt

  # get the list of all files on S3
  local remote_files_txt remote_files_txt_raw remote_md5_list_txt
  remote_files_txt_raw="$tmp_dir/remote-files-raw.txt"
  remote_files_txt="$tmp_dir/remote-files.txt"
  remote_md5_list_unsorted_txt="$tmp_dir/remote-md5-list-unsorted.txt"
  remote_md5_list_txt="$tmp_dir/remote-md5-list-sorted.txt"

  devpanel_run s3 ls -l -r "$s3_base_url" >$remote_files_txt_raw
  if [ $? -ne 0 ]; then
    error "unable to get the list of remote files" -
    return 1
  fi

  if [ ! -s "$remote_files_txt_raw" ]; then
    # no remote files, nothing to be done
    [ -t 0 ] && echo "Warning: no remote files found..." 1>&2
    return 0
  fi

  # sort the list
  tr -s ' ' < $remote_files_txt_raw | cut -d' ' -f 4,6 >$remote_files_txt

  local rmd5_str rfile_path
  while read rmd5_str rfile_path ; do
    lfile_rel_path=${rfile_path#$s3_base_url}
    lreal_file="$vhost_archives_dir/$lfile_rel_path"
    lmd5_file="$lreal_file.md5"

    if [ ! -f "$lmd5_file" ]; then
      # no corresponding local .md5 file, skip it
      continue
    fi

    echo "$rmd5_str $lfile_rel_path"  >>$remote_md5_list_unsorted_txt
  done < $remote_files_txt

  if [ -f "$remote_md5_list_unsorted_txt" ]; then
    sort "$remote_md5_list_unsorted_txt" >$remote_md5_list_txt
  else
    # no remote files with corresponding .md5 files
    return 0
  fi

  # compare the lists and extract all files in common
  local lines_in_common_txt="$tmp_dir/lines-in-common.txt"
  local files_in_common_txt="$tmp_dir/files-in-common.txt"
  comm -1 -2 "$local_md5_list_txt" "$remote_md5_list_txt" \
    >"$lines_in_common_txt"

  if [ ! -s "$lines_in_common_txt" ]; then
    # no files in common, nothing to be done
    [ -t 0 ] && echo "Warning: no files in common found..." 1>&2
    return 0
  fi

  cut -d ' ' -f 2- < $lines_in_common_txt >$files_in_common_txt

  # remove all files in common
  local l_file
  while read l_file ; do
    l_file="$vhost_archives_dir/$l_file"
    lmd5_file="$l_file.md5"
    lsha1_file="$l_file.sha1"

    for file in "$l_file" "$lmd5_file" "$lsha1_file"; do
      rm -f "$file"
    done
  done < "$files_in_common_txt"
}
