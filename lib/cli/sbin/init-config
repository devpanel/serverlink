#!/bin/bash

set_usage_msg \
  "Usage: $bin_name ${cmd_ar[*]} [opts] --hostname <hostname>

  Options:
    --hostname <name>               the base hostname for virtualhosts

    --gen-hostname-from-ip          generate a base hostname from the IP address
                                    of the default network interface

    --virtualbox-net-workaround     try to find an IP of an interface that is
                                    not the NAT one

    --no-update                     don't try to update devPanel software now

  Initializes the basic config of a devPanel installation.
"

# auxiliary functions for generating the hostname
b10_to_base36() {
  # from https://en.wikipedia.org/wiki/Base36
  local value=$1
  local result=""
  local base36="0123456789abcdefghijklmnopqrstuvwxyz"

  while true; do
    result=${base36:((value%36)):1}${result}
    if [ $((value=${value}/36)) -eq 0 ]; then
      break
    fi
  done

  echo ${result}
}

ipv4_to_b10() {
  local ipv4_addr="$1"
  local -i n10
  local n1 n2 n3 n4

  IFS="." read n1 n2 n3 n4 <<< "$ipv4_addr"
  n10=$(( ($n1 * (256**3) ) + ($n2 * (256**2) ) + ($n3 * 256) + $n4 ))

  echo $n10
}

ipv4_to_b36() {
  local ipv4_addr="$1"
  local -i n10

  n10=$(ipv4_to_b10 "$ipv4_addr")
  b10_to_base36 $n10
}

ipv4_to_b36_reverse() {
  local ipv4_addr="$1"
  local n1 n2 n3 n4

  IFS=. read n4 n3 n2 n1 <<< "$ipv4_addr"
  ipv4_to_b36 "$n1.$n2.$n3.$n4"
}

ipv4_to_hostname() {
  local ipv4_addr="$1"
  local domain="$2"
  local sub

  sub=$(ipv4_to_b36_reverse "$ipv4_addr")
  echo "$sub.$domain"
}

gen_hostname_for_ipv4() {
  local ipv4_addr="$1"
  local domain="$2"

  ipv4_to_hostname "$ipv4_addr" "$domain"
}

get_ipv4_for_interface_up() {
  local interface="$1"
  local ipv4_regex='[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'

  local inet_line=$(ip addr show dev "$interface" scope global up \
                    | egrep -m 1 -o "^[[:space:]]*inet $ipv4_regex")

  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to get IPv4 for interface $interface" 1>&2
    return 1
  fi

  local ipv4=${inet_line##* }
  printf '%s' "$ipv4"
}

get_interface_default_route() {
  local line=$(route -n | egrep -m 1 ^0.0.0.0)
  if [ $? -ne 0 -o -z "$line" ]; then
    echo "$FUNCNAME(): unable to get interface of default route" 1>&2
    return 1
  fi

  local interface=${line##* }
  printf '%s' "$interface"
}

get_my_default_ipv4() {
  local interface=$(get_interface_default_route)
  local st=$?
  [ $st -ne 0 ] && return $st

  local ipv4=$(get_ipv4_for_interface_up "$interface")
  st=$?
  [ $st -ne 0 ] && return $st

  printf '%s' "$ipv4"
}

get_net_interfaces() {
  local -i n_intf=0

  while read line; do
    [[ ! "$line" == *:\ *  ]] && continue
    read intf_name remaining <<< "$line"
    intf_name=${intf_name%:}

    n_intf+=1
    echo "$intf_name"
  done < /proc/net/dev

  if [ $n_intf -gt 0 ]; then
    # success when found more than 0 interfaces
    return 0
  else
    return 1
  fi
}

find_non_local_virtualbox_ipv4() {
  local _intf ipv4
  
  for _intf in $(get_net_interfaces); do
    [ "$_intf" == lo ] && continue

    if ipv4=$(get_ipv4_for_interface_up "$_intf"); then
      if [ "$ipv4" != "10.0.2.15" ]; then
        echo "$ipv4"
        return 0
      fi
    fi
  done

  return 1
}

# // hostname functions

devpanel_cmd__init_config() {
  [ $# -eq 0 -o -z "$1" ] && usage

  local arg hostname ipv4 domain vagrant_net_workaround auto_gen_hostname
  local do_update=1

  while [ -n "$1" ]; do
    arg="$1"
    case "$arg" in
      --gen-hostname-from-ip)
        auto_gen_hostname=1
        shift
      ;;

      --hostname)
        [ -z "$2" ] && error_missing_value hostname
        hostname="$2"
        shift 2
        ;;

      --virtualbox-net-workaround)
        auto_gen_hostname=1
        virtualbox_net_workaround=1
        shift
        ;;

      --no-update)
        unset do_update
        shift
        ;;

      --help)
        usage
        ;;
      --[A-Za-z0-9_-]*)
        error "unknown option $arg"
        ;;
      *)
        usage
        ;;
    esac
  done

  if [ -n "$auto_gen_hostname" -a -n "$hostname" ]; then
    error "received conflicting parameters about hostname generation." - && \
      return 1
  fi

  if [ -n "$virtualbox_net_workaround" ]; then
    ipv4=$(find_non_local_virtualbox_ipv4)
    if [ $? -ne 0 ]; then
      error "unable to find an IP to use in hostname generation" - && \
        return 1
    fi
  fi

  if [ -n "$auto_gen_hostname" ]; then
    assign_deref_os_prop_or_exit domain "$sys_dir" auto_gen_domain
    [ -z "$ipv4" ] && ipv4=$(get_my_default_ipv4)
    hostname=$(gen_hostname_for_ipv4 "$ipv4" "$domain")
    echo "Setting base hostname to '$hostname' based on IP '$ipv4'."
  else
    [ -z "$hostname" ] && usage
  fi


  if [ -n "$do_update" ]; then
    devpanel_run update
  fi

  devpanel_run set base hostname --name "$hostname"
}
