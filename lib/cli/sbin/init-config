#!/bin/bash

set_usage_msg \
  "Usage: $bin_name ${cmd_ar[*]} [opts] --hostname <hostname>

  Options:
    --hostname <name>               the base hostname for virtualhosts

    --gen-hostname-from-ip          generate a base hostname from the IP address
                                    of the default network interface

    --hostname-from-external-ip     if generating the hostname from IP,
                                    detect the external IP of this server
                                    (useful when wanting to use external IP
                                     but the server has only private IPs
                                     assigned, as on AWS EC2, for example)

    --virtualbox-net-workaround     try to find an IP of an interface that is
                                    not the NAT one

    --conditionally-gen-hostname    only generate hostname if it's not set yet
                                    (skips hostname generation even if the
                                     options above are present)

    --update                        update devPanel software before doing
                                    the initializations

    --show-intro                    show text with introductory guidance

  Initializes the basic config of a devPanel installation.
"

# auxiliary functions for generating the hostname
b10_to_base36() {
  # from https://en.wikipedia.org/wiki/Base36
  local value=$1
  local result=""
  local base36="0123456789abcdefghijklmnopqrstuvwxyz"

  while true; do
    result=${base36:((value%36)):1}${result}
    if [ $((value=${value}/36)) -eq 0 ]; then
      break
    fi
  done

  echo ${result}
}

ipv4_to_b10() {
  local ipv4_addr="$1"
  local -i n10
  local n1 n2 n3 n4

  IFS="." read n1 n2 n3 n4 <<< "$ipv4_addr"
  n10=$(( ($n1 * (256**3) ) + ($n2 * (256**2) ) + ($n3 * 256) + $n4 ))

  echo $n10
}

ipv4_to_b36() {
  local ipv4_addr="$1"
  local -i n10

  n10=$(ipv4_to_b10 "$ipv4_addr")
  b10_to_base36 $n10
}

ipv4_to_b36_reverse() {
  local ipv4_addr="$1"
  local n1 n2 n3 n4

  IFS=. read n4 n3 n2 n1 <<< "$ipv4_addr"
  ipv4_to_b36 "$n1.$n2.$n3.$n4"
}

ipv4_to_hostname() {
  local ipv4_addr="$1"
  local domain="$2"
  local sub

  sub=$(ipv4_to_b36_reverse "$ipv4_addr")
  echo "$sub.$domain"
}

gen_hostname_for_ipv4() {
  local ipv4_addr="$1"
  local domain="$2"

  ipv4_to_hostname "$ipv4_addr" "$domain"
}

get_ipv4_for_interface_up() {
  local interface="$1"
  local ipv4_regex='[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'

  local inet_line=$(ip addr show dev "$interface" scope global up \
                    | egrep -m 1 -o "^[[:space:]]*inet $ipv4_regex")

  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to get IPv4 for interface $interface" 1>&2
    return 1
  fi

  local ipv4=${inet_line##* }
  printf '%s' "$ipv4"
}

get_interface_default_route() {
  local line=$(route -n | egrep -m 1 ^0.0.0.0)
  if [ $? -ne 0 -o -z "$line" ]; then
    echo "$FUNCNAME(): unable to get interface of default route" 1>&2
    return 1
  fi

  local interface=${line##* }
  printf '%s' "$interface"
}

get_my_default_ipv4() {
  local interface=$(get_interface_default_route)
  local st=$?
  [ $st -ne 0 ] && return $st

  local ipv4=$(get_ipv4_for_interface_up "$interface")
  st=$?
  [ $st -ne 0 ] && return $st

  printf '%s' "$ipv4"
}

get_net_interfaces() {
  local -i n_intf=0

  while read line; do
    [[ ! "$line" == *:\ *  ]] && continue
    read intf_name remaining <<< "$line"
    intf_name=${intf_name%:}

    n_intf+=1
    echo "$intf_name"
  done < /proc/net/dev

  if [ $n_intf -gt 0 ]; then
    # success when found more than 0 interfaces
    return 0
  else
    return 1
  fi
}

find_non_local_virtualbox_ipv4() {
  local _intf ipv4
  
  for _intf in $(get_net_interfaces); do
    [ "$_intf" == lo ] && continue

    if ipv4=$(get_ipv4_for_interface_up "$_intf"); then
      if [ "$ipv4" != "10.0.2.15" ]; then
        echo "$ipv4"
        return 0
      fi
    fi
  done

  return 1
}

detect_ipv4_with_opendns() {
  local ipv4

  if ! hash dig &>/dev/null; then
    return 1
  fi

  ipv4=$(dig +short @resolver1.opendns.com myip.opendns.com a 2>/dev/null)
  if [ $? -eq 0 -a -n "$ipv4" ] && 
     [[ "$ipv4" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "$ipv4"
    return 0
  else
    return 1
  fi
}

detect_ipv4_with_akamai() {
  local ipv4

  if ! hash curl &>/dev/null; then
    return 1
  fi

  ipv4=$(curl -s --connect-timeout 5 --retry 3  --retry-delay 3  http://whatismyip.akamai.com/ )
  if [ $? -eq 0 -a -n "$ipv4" ] && 
     [[ "$ipv4" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "$ipv4"
    return 0
  else
    return 1
  fi
}

detect_external_ipv4() {
  local ipv4

  if ipv4=$(detect_ipv4_with_opendns); then
    echo "$ipv4"
    return 0
  elif ipv4=$(detect_ipv4_with_akamai); then
    echo "$ipv4"
    return 0
  else
    echo "$FUNCNAME(): unable to detect external IPv4" 1>&2
    return 1
  fi
}

get_ipv4_from_aws() {
  local output
  local url='http://169.254.169.254/latest/meta-data/public-ipv4'

  output=$(curl -sSN --max-time 3 --connect-timeout 2 --retry 1 \
            --retry-delay 1 "$url" )
  if [ $? -eq 0 ] && [[ "$output" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}+\.[0-9]{1,3}$ ]]; then
    echo "$output"
    return 0
  else
    return 1
  fi
}

# // hostname functions

devpanel_cmd__init_config() {
  [ $# -eq 0 -o -z "$1" ] && usage

  local arg hostname ipv4 domain
  local auto_gen_hostname cond_gen_hostname ipv4_detect_type
  local show_intro st
  local do_update

  while [ -n "$1" ]; do
    arg="$1"
    case "$arg" in
      --gen-hostname-from-ip)
        auto_gen_hostname=1
        shift
        ;;

      --conditionally-gen-hostname)
        cond_gen_hostname=1
        shift
        ;;

      --hostname-from-external-ip)
        auto_gen_hostname=1
        ipv4_detect_type=external_ipv4
        shift
        ;;

      --hostname)
        [ -z "$2" ] && error_missing_value hostname
        hostname="$2"
        shift 2
        ;;

      --virtualbox-net-workaround)
        auto_gen_hostname=1
        ipv4_detect_type=local_ifaces_vbox_workaround
        shift
        ;;

      --no-update)
        # kept this option for backwards compatibility, not to break
        # possible use. Though not listing it in the usage msg.
        unset do_update
        shift
        ;;

      --update)
        do_update=1
        shift
        ;;

      --show-intro)
        show_intro=1
        shift
        ;;

      --help)
        usage
        ;;
      --[A-Za-z0-9_-]*)
        error "unknown option $arg"
        ;;
      *)
        usage
        ;;
    esac
  done

  if [ -n "$cond_gen_hostname" -a -n "$lamp__apache_vhosts__virtwww_domain" ]; then
    # if --conditionally-gen-hostname was passed and the server hostname is
    # already set, then skip hostname generation
    unset auto_gen_hostname
  fi

  if [ -n "$auto_gen_hostname" ]; then
    if [ -n "$hostname" ]; then
      error "received conflicting parameters about hostname generation." -
      return 1
    fi

    if [ -n "$lamp__apache_vhosts__auto_gen_domain" ]; then
      domain="$lamp__apache_vhosts__auto_gen_domain"
    else
      error "unable to get domain of autogenerated hostnames" -
      return $?
    fi

    if [ -z "$ipv4_detect_type" ]; then
      if am_i_on_virtualbox; then
        if find_non_local_virtualbox_ipv4 &>/dev/null; then
          ipv4_detect_type=local_ifaces_vbox_workaround
        else
          ipv4_detect_type=default_route
        fi
      elif am_i_on_digital_ocean; then
        ipv4_detect_type=default_route
      elif am_i_on_aws ; then
        ipv4_detect_type=aws_ipv4
      else
        ipv4_detect_type=default_route
      fi
    fi

    case $ipv4_detect_type in
      external_ipv4)
        # detect and use the external IP
        ipv4=$(detect_external_ipv4)
        ;;

      local_ifaces_vbox_workaround)
        # detect and use VirtualBox non-NAT IP
        ipv4=$(find_non_local_virtualbox_ipv4)
        ;;

      default_route)
        ipv4=$(get_my_default_ipv4)
        ;;

      aws_ipv4)
        ipv4=$(get_ipv4_from_aws )
        ;;

      *)
        error "unknown way of detecting IP address"
        ;;
    esac

    if [ -z "$ipv4" ]; then
      error "failed to detect IPv4 address to use on hostname"
    fi

    hostname=$(gen_hostname_for_ipv4 "$ipv4" "$domain")
    if [ $? -eq 0 ]; then
      echo "Setting base hostname to '$hostname' based on IP '$ipv4'."
    else
      error "failed to generate hostname from IPv4 '$ipv4'"
    fi
  fi # // auto_gen_hostname

  if [ -n "$hostname" -a "$hostname" != "$lamp__apache_vhosts__virtwww_domain" ]; then
    devpanel_run set base hostname --name "$hostname" || return $?
  fi

  if [ -n "$do_update" ]; then
    devpanel_run update || return $?
  fi

  save_opts_in_state "host.initialized = yes"

  if [ -n "$show_intro" ]; then
    devpanel_run help --section intro
  fi

  return 0
}
