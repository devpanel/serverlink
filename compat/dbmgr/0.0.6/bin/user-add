#!/usr/bin/perl -w

#
# Usage: user-add --user --type --version --datadir --ip --port --limits --contact --comment --interactive --all
#
use strict;
use FindBin;
use lib "$FindBin::Bin/../lib";

use dbMgr::Log;
use dbMgr::Config;
use POSIX 'setsid';
use Socket;
use Cwd 'abs_path';
use Getopt::Long;
use Dumpvalue;

my $interactive = 0;
my %options = ();
my $dbuser = "admin";
my $dbpasswd_stdin = 0;
my $dbpasswd = "";
my $dbadmin = 0;

# Sys::Syslog::setlogsock('unix');
my $log = new dbMgr::Log($FindBin::Script, 'pid,cons,nowait', 'user');	$log->debug("initializing");
my $bin_dir = "$FindBin::Bin/";					$log->debug("bin_dir = '%s'", $bin_dir);
my $etc_dir = abs_path("$bin_dir/../../config") . "/";		$log->debug("etc_dir = '%s'", $etc_dir);
my $config = new dbMgr::Config($etc_dir);			$log->debug("configuration files were parsed successfully");

sub help {
    print "\
Usage: " . $FindBin::Script . " [options]

Options:

--interactive|-i	Interactive mode (not implemented)
--user|-u		System account for database daemon
--type|-t		Database type
--host|-h		Database daemon host
--port|-p		Database daemon port
--db-user|-U		Database user to add (admin)
--db-password|-P	Database user password to set (random)
--db-password-stdin|-I	Read database user password from stdin
--db-admin|-A		Make specified user database administrator
--help|-?		This help

";
exit 1

}

&help() if $#ARGV eq -1;

my $result = GetOptions(
	"interactive|i!"	=> \$interactive,
	"user|u=s"		=> \$options{user},
	"type|t=s"		=> \$options{type},
	"host|h=s"		=> \$options{host},
	"datadir|d=s"		=> \$options{datadir},
	"port|p=i"		=> \$options{port},
	"db-user=s"		=> \$dbuser,
	"db-password=s"		=> \$dbpasswd,
	"db-password-stdin"	=> \$dbpasswd_stdin, # grg 2009-06-20
	"db-admin|A!"		=> \$dbadmin,
	"help|?"		=> sub { &help; }
			);

&help() if (!$result);

if ($#ARGV ne -1) {
	&help;
}

if ($dbpasswd_stdin)
{
  $dbpasswd = <STDIN>;
  die "Cannot read password" unless defined($dbpasswd);
  chomp $dbpasswd;
  die "Cannot read password" unless $dbpasswd ne '';
}

if ($dbpasswd eq '') {
    # Warning this is unsafe! We should use password generating module here
    $dbpasswd = `$bin_dir/passgen 2>/dev/null`;
    chomp $dbpasswd;
}

# Add slash if missing
if (defined($options{datadir})) {
    unless ($options{datadir} =~ /\/$/) {
       $options{datadir} .= "/";
    }
}

my $work_config = $config->select("user", "."); # Clone config

foreach my $key (keys %options) {
    if (defined $options{$key}) {
	$work_config = $work_config->select($key, "^" . $options{$key} . "\$");
    }
}

unless (defined($work_config->{daemons})) {
    print "Warning: no daemons defined to work with, bailing out\n";
    exit 0;
}

if ($work_config->count() > 1) {
    print "Warning: you asked to change password of admin user for more than one daemon!\n";
    print "         You have only 10 seconds to abort execution of this script by Ctrl-C\n";
    my $count = 10; $|=1;
    print "*";
    while ($count) { sleep 1; $count--; print "\r$count" };
    print "\r         Ok, we will continue... Beware! :)\n";
}

$work_config->foreach(\&add_user, $dbuser, $dbpasswd, $dbadmin);

sub add_user {
    my $record = shift;
    my $daemon = shift; # unused
    my $dbuser = shift;
    my $dbpasswd = shift;
    my $dbadmin = shift;
    my @args = ();

    unless (defined $record->{type}) {
	print "Warning: i cannot handle operation without db type\n";
	return;
    }

    my $helper = $bin_dir . "/user-add." . $record->{type};

    if ( -x "$helper-" . $record->{version} ) {
        $helper .= "-" . $record->{version};
    }

    unless ( -x $helper ) {
	print "Warning: cannot find helper '$helper'\n";
	return;
    }

    unless ($dbpasswd) {
	print "Warning: password is not defined\n";
	return;
    }

    push @args, $helper ;

    foreach my $key (keys %{$record}) {
	next if ($key eq 'password');
	push @args, "--" . $key . "=" . $record->{$key} if $record->{$key};
    }

    push @args, "--db-user=$dbuser";
    my $dbpasswd_quoted = $dbpasswd;
    $dbpasswd_quoted =~ s/\\/\\\\/g;
    $dbpasswd_quoted =~ s/'/\\'/g;
    push @args, "--db-password='$dbpasswd_quoted'";
    push @args, "--db-admin" if ($dbadmin);

# XXX: debug: print join(' ', @args) . "\n";
    if (my $pid = fork()) { # parent
	wait;
	print "added: account='" . $record->{user} . "' type='" . $record->{type} . "' host='" . $record->{host} . ":" . $record->{port} . "' user='" . $dbuser . "' password='" . $dbpasswd .  "' status=" . $? . "\n";
	return;
    } else { # child
    
	unless (defined $pid) {
	    die "cannot fork(): $!";
	}
	
	# prepare
	# check that all specified arguments are allowed to be specified ;)

	unless ( -x "/bin/sh" ) {
	    die "no shell available at /bin/sh";
	}

	# user
	unless (defined($record->{user}) && getpwnam($record->{user}) > 0) {
	    die "user does not seems to be exists"
	}

	#version
	
	#datadir
	unless (defined($record->{datadir}) && -d $record->{datadir}) {
	    die "datadir does not seems to be exists"
	}
	
	#host
	unless (defined($record->{host}) &&
		$record->{host} =~ /(\d+){1,3}\.(\d+){1,3}\.(\d+){1,3}\.(\d+){1,3}$/ &&
		$1 > 0 && $2 >= 0 && $3 >= 0 && $4 > 0 &&
		$1 < 255 && $2 < 255 && $3 < 255 && $4 < 255) {
	    die "Bad IP specified"
	}	
	
	#port
	unless (defined($record->{port}) &&
		1023 < $record->{port} &&
		$record->{port} < 65535 ) {
	    print "Invalid port specified"
	}
	
	#limits
	if (defined($record->{limits})) {
	    # here we should call to dbLimits->set_limits()
	} else { # default limits policy should goes here
	
	}

	open STDIN, '/dev/null' or die "cannot redirect stdin: $!";
	open STDOUT, '>/dev/null' or die "cannot redirect stdout: $!";
	setsid or die "cannot start session: $!";
    	exec { "/bin/sh" } "/bin/sh", @args;
	die "Cannot exec";
    }
}
