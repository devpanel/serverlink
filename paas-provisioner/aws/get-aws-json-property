#!/usr/bin/env perl
use strict;
use warnings;
use JSON::XS;

sub usage {
  print "Usage: $0 <operation> <json_file>

  Valid operations:
";
  exit(1);
}


# main
#
if($#ARGV < 1) {
  usage();
}

my $op   = lc($ARGV[0]);
my $file = $ARGV[1];

if(!open(JSON_FILE, $file)) {
  die "Error: unable to open file $file, $!\n";
}

my $json_str = '';
while(<JSON_FILE>) {
  $json_str .= $_;
}

my $json_r;
eval { $json_r = decode_json($json_str); };
if($@) {
  die "Error: $@\n";
}

if($op eq "get-stack-id") {
  my $main_key = 'Stacks';
  my $sec_key  = 'StackId';

  if(!exists($json_r->{$main_key}) || !ref($json_r->{$main_key}) ||
    ref($json_r->{$main_key}) ne "ARRAY" || $#{ $json_r->{$main_key} } != 0) {
    die "Error: invalid basic conditions in the format expected\n";
  }

  if(exists($json_r->{$main_key}->[0]->{$main_key}) &&
    defined($json_r->{$main_key}->[0]->{$sec_key})) {
    printf "%s\n", $json_r->{$main_key}->[0]->{$sec_key};
  } else {
    die "Error: missing stack id.\n";
  }
} elsif($op eq "get-loadbalancer-id") {
  my $main_key = 'StackResourceDetail';
  my $sec_key  = 'PhysicalResourceId';

  if(!exists($json_r->{$main_key})) {
    die "Error: invalid basic conditions in the format expected\n";
  }

  if(exists($json_r->{$main_key}->{$sec_key}) &&
     defined($json_r->{$main_key}->{$sec_key})) {
       printf "%s\n", $json_r->{$main_key}->{$sec_key};
  } else {
    die "Error: didn't find key.\n";
  }
} elsif($op eq "get-stack-status") {
  my $main_key = 'Stacks';
  my $sec_key  = 'StackStatus';

  if(!exists($json_r->{$main_key}) || !ref($json_r->{$main_key}) ||
    ref($json_r->{$main_key}) ne "ARRAY" || $#{ $json_r->{$main_key} } != 0) {
    die "Error: invalid basic conditions in the format expected\n";
  }

  if(exists($json_r->{$main_key}->[0]->{$sec_key}) &&
    defined($json_r->{$main_key}->[0]->{$sec_key})) {

    printf "%s\n", $json_r->{$main_key}->[0]->{$sec_key};
  } else {
    die "Error: didn't find key.\n";
  }
} elsif($op eq "get-loadbalancer-canonical-url") {
  my $main_key = 'LoadBalancerDescriptions';
  my $sec_key  = 'CanonicalHostedZoneName';

  if(!exists($json_r->{$main_key}) || !ref($json_r->{$main_key}) ||
    ref($json_r->{$main_key}) ne "ARRAY" || 
    $#{ $json_r->{$main_key} } != 0) {
    die "Error: invalid basic conditions in the format expected\n";
  }

  if(exists($json_r->{$main_key}->[0]->{$sec_key}) &&
    defined($json_r->{$main_key}->[0]->{$sec_key})) {
    printf "%s\n", $json_r->{$main_key}->[0]->{$sec_key};
  } else {
    die "Error: didn't find key.\n";
  }
} elsif($op eq "get-rds-id") {
  my $main_key = 'StackResourceDetail';
  my $sec_key  = 'PhysicalResourceId';

  if(!exists($json_r->{$main_key}) || !defined($json_r->{$main_key})) {
    die "Error: invalid basic conditions in the format expected\n";
  }

  if(exists($json_r->{$main_key}->{$sec_key}) &&
    defined($json_r->{$main_key}->{$sec_key})) {
    printf "%s\n", $json_r->{$main_key}->{$sec_key};
  } else {
    die "Error: didn't find key.\n";
  }
} elsif($op eq "print-rds-attributes") {
  my $main_key = 'DBInstances';
  my $sec_key  = 'Endpoint';

  if(!exists($json_r->{$main_key}) || !ref($json_r->{$main_key}) ||
    ref($json_r->{$main_key}) ne "ARRAY" || 
    $#{ $json_r->{$main_key} } != 0) {
    die "Error: invalid basic conditions in the format expected\n";
  }

  if(exists($json_r->{$main_key}->[0]->{$sec_key}) &&
    defined($json_r->{$main_key}->[0]->{$sec_key})) {
    printf "\@devpanel_param rds_address %s\n",
      $json_r->{$main_key}->[0]->{$sec_key}->{Address};
    printf "\@devpanel_param rds_port %s\n",
      $json_r->{$main_key}->[0]->{$sec_key}->{Port};
  } else {
    die "Error: didn't find keys.\n";
  }
} elsif($op eq "get-deployment-server-ipv4") {
  my $main_key = 'StackResourceDetail';
  my $sec_key  = 'PhysicalResourceId';

  if(!exists($json_r->{$main_key})) {
    die "Error: invalid basic conditions in the format expected\n";
  }

  if(exists($json_r->{$main_key}->{$sec_key}) &&
     defined($json_r->{$main_key}->{$sec_key})) {
       printf "%s\n", $json_r->{$main_key}->{$sec_key};
  } else {
    die "Error: didn't find key.\n";
  }
} elsif($op eq "get-deployment-server-public-ipv4") {
  my $main_key = 'Reservations';
  my $sec_key  = 'Instances';

  if(!exists($json_r->{$main_key})) {
    die "Error: invalid basic conditions in the format expected\n";
  }

  if(exists($json_r->{$main_key}->[0]->{$sec_key}) &&
     defined($json_r->{$main_key}->[0]->{$sec_key})) {
       printf "%s\n", $json_r->{$main_key}->[0]->{$sec_key}->[0]->{PublicIpAddress};
  } else {
    die "Error: didn't find key.\n";
  }
} elsif($op eq "get-deployment-server-private-ipv4") {
  my $main_key = 'Reservations';
  my $sec_key  = 'Instances';

  if(!exists($json_r->{$main_key})) {
    die "Error: invalid basic conditions in the format expected\n";
  }

  if(exists($json_r->{$main_key}->[0]->{$sec_key}) &&
     defined($json_r->{$main_key}->[0]->{$sec_key})) {
       printf "%s\n", $json_r->{$main_key}->[0]->{$sec_key}->[0]->{PrivateIpAddress};
  } else {
    die "Error: didn't find key.\n";
  }
} elsif($op eq "get-webservers-ipv4") {
  my $main_key = 'Reservations';
  my $sec_key  = 'Instances';

  if(!exists($json_r->{$main_key}) || !ref($json_r->{$main_key}) ||
     ref($json_r->{$main_key}) ne "ARRAY") {
    die "Error: invalid basic conditions in the format expected\n";
  }

  my $ips_txt = '';
  for(my $i=0; $i <= $#{ $json_r->{$main_key} }; $i++) {
    my $instances_ar = $json_r->{$main_key}->[$i]->{Instances};
    if(!ref($instances_ar) || ref($instances_ar) ne "ARRAY") {
      next;
    }

    for(my $j=0; $j <= $#{ $instances_ar }; $j++) {
      my $instance_r = $instances_ar->[$j];
      if(!exists($instance_r->{State}->{Name}) ||
        !defined($instance_r->{State}->{Name}) ||
        $instance_r->{State}->{Name} ne "running") {
        next;
      }

      if(exists($instance_r->{PrivateIpAddress}) &&
         defined($instance_r->{PrivateIpAddress})) {
         $ips_txt .= sprintf("%s\n", $instance_r->{PrivateIpAddress});
      }
    }
  }

  if(length($ips_txt) > 0) {
    print $ips_txt;
    exit(0);
  } else {
    exit(1);
  }
} else {
  die "Error: unknown operation requested.\n";
}
