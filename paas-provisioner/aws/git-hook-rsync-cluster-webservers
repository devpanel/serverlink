#!/bin/bash

usage() {
  :
}

# main

unset repo_name web_server_ip webserver_ips
umask 022

self=`readlink -e "${BASH_SOURCE[0]}"`
dir=`dirname "$self"`
we_base_dir=`readlink -e "$dir/../.."`

lib_file="$we_base_dir/lib/functions"
if ! source "$lib_file"; then
  echo "Error: unable to source lib file '$lib_file'" 1>&2
  exit 1
fi

if [ -n "$GL_REPO" ]; then
  repo_name="$GL_REPO"
elif [ -n "$SSH_ORIGINAL_COMMAND" ]; then
  read tmp_repo_name web_server_ip <<< "$SSH_ORIGINAL_COMMAND"
  if [ -z "$tmp_repo_name" -o -z "$web_server_ip" ]; then
    echo "Usage: `basename $0` <repo_name> <webserver_ip>" 1>&2
    exit 1
  fi

  repo_name=$(basename "$tmp_repo_name")
  webserver_ips="$web_server_ip"
else
  echo "Error: missing variable GL_REPO" 1>&2
  exit 1
fi

if [ -n "$GIT_DIR" ]; then
  export GIT_DIR=`readlink -e "$GIT_DIR"`
else
  export GIT_DIR="$HOME/repositories/$repo_name.git"
fi

metadata_dir="$HOME/.devpanel/metadata"
if [ ! -d "$GIT_DIR" ]; then
  echo "Error: unable to find git dir '$GIT_DIR'" 1>&2
  exit 1
elif [ ! -d "$metadata_dir" ]; then
  echo "Error: unable to find metadata dir '$metadata_dir'" 1>&2
  exit 1
fi

vhost=`get_metadata_value "$metadata_dir" "config:param:aws_vhost:repo:$repo_name" 2>/dev/null`
if [ -z "$vhost" ]; then
  echo "Error: unable to get vhost from git metadata" 1>&2
  exit 1
fi

remote_docroot_dir="/var/www/html/$vhost"

if [ -z "$webserver_ips" ]; then
  webserver_ips=`"$dir/get-cluster-webserver-ips"`
  if [ $? -ne 0 ]; then
    echo "Error: unable to get IPs of webservers" 1>&2
    exit 1
  fi
fi

tmp_checkout_dir=`mktemp -d`
if [ $? -ne 0 ]; then
  echo "Error: unable to create temporary dir" 1>&2
  exit 1
fi
trap 'rm -rf -- "tmp_checkout_dir"' EXIT

chmod 755 "$tmp_checkout_dir" # needed for rsync to set proper remote perms
cd "$tmp_checkout_dir"
git -c core.bare=false checkout -f

for ip in "$webserver_ips"; do
  rsync -a ./ "root@$ip:$remote_docroot_dir"

  ssh root@"$ip" \
    chown -R www-data:www-data "$remote_docroot_dir" \; \
    /opt/webenabled/paas-provisioner/aws/update-drupal-settings "$vhost"

  # start apache if it's not running
  # when the server boots Apache is not started for the ELB not to include
  # it in the web server pool when the content is not yet at the server
  ssh root@"$ip" service apache2 status '||' service apache2 start
done
