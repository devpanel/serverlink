<ruby>
#throttling if we get too much jobs
maxjobs = 8

verbose = 1

def jobwaiting(maxjobs,verbose) #thread handling for poor guys
  while(framework.jobs.keys.length >= maxjobs)
    ::IO.select(nil, nil, nil, 2.5)
    if(verbose == 1)
      jobs_len    = framework.jobs.keys.length
      threads_len = framework.threads.length
      print_error("Waiting... active jobs: #{jobs_len} / threads: #{threads_len}")
    end
  end
end


host_ip = "127.0.0.1"

# print_line("test run")
run_single("load wmap")
run_single("wmap_sites -a #{host_ip}")
run_single("wmap_targets -t #{host_ip}")
run_single("wmap_run -e /tmp/wmap.profile")
run_single("wmap_vulns -l")
run_single("vulns -i -R #{host_ip}")
run_single("exit")

# framework.db.workspace.vulns.each do |vuln|
#   next if (vuln.refs.to_s !~ /NSS/)
#   next if (vuln.refs.size > 1)
#   if (verbose == 1)
#     print_line("#{vuln.refs.to_s}")
#     print_line("deleting Nessus stuff ...")
#   end
#   vuln.destroy
#   count = count +1
# end

jobwaiting(maxjobs,verbose)

</ruby>
# jobs
