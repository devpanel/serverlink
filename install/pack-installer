#!/bin/bash

usage() {
  local prog=$(basename "$0")
  echo "
Usage: $prog <-d source_directory> <-c queue_source_dir> <-f target.tar.gz> <-V version_str>

  Options
    -d source_dir         Source directory where to get the scripts from
    -f target_file        Tar file where to store the scripts
    -c queue_source_dir   Source directory that contains taskd and queue libs
    -V version_str        Use the version_str as the version for this package

This program packs the installation files in a .tar.gz file for installing
"
  exit 1
}

error() {
  local msg="$1"
  local exit_code=${2:-1}

  [ -n "$msg" ] && echo "Error: $msg" 1>&2

  exit $exit_code
}

# main

declare -a files_from_queue_dir=( \
  'Cloudenabled/Util.pm | lib/perl5/Cloudenabled'
  'Cloudenabled/Constants.pm | lib/perl5/Cloudenabled' \
  'devpanel | bin'
)

declare -a dirs_from_queue_dir=( \
  'devpanel-include/ | lib/devpanel-cli'
)

[ $# -lt 2 ] && usage

[ $EUID -ne 0 ] && error "this script needs to be run with ROOT privileges"

getopt_flags='d:f:c:V:'
unset source_dir target_file queue_source_dir version_str
while getopts $getopt_flags OPTN; do
  case $OPTN in
    d)
      source_dir="$OPTARG"
      ;;
    f)
      target_file="$OPTARG"
      ;;
    c)
      queue_source_dir="$OPTARG"
      ;;
    V)
      version_str="$OPTARG"
      ;;
  esac
done

if [ -z "$source_dir" ]; then
  error "missing source_dir, option -d"
elif [ -z "$target_file" ]; then
  error "missing target_file, option -t"
elif [ -z "$queue_source_dir" ]; then
  error "missing queue_source_dir, option -c"
elif [ -z "$version_str" ]; then
  error "missing version string, option -V"
fi

if [ ! -d "$source_dir" ]; then
  error "unable to find source directory '$source_dir'"
elif [ ! -d "$queue_source_dir" ]; then
  error "unable to find queue source directory '$queue_source_dir'"
fi

if [ -e "$target_file" ]; then
  error "target file '$target_file' already exists."
fi

for file in "${files_from_queue_dir[@]}"; do
  file=${file%% |*}
  if [ ! -e "$queue_source_dir/$file" ]; then
    error "file '$file' doesn't exist in queue dir '$queue_source_dir'"
  fi
done

for dir in "${dirs_from_queue_dir[@]}"; do
  dir=${dir%% |*}
  if [ ! -e "$queue_source_dir/$dir" ]; then
    error "path '$dir' does not exist"
  elif [ ! -d "$queue_source_dir/$dir" ]; then
    error "path '$dir' is not a directory"
  fi
done

tmp_pack_dir=$(mktemp -d)
status=$?
if [ $status -ne 0 ]; then
  error "unable to create temporary pack directory. mktemp returned $status"
fi

trap 'rm -rf "$tmp_pack_dir"' EXIT INT TERM

internal_pack_dir="$tmp_pack_dir/webenabled-devpanel"
mkdir "$internal_pack_dir"
if [ $? -ne 0 ]; then
  error "unable to create dir '$internal_pack_dir'"
fi

echo "Starting copy of files to temp dir '$tmp_pack_dir'"
cp -a "$source_dir"/*  "$internal_pack_dir"
status=$?
if [ $status -ne 0 ]; then
  error "unable to copy files to temporary pack directory '$tmp_pack_dir'."\
" cp returned $status"
fi

for file in "${files_from_queue_dir[@]}"; do
  s_file=${file%% |*}
  t_file=${file##*| }
  cp "$queue_source_dir/$s_file" "$internal_pack_dir/$t_file"
  status=$?
  if [ $status -ne 0 ]; then
    error "unable to copy file '$s_file' from queue dir, to dest dir '$t_file'"
  fi
done

for dir in "${dirs_from_queue_dir[@]}"; do
  s_dir=${dir%% |*}
  t_dir=${dir##*| }
  cp -r "$queue_source_dir/$s_dir" "$internal_pack_dir/$t_dir"
  status=$?
  if [ $status -ne 0 ]; then
    error "unable to copy directory '$s_file' from queue dir, to dest dir '$t_dir'"
  fi
done

chown -R 0:0 "$tmp_pack_dir"
status=$?
if [ $status -ne 0 ]; then
  error "unable to chown -R 0:0 files in pack directory '$tmp_pack_dir'."\
" chown returned $status"
fi

version_file="$internal_pack_dir/config/version"
if [ -e "$version_file" ]; then
  rm -- "$version_file"
  status=$?
  if [ $status -ne 0 ]; then
    error "unable to remove previous version file '$version_file'"
  fi
fi
if ! ln -s "$version_str" "$version_file"; then
  error "unable to create the version file '$version_file'"
fi

echo "Started packing .tar.gz file '$target_file'"
tar -C "$tmp_pack_dir" -zcpf "$target_file" .
status=$?
if [ $status -ne 0 ]; then
  error "unable to create target file '$target_file'. tar returned $status"
fi

echo "Successfully created pack file '$target_file'"
