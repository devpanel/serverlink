#!/bin/bash

###########################  README!!!! ##############################
# see the extended usage option below
######################################################################

# Define variables for binaries

#IPT="/sbin/iptables"
#IPTS="/sbin/iptables-save"
#IPTR="/sbin/iptables-restore"
IPT=$(which iptables)
IPTS=$(which iptables-save)
IPTR=$(which iptables-restore)

declare -a tmp_files_ar=()

# Check if binaries exist in the system
command -v $IPT >/dev/null 2>&1 || { echo "You need iptables to run this script" >&2; exit 1; }
command -v $IPTS >/dev/null 2>&1 || { echo "You need iptables-save to execute this script" >&2;  exit 1; }
command -v $IPTR >/dev/null 2>&1 || { echo "You need iptables-restore to execute this script" >&2;  exit 1; }
command -v curl >/dev/null 2>&1 || { echo "You need curl to execute this script" >&2;  exit 1; }

# Usage method
usage(){
echo "This script is used to define iptables rules based on a file that the front-end gives
Usage:
        -h      show this help message
        -H      show extended usage
        -F      flush all the rules
        -E      enable iptables rule importing on boot
        -R      reload iptables rules from the default config file
        -D      disable iptables loading on boot
        -I      Import rules from the specified file. Read one rule per line
                in the format: port/protocol (e.g. 8080/tcp, 9000/udp)
                Use - to read from STDIN.
                Example: $0 -I /tmp/rules.txt

Please notice that this script will overwrite any rule previously saved with
command iptables-save.
"
exit 1
}

# Extended usage method
extusage(){
echo "This script is used to change the iptables rules based on a file you give

You can only define the inbound connections on the file you give.
This is the format you have to use INSIDE the file

port/protocol

e.g.:
8080/tcp

You can have several lines per file.
If you want to open port 9000 UDP, you will need to add this rule

9000/udp

Please notice that this script will overwrite any rule previously saved with
command iptables-save.
"
exit 1
}

cleanup() {
  local file

  for file in ${tmp_files_ar[@]}; do
    if [ -f "$file" ]; then
      rm -f -- "$file"
    fi
  done
}

# Conditional to see if the user is root
if  [ $EUID -ne 0 ];then
        echo "You should be root to run this script!"
        usage
        exit 1;
fi

# Main method to import the rules from the given file
importrules(){
local -a port_proto_ar=()

# Get SSH port
if [ -z "$RULESFILE" ];then
        echo "$RULESFILE does not exist"
        exit 1
fi

if [ "$RULESFILE" != "-" ]; then
  exec < "$RULESFILE" # set the file as STDIN
fi

if [ "$RULESFILE" == "-" ] && tty &>/dev/null; then
  echo "Reading from STDIN, please enter port/proto one per line" 1>&2
fi

# before applying any change, test the input lines and exit on error
local -i line_n=0
# read port/proto from each line, e.g.: 80/tcp
while IFS=/ read port proto;  do
  line_n+=1

  if [ -z "$port" -a -z "$proto" ]; then
    continue # skip blank line
  elif [ -z "$port" ]; then
    error "missing port on line $line_n"
  elif [ -z "$proto" ]; then
    error "missing protocol on line $line_n"
  elif [ "${port:0:1}" == "#" ]; then
    # if the first character is #, then skip the line
    continue
  elif ! [[ "$port" =~ ^[0-9]+$ ]]; then
    error "invalid port format on line $line_n"
  elif [ "${proto,,}" != "tcp" -a "${proto,,}" != "udp" -a \
         "${proto,,}" != "icmp" ]; then

    error "invalid protocol on line $line_n"
  elif [ $port -ge 65536 ]; then
    error "port value must be lower than 65536 (line $line_n)"
  fi

  # add all good port/proto values to this array to be loaded later below
  port_proto_ar+=( "$port/${proto,,}" )
done

if [ ${#port_proto_ar} -eq 0 -a -z "$enable_mode" ]; then
  error "received an empty list of port/protocols"
fi

trap 'cleanup' EXIT

RULESBACKUP=$(mktemp)
if [ $? -ne 0 ]; then
  error "failed to create temporary file"
fi
tmp_files_ar+=( $RULESBACKUP )

local config_file_tmp
local previous_config_file previous_config_file_tmp

previous_config_file="$sys_dir/config/iptables-save.previous"

config_file_tmp=$(mktemp)
if [ $? -ne 0 ]; then
  error "unable to create temporary file"
fi
tmp_files_ar+=( $config_file_tmp )

previous_config_file_tmp=$(mktemp)
if [ $? -ne 0 ]; then
  error "unable to create temporary file"
fi
tmp_files_ar+=( $previous_config_file_tmp )

$IPTS > $RULESBACKUP
if [ $? -ne 0 ]; then
  error "failed to save backup of existing rules"
fi

# Flush rules and Change default action to DROP
$IPT -t filter -F
$IPT -t filter -X
$IPT -P INPUT ACCEPT
$IPT -P FORWARD ACCEPT
$IPT -P OUTPUT ACCEPT
$IPT -I INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# Enable use of loopback interfaces
$IPT -A INPUT -i lo -j ACCEPT
$IPT -A OUTPUT -o lo -j ACCEPT

# All TCP sessions should begin with SYN
$IPT -A INPUT -p tcp ! --syn -m state --state NEW -s 0.0.0.0/0 -j DROP

# Accept inbound TCP packets
$IPT -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Accept outbound packets
$IPT -I OUTPUT 1 -m state --state RELATED,ESTABLISHED -j ACCEPT

# Accept PING from all sources
$IPT -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
$IPT -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT

# Conditional to open SSH PORT
SSHPORT=$(cat /etc/ssh/sshd_config |grep  ^Port |awk '{print $2}')
re='^[0-9]+$'

if [ -z "$SSHPORT" ];then
        $IPT -A INPUT -p tcp --dport ssh -j ACCEPT
elif [[ $SSHPORT =~ $re ]];then
        $IPT -A INPUT -p tcp --dport $SSHPORT -j ACCEPT
else
true
fi

$IPT -A INPUT -p tcp --dport http  -j ACCEPT
$IPT -A INPUT -p tcp --dport https -j ACCEPT
$IPT -A INPUT -p tcp --dport 10050 -j ACCEPT # zabbix monitoring

local port_proto port proto
for port_proto in ${port_proto_ar[*]}; do
  port=${port_proto%/*}
  proto=${port_proto#*/}

  if [ "$proto" == "tcp" -o "$proto" == "udp" ]; then
    iptables -A INPUT -p "$proto" --dport "$port" -j ACCEPT
    st=$?
  elif [ "$proto" == "icmp" ]; then
    icmp_type="$port"
    iptables -A INPUT -p "$proto" --icmp-type "$icmp_type" -j ACCEPT
    st=$?
  else
    echo "Warning: unknown port/proto: $port_proto" 1>&2
    continue
  fi

  if [ $st -ne 0 ]; then
    echo "Warning: failed to add $port_proto to the iptables rules" 1>&2
  fi
done

$IPT -A INPUT -j DROP

if [ -f "$config_file" ]; then
  cat $config_file >$previous_config_file_tmp
  if [ $? -ne 0 ]; then
    error "unable to backup config file $config_file"
  fi
fi

# Check the connection with the world, if it fails then the rules will be cleaned
RESPONSE=$(curl -Ss --head -w %{http_code} http://controller.devpanel.com/ -o /dev/null)

if [[ "$RESPONSE" != "200" ]]; then
        echo "No external connectivity, reverting changes..."
        $IPTR < $RULESBACKUP
        exit 1;
fi

$IPTS >"$config_file_tmp"
if [ $? -eq 0 ]; then
  mv -f "$config_file_tmp" "$config_file"
  if [ $? -eq 0 ]; then
    mv -f "$previous_config_file_tmp" "$previous_config_file"
    if [ $? -eq 0 ]; then
      echo "Successfully saved previous rules to $previous_config_file"
    else
      echo "Warning: unable to move $previous_config_file_tmp to $previous_config_file" 1>&2
    fi

    echo "Successfully saved iptables rules to $config_file"
  fi
else
  error "unable to save new iptables rules"
fi

if [ "$linux_distro" == "centos" ]; then
  preup_dir="/sbin"
  preup_bin="$preup_dir/ifup-pre-local"
elif [ "$linux_distro" == "ubuntu" -o "$linux_distro" == "debian" ]; then
  preup_dir="/etc/network/if-pre-up.d"
  preup_bin="$preup_dir/1-devpanel-pre-up"
fi

if [ -n "$preup_dir" -a -d "$preup_dir" ]; then
  if [ ! -f "$preup_bin" ]; then
    ln -sf "$sys_dir/libexec/interfaces-pre-up" $preup_bin
    if [ $? -ne 0 ]; then
      echo "Warning: failed to enable iptables on boot" 1>&2
    fi
  fi
fi

exit 0
}

enable_iptables() {
  local preup_dir preup_bin

  if [ "$linux_distro" == "centos" ]; then
    preup_dir="/sbin"
    preup_bin="$preup_dir/ifup-pre-local"
  elif [ "$linux_distro" == "ubuntu" -o "$linux_distro" == "debian" ]; then
    preup_dir="/etc/network/if-pre-up.d"
    preup_bin="$preup_dir/1-devpanel-pre-up"
  else
    echo "$FUNCNAME(): unknown linux distro" 1>&2
    return 1
  fi

  local real_path
  if [ -L "$preup_bin" ]; then
    real_path=$(readlink -e "$preup_bin")
    if [ $? -ne 0 ]; then
      return 1
    fi

    if [ "${real_path#$sys_dir}" != "$real_path" ]; then
      return 0 # already enabled
    fi
  elif [ ! -f "$preup_bin" ]; then
    : # not exists, ok, enable it below
  else
    # pre-up file exists and points somewhere else
    return 1
  fi

  ln -sf "$sys_dir/libexec/interfaces-pre-up" $preup_bin
  if [ $? -eq 0 ]; then
    return 0
  else
    echo "Error: failed to enable iptables on boot" 1>&2
    return 1
  fi
}

disable_iptables() {
  local preup_dir preup_bin

  if [ "$linux_distro" == "centos" ]; then
    preup_dir="/sbin"
    preup_bin="$preup_dir/ifup-pre-local"
  elif [ "$linux_distro" == "ubuntu" -o "$linux_distro" == "debian" ]; then
    preup_dir="/etc/network/if-pre-up.d"
    preup_bin="$preup_dir/1-devpanel-pre-up"
  else
    echo "$FUNCNAME(): unknown linux distro" 1>&2
    return 1
  fi

  if [ -L "$preup_bin" -a "${preup_bin#$sys_dir}" != "$preup_bin" ]; then
    rm -f "$preup_bin"
    return $?
  elif [ ! -e "$preup_bin" -o -f "$preup_bin" ]; then
    # if it doesn't exist or is a regular file (or a link not pointing to
    # $sys_dir)
    return 0
  else
    # unknown condition
    return 1
  fi
}

# Clean rules and accept all traffic by default

flushrules(){
$IPT -F
$IPT -X
$IPT -t nat -F
$IPT -t nat -X
$IPT -t mangle -F
$IPT -t mangle -X
$IPT -P INPUT ACCEPT
$IPT -P FORWARD ACCEPT
$IPT -P OUTPUT ACCEPT
echo "Iptables rules cleaned"
}

# Parse options
[ $# -eq 0 ] && usage

self_bin=$(readlink -e "$0")
if [ $? -ne 0 ]; then
  echo "Error: unable to detect self path" 1>&2
  exit 1
fi
self_dir=${self_bin%/*}
sys_dir=${self_dir%/*}
lib_file="$sys_dir/lib/functions"
config_file="$sys_dir/config/iptables-save"

if ! source "$lib_file"; then
  echo "Error: unable to source file $lib_file"
  exit 1
fi

linux_distro=$(devpanel_auto_detect_distro)
if [ $? -ne 0 ]; then
  exit 1
fi

unset enable_mode
while getopts ":DREFHI:" opt ; do
  case $opt in
    D)
        disable_iptables
        if [ $? -eq 0 ]; then
          echo "Successfully disabled iptables rule loading."
        fi

        rm -f -- "$config_file"

        flushrules
        ;;
    E)
        enable_mode=1
        enable_iptables
        if [ $? -eq 0 ]; then
          echo "Successfully enabled iptables rule loading."
        fi

        flushrules

        RULESFILE="/dev/null"
        importrules
        ;;
    F)
        flushrules
        ;;
    I)
        RULESFILE="$OPTARG"
        importrules
        ;;
    H)
        extusage
        ;;
    R)
        flushrules
        if [ ! -f "$config_file" ]; then
          error "missing config file $config_file"
        fi

        $IPTR < $config_file
        if [ $? -eq 0 ]; then
          echo "Successfully reloaded iptables rules from $config_file"
        fi
        ;;
    *)
        usage
        ;;
  esac
done
