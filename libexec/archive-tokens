#!/bin/bash

token_min_length=10
secret_key_min_length=50

token_length=$token_min_length
secret_key_length=$secret_key_min_length

usage() {
  local prog=$(basename "$0")
  local msg="$1"

  echo "
This script creates tokens to be used for cloning vhosts through HTTP

Usage: $prog [ OPTIONS ] <vhost>

  Options:
    -n number         number of characters of the token
    -N number         number of characters of the secret key
    -t type           Type of the clone. Accepted types: recv_passive,
                      recv_active, send_passive, send_active
    -T token          use the specified token (instead of generating a
                      random one)
    -S                read secret key from stdin
    -r                remove the token specified in option -T
    -p                print token and file path information in the end
"
  [ -n "$msg" ] && echo "Error: $msg" 1>&2

  exit 1
}

# main

[ $# -lt 1 ] && usage

dir=$( dirname "$0" )
if ! source "$dir/../lib/functions"; then
  echo "Error: unable to import auxiliary functions." >&2
  exit 1
fi
token_dir="$dir/../var/tokens"
archive_dir="$dir/../data/vhost_archives"

if [ ! -e "$token_dir" ]; then
  error "token dir '$token_dir' doesn't exist."
elif [ ! -d "$token_dir" ]; then
  error "path '$token_dir' is not a directory"
fi

umask 027

delete_token=0
secret_from_stdin=0
print_token_in_the_end=0
unset token_str
getopt_flags='rn:t:T:Sp'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    n)
      if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
        error "the argument passed to -n should be numeric"
      elif [ ${#OPTARG} -lt $token_min_length ]; then
        error "the argument passed to -n should be greater than $token_min_length"
      else
        token_length=$OPTARG
      fi
      ;;
    N)
      if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
        error "the argument passed to -N should be numeric"
      elif [ ${#OPTARG} -lt $secret_min_length ]; then
        error "the argument passed to -N should be greater than $secret_key_min_length"
      else
        secret_key_length=$OPTARG
      fi
      ;;

    t)
      if [ "$OPTARG" != "recv_passive" -a "$OPTARG" != "recv_active" \
        -a "$OPTARG" != "send_passive" -a "$OPTARG" != "send_active" ]; then
        error  "invalid type. Accepted values: recv_passive, "\
"recv_active, send_passive, send_active"
      else
        clone_type="$OPTARG"
      fi
      ;;
    T)
      token_str="$OPTARG"
      if [ ${#token_str} -lt $token_min_length ]; then
        error "length of token should be >= $token_min_length"
      fi
      ;;
    r)
      delete_token=1
      ;;
    S)
      secret_from_stdin=1
      ;;
    p)
      print_token_in_the_end=1
      ;;
    *)
      usage "invalid parameter received"
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

# missing vhost name
[ $# -lt 1 -o ${#1} -lt 1 ] && usage "missing parameter vhost"

if [ -z "$clone_type" ]; then
  error "please specify clone type (-t)"
fi

vhost="$1"
if ! getent passwd "w_$vhost" &>/dev/null; then
  error "user 'w_$vhost' doesn't exist"
fi

if [ $delete_token -eq 1 -a -z "$token_str" ]; then
  error "requested token deletion (-r), but token string is missing (-T)"
elif [ $delete_token -eq 1 ]; then
  token_file="$token_dir/$vhost.$clone_type.$token_str"
  if [ ! -e "$token_file" ]; then
    wedp_warn "token file doesn't exist"
    exit 0 # exit 0, not important here
  fi

  rm -f "$token_file"
  if [ $? -eq 0 ]; then
    exit 0
  else
    error "unable to delete token file '$token_file'"
  fi
fi

if [ "$clone_type" == "recv_active" -o \
     "$clone_type" == "recv_passive" ]; then
  vhost_archive_dir="$archive_dir/$vhost"
  if [ ! -e "$vhost_archive_dir" ] && ! mkdir "$vhost_archive_dir"; then
    error "unable to create archive dir for vhost '$vhost'"
  elif [ -e "$vhost_archive_dir" -a ! -d "$vhost_archive_dir" ]; then
    error "directory '$vhost_archive_dir' exists but is not a directory"
  elif ! chown "w_$vhost" "$vhost_archive_dir"; then
    error "unable to change the permissions of directory"\
"$vhost_archive_dir to user 'w_$vhost'"
  fi
fi

if [ $secret_from_stdin -eq 1 ]; then
  while [ -z "$secret_key" ]; do
    read -p "Please enter the secret key (stdin): " secret_key
  done

  if [ ${#secret_key} -lt $secret_key_min_length ]; then
    error "length of secret key must be >= $secret_key_min_length"
  fi
fi
  
if [ -z "$token_str" ]; then
  for n in {1..5}; do
    if token_str=$( wedp_gen_random_str $token_length ); then
      token_file="$token_dir/$vhost.$clone_type.$token_str"
      if [ -e "$token_file" ]; then
        wedp_warn "token_file '$token_file' already exists. Trying again"
      else
        break
      fi
    else
      continue
    fi
    token_file=""
  done
else
  token_file="$token_dir/$vhost.$clone_type.$token_str"
fi

if [ -z "$token_file" ]; then
  error "unable to generate token file. Exceeded max number of attempts"
fi

if [ -e "$token_file" ]; then
  wedp_warn "token already exists (this is just a warning)"
  exit 0
fi

if [ -z "$secret_key" ]; then
  for n in {1..5}; do
    if secret_key=$( wedp_gen_random_str $secret_key_length ); then
      break
    fi
  done

  if [ -z "$secret_key" ]; then
    error "unable to generate secret key"
  fi
fi

echo "$secret_key" >"$token_file"
if [ $? -ne 0 ]; then
  error "unable to create token file."
fi
if ! chgrp "w_$vhost" "$token_file"; then
  rm -f "$token_file"
  error "unable to chgrp token file '$token_file' to group 'w_$vhost'"
fi

if [ $print_token_in_the_end -eq 1 ]; then
  echo "Successfully created. Token: $token_str, Type: $clone_type, File: $token_file"
fi

exit 0
