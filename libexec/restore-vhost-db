#!/bin/bash
# Options:
#   -i pass mysql passwd via stdin
#   -S sync (don't create a database instance, just restore the dbs)
#   -H

self_bin=$(readlink -e "$0")
dir=$(dirname "$self_bin")
sys_dir=$(readlink -e "$dir/..")

sync=0
search_in_users_home=0
options=""
create_db_instance=1

while getopts "NiSHF" OPTOPT
do
  case "$OPTOPT" in
    i) options="-i";;
    S) sync=1 ;;
    H) search_in_users_home=1 ;;
    N) create_db_instance=0 ;;
    F) initial_deployment=1 ;;
    *) exit 1;
  esac
done
shift `expr $OPTIND - 1`

run()
{
  echo "  running $@"
  "$@"
}
run2()
{
  echo "  running $@" >&2
  "$@"
}

if ! source "$dir/../lib/functions"; then
  echo "Error: unable to load auxiliary functions" 1>&2
  exit 1
fi

vhost="$1"
user="b_$vhost"
user_web="w_$vhost"
archive_label="$2"

if [ $create_db_instance -eq 1 ] && getent passwd "$user" &>/dev/null; then
  error "user '$user' already exists"
elif [ $create_db_instance -eq 0 ] && ! getent passwd "$user" &>/dev/null; then
  error "user '$user' must exist"
fi

if [ $create_db_instance -eq 0 -a $search_in_users_home -eq 1 -a "${archive_label:0:1}" != "/" \
 -a "${archive_label:0:2}" != "./" -a "${archive_label:0:3}" != "../" ]; then
  user_info=$(getent passwd "$user_web")
  if [ $? -eq 0 ]; then
    user_home_dir=$(echo "$user_info" | cut -d: -f 6)
    test_archive="$user_home_dir/public_html/gen/archive/$archive_label"
    [ -f "$test_archive" ] && archive_label="$test_archive"
  fi
fi

if [ ! -e "$archive_label" ]; then
  error "path '$archive_label' doesn't exist"
elif [ -d "$archive_label" ]; then
  archive_dir="$archive_label"
elif [ -f "$archive_label" ]; then
  tmp_extract=`mktemp -d`
  tar -zxf "$archive_label" -C "$tmp_extract"
  if [ $? -ne 0 ]; then
    error "unable to extract archive '$archive_label'"
  fi

  archive_dir="$tmp_extract/db"
fi

metadata_dir=$(readlink -m "$archive_dir/../metadata")
archive_my_cnf="$archive_dir/b_.my.cnf"
date=`date  +'%Y%m%d'`

echo Listing the databases...
if ! list=`cat "$archive_dir/databases"`
then
  echo "Cannot read database list from $archive_dir/databases" >&2
  exit 1
fi

# WARNING!!! createdb will not work properly if $HOME/.my.cnf exists!!!
export HOME=/

if [ $create_db_instance -eq 1 ]; then

  # check if the app requires a special mysql storage engine
  # to set ~/.my.cnf accordingly
  unset storage_engine
  st_engine_link="$metadata_dir/config.mysql_storage_engine"
  if [ -L "$st_engine_link" ]; then
    storage_engine=$(readlink "$st_engine_link")
    storage_engine_double_esc=$(printf '%q' "$storage_engine")
    options+=" -S $storage_engine_double_esc"
  fi

  # do the actual mysql instance creation
  if [ -s "$archive_my_cnf" ]; then
    "$sys_dir/config/os/pathnames/opt/dbmgr/current/bin/createdb"  -c3 $options "$user" 3<"$archive_my_cnf" || exit 1
  elif ! "$sys_dir/config/os/pathnames/opt/dbmgr/current/bin/createdb" $options "$user"; then
    error "unable to create database instance"
  fi

  # remove the test database, as it may conflict with some seedapps that
  # have the 'test' database
  run2 $dir/dbmgr-mysql-as-root "$user" mysql \
    "-B -D test -e \"SHOW DATABASES;\"" &>/dev/null && \
  run2 $dir/dbmgr-mysql-as-root "$user" mysql "-B -e \"DROP DATABASE test;\""
fi

for database in $list
do
  archive_file="$archive_dir/$database.sql.gz"
  if ! [ -r "$archive_file" ]
  then
     echo "Archive file $archive_file not found" >&2
  fi
  if [ o"$database" = o"mysql" -o o"$database" = o"information_schema" \
       -o "$database" = "performance_schema" -o "$database" = "sys" ]
  then
    echo Skipping database $database
    continue
  fi
  echo "Restoring $database from $archive_file"

  if [ $sync -eq 0 ]; then
    if ! run2 $dir/dbmgr-mysql-as-root "$user" mysql "-B -e \"create database \\\`$database\\\`;\""; then
      error "unable to create datatabase \`$database\`"
    fi

    if ! zcat "$archive_file" | run2 $dir/dbmgr-mysql-as-root "$user" mysql "$database" 2>&1; then
      error "unable to restore the mysql dump of database \`$database\`"
    fi

    echo "Granting all privileges on $database to $user_web"
    if ! run2 $dir/dbmgr-mysql-as-root "$user" mysql "-B -e \"grant all privileges on $database.* to '$user_web'@'%';\""; then
      error "unable to grant all privileges on database \`$database\` to user '$user_web'"
    fi
  else
    if run2 $dir/dbmgr-mysql-as-root "$user" mysql "-B -N -e \"use \\\`$database\\\`;\"" ; then
      run2 $dir/dbmgr-mysql-as-root "$user" mysql "-B -e \"DROP DATABASE \\\`$database\\\`;\""
    fi
      run2 $dir/dbmgr-mysql-as-root "$user" mysql "-B -e \"create database \\\`$database\\\`;\""
      zcat "$archive_file" | run2 $dir/dbmgr-mysql-as-root "$user" mysql "$database"
  fi
done
