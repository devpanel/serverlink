#!/bin/bash
# multi-server version
# local version is renamed to clone-vhost-local
# Options:
#   -P replicate w_* user's password
#   -p do not reset web application passwords
#   -i pass mysql passwd via stdin
#   -n do not activate apache vhost (used for hosting_link)
# -S -- source server. Overrides the WEBENABLED_SOURCE_SERVER or WEBENABLED_SERVER env vars
# -I -- read public ssh key from stdin and use the corresponding private key 
#        (precreated via config-auth-tmp-keygen) when connecting to the source server

options=""
opt_i=0 opt_n=0 opt_I=0
opt_S=""
identity_dir=/opt/webenabled/config/ssh/tmp
unset WEBENABLED_IDENTITY


error()
{
  echo "ERROR${1+: }$@" >&2
  exit 1
}

use_identity()
{
  local key
  read key || error "no key"
  local id=`echo "$key"|sed -n 's/.* webenabled one-time key id=\([-_.A-Za-z0-9]\{1,\}\)$/\1/p'` || error
  [ -n "$id" ] || error "invalid key id"
  local identity_subdir="$identity_dir/$id"
  local identity="$identity_subdir/id_rsa"
  [ -d "$identity_subdir" ] || error "key not found (1)"
  [ -r "$identity" ] || error "key not found (2)"
  [ -r "$identity.pub" ] || error "key not found (3)"
  fgrep -q -x "$key" "$identity.pub" || error "key mismatch"
  export WEBENABLED_IDENTITY="$identity"
}

target_options=""
password=""

while getopts "PpinS:I" OPTOPT
do
  case "$OPTOPT" in
    P) options="${options+ }-P";;
    p) target_options="$target_options${target_options+ }-p";;
    i) opt_i=1; target_options="$target_options${target_options+ }-i";;
    I) opt_I=1;;
    n) opt_n=1; target_options="$target_options${target_options+ }-n";;
    S) opt_S="$OPTARG";;
    *) exit 1;
  esac
done
shift `expr $OPTIND - 1`

source_server=localhost
target_server=localhost
[ -n "$WEBENABLED_SERVER" ] && source_server=$WEBENABLED_SERVER
[ -n "$WEBENABLED_SERVER" ] && target_server=$WEBENABLED_SERVER
[ -n "$WEBENABLED_SOURCE_SERVER" ] && source_server=$WEBENABLED_SOURCE_SERVER
[ -n "$WEBENABLED_TARGET_SERVER" ] && target_server=$WEBENABLED_TARGET_SERVER
unset WEBENABLED_SERVER
[ -n "$opt_S" ] && source_server="$opt_S"

dir=`dirname "$0"`
source="$1"
target="$2"
shift
shift
run()
{
  echo "  Running $@"
  "$@"
}

usage()
{
  echo "Usage: clone-vhost SOURCE_VHOST TARGET_VHOST" >&2
  exit 1
}

if [ $opt_i = 1 ]
then
  read -r password || error "Cannot read password"
  [ -n "$password" ] || error "Empty password"
fi

[ $opt_I = 1 ] && use_identity

set -o pipefail
echo "Cloning stage 1 & 2: archive $source | restore $target"
if ! (if [ $opt_i = 1 ]; then echo "$password";  fi
         if ! WEBENABLED_SERVER="$source_server" $dir/../sbin/archive-vhost $options "$source" -
         then
           echo adding garbage to stdout to signal a broken archive
           false
         fi
     ) |
     WEBENABLED_SERVER="$target_server" $dir/restore-vhost $options $target_options "$target" - "$@"
then
  echo ERROR >&2
  exit 1
fi
  
echo Done
