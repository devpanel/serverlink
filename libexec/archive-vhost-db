#!/bin/bash

usage() {
  echo "Usage: `basename "$0"` [ options ] <vhost> <archive_dir>

  Options:
    -n            don't lock DB tables when dumping
    -e            accept the use of an existing non-empty archive_dir


Archives all databases from vhost into the archive dir.
"
  exit 1
}

dir_empty()
{
  local dir="$1"
  [ -d "$dir" ] || return 0
  set -- $dir/.??* $dir/.[!.] $dir/*
  case $#$* in
    "3$dir/.??* $dir/.[!.] $dir/*")
      return 0;;
    *)
      return 1;;
  esac
}



run()
{
  echo "  running $@"
  "$@"
}
run2()
{
  echo "  running $@" >&2
  "$@"
}

run_su()
{
  echo "  running su -s /bin/sh -l -c '$@' $user" >&2
  su -s /bin/bash -l -c "$*" "$user"
}

create_file()
{
  local file="$1"
  set -C
  echo -n >"$file"
  local status=$?
  set +C
  return $status
}


# main
[ $# -lt 2 ] && usage

unset dont_lock_tables use_existing_dir lock_cmd_arg
getopt_flags='ne'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    n)
      dont_lock_tables=1
      ;;
    e)
      use_existing_dir=1
      ;;
    L)
      unset dont_lock_tables
      lock_cmd_arg=1
      ;;
    *)
      exit 1
      ;;
  esac
done
[ $OPTIND -gt 0 ] && shift $(( $OPTIND - 1 ))

vhost="$1"
archive_dir="$2"
if [ -z "$vhost" -o -z "$archive_dir" ]; then
  usage
fi

self_bin=$(readlink -e "$0")
dir=`dirname "$self_bin"`
sys_dir=$(readlink -e "$dir/..")

lib_file="$sys_dir/lib/functions"
if ! source "$lib_file"; then
  echo "Error: unable to load lib file $lib_file" 1>&2
  exit 1
fi

get_linux_username_from_vhost "$vhost" && \
user_web="$_dp_value"
if [ $? -ne 0 ]; then
  error "unable to get the linux username from vhost $vhost"
fi
user="b_${user_web#w_}"
archive_list="$archive_dir/databases"
archive_my_cnf="$archive_dir/b_.my.cnf"
home="`eval \"echo ~$user\"`"
date=`date  +'%Y%m%d'`
vhost_config_dir="$sys_dir/config/vhosts/$vhost"

if ! `id -u "$user" 2>/dev/null >/dev/null`
then
  echo "No such user: $user" >&2
  exit 1
fi

if ! [ -d "$home" ]
then
  echo "Home dir $home does not exist" >&2
  exit 1
fi

if [ -z "$use_existing_dir" ] && ! dir_empty "$archive_dir"
then
  echo "Target directory is not empty: $archive_dir" >&2
  exit 1
elif [ -n "$use_existing_dir" -a ! -e "$archive_dir" ]; then
  echo "Error: path '$archive_dir' doesn't exist" 1>&2
  exit 1
elif [ -n "$use_existing_dir" -a ! -d "$archive_dir" ]; then
  echo "Error: path '$archive_dir' is not a directory" 1>&2
  exit 1
elif [ -z "$use_existing_dir" ]; then
  echo "Locking $archive_dir..."
  if ! run mkdir -p "$archive_dir"; then
    echo "Error: unable to create dir '$archive_dir'" 1>&2
    exit 1
  fi
fi

if ! create_file "$archive_list" 2>/dev/null
then
  echo "$archive_list must not exist" >&2
  exit 1
fi
chmod +w "$archive_list" || exit 1

echo Listing the databases...
list=`$dir/dbmgr-show-databases "$user"` || exit 1
list=`echo "$list" | egrep -v '^(mysql|performance_schema|information_schema|sys)$'`
echo "$list" >"$archive_list"

echo Checking for .my.cnf...
if run_su "[ -s .my.cnf ]"
then
  echo Found, saving .my.cnf...
  if ! run_su "cat .my.cnf" >"$archive_my_cnf"
  then
     echo "Aborting" >&2
     exit 1
  fi
else 
  echo Not found
fi

if [ -z "$lock_cmd_arg" ] && get_metadata_value "$vhost_config_dir" config.mysql.skip_lock_tables &>/dev/null; then
  dont_lock_tables=1
fi

for database in $list
do
  archive_file="$archive_dir/$database.sql"
  echo "Archiving $database to $archive_file"
  if ! run2 $dir/dbmgr-mysql-as-root "$user" mysqldump --extended-insert=false ${dont_lock_tables:+--skip-lock-tables} "$database" 2>&1 >"$archive_file" ||
     ! run gzip "$archive_file"
  then
    echo "Aborting" >&2
    exit 1
  fi
done
