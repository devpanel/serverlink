#!/bin/bash

opt_P=0

declare -a f_excl_ar=()

unset exclude_file compat_archive_file compat_shadow_file
while getopts "Pe:x:" OPTOPT
do
  case "$OPTOPT" in
    P) opt_P=1;;
    e)
      exclude_file=$OPTARG
      if [ -f "$exclude_file" ]; then
        f_excl_ar+=( --exclude-from="$exclude_file" )
      else
        echo "Error: missing exclude file $exclude_file" 1>&2
        exit 1
      fi
      ;;
    x)
      f_excl_ar+=( --exclude="$OPTARG" )
      ;;

    *) exit 1;
  esac
done
shift `expr $OPTIND - 1`

run()
{
  echo "  running $@"
  "$@"
}
run_su()
{
  echo "  running su -l -c '$@' $user" >&2
  su -l -c "$*" "$user"
}

self_bin=`readlink -e "$0"`
dir=`dirname "$self_bin"`
sys_dir=$(readlink -e "$dir/..")

vhost="$1"
$sys_dir/libexec/check-vhost-name archive "$vhost" || exit 1

lib_f="$sys_dir/lib/functions"
if ! source "$lib_f"; then
  echo "Error: unable to import $lib_f" 1>&2
  exit 1
fi
load_devpanel_config || exit $?

load_vhost_config "$vhost" || exit $?

user="$v__vhost__linux_user"

archive_dir="$2"
home="$v__vhost__linux_user_home"
date=`date  +'%Y%m%d'`
archive_file="$archive_dir/$vhost.tgz"
conf="$v__vhost__file"
conf_removed="$conf.removed"
archive_shadow="$archive_dir/$vhost.shadow"
archive_conf="$archive_dir/apache_$vhost.conf"
logs_dir="$v__vhost__logs_dir"
archive_logs="$archive_dir/logs_$vhost.tgz"
archive_id="$archive_dir/id"
archive_crontab="$archive_dir/crontab"

if [ ${#vhost} -gt 6 ]; then
  # backwards compatibility for systems not updated to be able to restore
  # files
  compat_archive_file="w_$vhost.tgz"
  compat_shadow_file="w_$vhost.shadow"
fi

if ! `id -u "$user" 2>/dev/null >/dev/null`
then
  echo "No such user: $user" >&2
  exit 1
fi

if ! [ -d "$home" ]
then
  echo "Home dir $home does not exist" >&2
  exit 1
fi

if ! [ -d "$logs_dir" ]
then
  echo "Logdir $logs_dir does not exist" >&2
  exit 1
fi

abort_if_exists()
{
  local file="$1"
  if [ -r "$file" ]
  then
    echo "$file must not exist" >&2
    exit 1
  fi
}

create_file()
{
  local file="$1"
  set -C
  echo -n >"$file"
  local status=$?
  set +C
  return $status
}

echo "Locking $archive_dir..."
run mkdir -p "$archive_dir" || exit 1
if ! create_file "$archive_id" 2>/dev/null
then
  echo "$archive_id must not exist" >&2
  exit 1
fi

if ! chmod +w "$archive_id"; then
  echo "Error: unable to make file '$archive_id' writable." 1>&2
  exit 1
fi

abort_if_exists "$archive_file"
abort_if_exists "$archive_logs"
abort_if_exists "$archive_conf"


echo "Archiving $home to $archive_file"
echo "$vhost" >$archive_id
f_excl_ar+=( --exclude ./public_html/gen/archive --exclude ./logs )
if ! run tar "${f_excl_ar[@]}" -C "$home" -zcf "$archive_file" . ; then
  echo "Error: unable to archive the site files" 1>&2
  exit 1
fi

if [ -n "$compat_archive_file" ]; then
  # backwards compatibility for systems not updated to be able to restore
  # files
  tmp_archive_dir="${archive_file%/*}"
  ln -s "${archive_file##*/}" "$tmp_archive_dir/$compat_archive_file"
fi

if [ ! -f "$conf" -a -f "$conf_removed" ]; then
  virtwww_file="$conf_removed"
else
  virtwww_file="$conf"
fi

echo "Copying apache config to $archive_conf"
if ! cp "$virtwww_file" "$archive_conf"; then
  echo "Error: unable to copy apache file '$virtwww_file' to '$archive_conf'" 1>&2
  exit 1
fi

if php_ver=$(get_php_version_from_vhost "$vhost" 2>/dev/null ); then
  echo "php.version = $php_ver" | \
    "$sys_dir/bin/update-ini-file" -q -c "$archive_dir/devpanel.ini"
fi

echo "Archiving $logs_dir to $archive_logs"
if ! run mkdir -p "$archive_dir"; then
  echo "Error: unable to create dir '$archive_dir'" 1>&2
  exit 1
fi

run tar --ignore-failed-read -C "$logs_dir" -zcf "$archive_logs" .
status=$?
if [ $status -ne 0 -a $status -ne 1 ]; then
  echo "Error: unable to archive the log files." 1>&2
  exit 1
fi

echo "Archiving crontab to $archive_crontab"
if crontab_contents=`run_su crontab -l` 2>&1; then
  echo "$crontab_contents" | run tee "$archive_crontab"
  if [ $? -ne 0 ]; then
    echo "Error: unable to archive crontab contents" 1>&2
    exit 1
  fi
else
  touch "$archive_crontab"
fi

if [ $opt_P = 1 ]; then
  echo "Saving shadow to $archive_shadow"
  if ! getent shadow "$user" >"$archive_shadow"; then
    echo "Error: unable to archive shadow file for user '$user'" 1>&2
    exit 1
  fi
  if [ -n "$compat_shadow_file" ]; then
    tmp_shadow_dir="${archive_shadow%/*}"
    ln -s "${archive_shadow##*/}" "$tmp_shadow_dir/$compat_shadow_file"
  fi
fi
