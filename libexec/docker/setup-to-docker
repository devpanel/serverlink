#!/bin/bash

usage() {
  echo "Usage: `basename "$0"` [ OPTIONS ]

  Options:
    -U server_uuid          UUID of the server on devPanel
    -K secret_key           secret key of the server on devPanel
    -A tasks_api_url        URL to use to connect on devPanel
    -N                      just change the config files, don't run the
                            startup script
"
  exit 1
}

error() {
  local msg="$1"

  echo "Error: $msg" 1>&2
  exit 1
}

# main
[ $# -lt 4 ] && usage

getopt_flags='U:K:A:N'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    A)
      tasks_url="$OPTARG"
      ;;
    U)
      server_uuid="$OPTARG"
      ;;
    K)
      secret_key="$OPTARG"
      ;;
    N)
      dont_run=1
      ;;
    *)
      exit 1
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

curr_dir="`dirname "${BASH_SOURCE[0]}"`"
lib_file="`readlink -e "$curr_dir/../../lib/functions"`"
if [ $? -ne 0 ]; then
  error "unable to find the library file to import"
elif ! source "$lib_file"; then
  error "failed to parse library file '$lib_file'"
fi


tasks_url=${tasks_url:-"https://tasks.devpanel.com/"}

if [ -z "$server_uuid" ]; then
  error "missing server uuid (option -U)"
elif [ -z "$secret_key" ]; then
  error "missing secret key (option -K)"
fi

dp_config_file="`readlink -e "$curr_dir/../../etc/devpanel.conf"`"
if [ ! -f "$dp_config_file" ]; then
  error "unable to find config file '$dp_config_file'"
fi

ini_section_replace_key_value "$dp_config_file" taskd api_url "$tasks_url"
ini_section_replace_key_value "$dp_config_file" taskd uuid    "$server_uuid"
ini_section_replace_key_value "$dp_config_file" taskd key     "$secret_key"

init_script="`readlink -e "$curr_dir/start-from-docker"`"
if [ -z "$dont_run" ]; then
  exec "$init_script"
fi
