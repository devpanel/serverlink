#!/bin/bash
# set -x

resolve_local_dir() {
  local base="$1"
  local bin=""
  local bin_path=""
  local dir_name=""

  [ ${#base} -eq 0 ] && return 1

  if [ ${base:0:1} == "/" ]; then
    echo $(dirname "$base")
    return 0
  elif [ ${#base} -gt 2 -a ${base:0:2} == "./" ]; then
    base=${base#./}
    dir_name=$(dirname "$base")
    if [ "$dir_name" == "." ]; then
      echo "$PWD"
    else
      echo "$PWD/$dir_name"
    fi
    return 0
  elif [ ${#base} -gt 2 -a ${base:0:3} == "../" ]; then
    echo $(dirname "$PWD/$base")
  else
    return 1
  fi
}

usage() {
  local prog=$(basename "$0")
  echo
  echo "  Usage: $prog [ -i ] <username>"
  echo "
  Options:
    -i      read password from stdin

  Summary: changes the password for the superuser (id=0) of a server. By
  default a new password is generated. If the -i flag is passed, it uses the
  value received from stdin as the new password
"

  exit 1
}

[ $# -eq 0 ] && usage

if ! dir=$(resolve_local_dir "$0"); then
  echo "Error: unable to resolve local dir" 1>&2
  exit 1
fi
export dir

if ! source "$dir/../lib/functions"; then
  echo "Error: unable to import external functions" 1>&2
  exit 1
fi

getopt_flags="i"
pass_from_stdin=0
while getopts $getopt_flags OPT; do
  case $OPT in 
    i)
      pass_from_stdin=1
      ;;
  esac
done
[ -n "$OPTIND" -a $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

user="$1"
user_id=$(id -u "$user")
status=$?
if [ $status -ne 0 ]; then
  error "unable to get user id. Command id exited $status"
fi

if [ $user_id -ne 0 ]; then
  error "this command should be used to change only the password of superusers (id=0)"
fi

new_pass=""
if [ $pass_from_stdin -eq 1 ]; then
  while [ -z "$new_pass" ]; do
    echo -n "Enter password (stdin): "
    read new_pass
  done
  echo "$user:$new_pass" | chpasswd
  exit $?
else
  "$dir/newpass" "$user"
  exit $?
fi
