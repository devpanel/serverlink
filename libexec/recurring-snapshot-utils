#!/bin/bash

usage_create_recurring_snapshot() {
  local prog=${0##*/}
  
  echo "Usage: $prog <vhost> <frequency>

  Where frequency is daily, weekly or monthly.

  Runs a recurring backup for the specified vhost.
"
  exit 1
}

usage_remove_old_snapshot_files() {
  local prog=${0##*/}
  
  echo "Usage: $prog <vhost>

  Removes recurring backup files for the specified vhost.
"
  exit 1
}

usage_remove_old_snapshots_starter() {
  local prog=${0##*/}
  
  echo "Usage: $prog -Y

  Starts the removal of old recurring backup files from all vhosts on the
  system.
"
  exit 1
}

usage_create_recurring_snapshots_starter() {
  local prog=${0##*/}
  
  echo "Usage: $prog -Y

  Starts the archiving of recurring snapshots for all vhosts on the
  system.
"

  exit 1
}


error() {
  local msg="$1"

  echo "Error: $msg" 1>&2
  exit 1
}

get_epoch_str_for_frequency() {
  local curr_month_str curr_day curr_hour

  read curr_month_str curr_day curr_hour <<< $(date '+%b %d %H')

  date -d "$curr_month_str $curr_day $curr_hour" +%s
}

should_run_backup_now() {
  local frequency="$1"
  local hour="$2"
  local day="$3"
  local day_n

  if [ "$frequency" != daily ]; then
    day_n=$(translate_dayname_to_number "$day" ) || return $?

    if [ -z "$hour" -a -z "$day" ]; then
      if [ -z "$quiet" ]; then
        echo "Skipping: no $frequency snapshots defined for vhost $vhost"
      fi

      return 1
    fi
  fi

  local hour_now day_now day_of_week
  
  read hour_now day_now day_of_week <<< $(date '+%H %d %w')

  # remove leading zero
  if [ "${#hour_now}" -eq 2 -a "${hour_now:0:1}" == "0" ]; then
    hour_now=${hour_now#0}
  fi

  if [ "${#hour}" -eq 2 -a "${hour:0:1}" == "0" ]; then
    hour=${hour#0}
  fi

  if [ "${#day_now}" -eq 2 -a "${day_now:0:1}" == "0" ]; then
    day_now=${day_now#0}
  fi

  if [ -n "$hour" -a "$hour_now" != "$hour" ]; then
    if [ -z "$quiet" ]; then
      echo "Skipping: $frequency backup time is at hour $hour"
    fi
    return 1
  fi

  case $frequency in
    daily)
      if [ -n "$hour" -a "$hour_now" == "$hour" ]; then
        return 0
      else
        return 1 # redundant, but ok
      fi
      ;;
    weekly)
      if [ "$day_of_week" == "$day_n" ]; then
        return 0
      else
        if [ -z "$quiet" ]; then
          echo "Skipping: $frequency backup time is on ${day}s"
        fi

        return 1
      fi
      ;;
    monthly)
      if [ -n "$day_n" -a "$day_now" == "$day_n" ]; then
        return 0
      else
        if [ -z "$quiet" ]; then
          echo "Skipping: $frequency backup happens on ${day}s"
        fi
        return 1
      fi
      ;;
    *)
      return 1
      ;;
  esac

  return 1
}

get_retention_unit_value() {
  local freq="$1"
  local var="v__recurring_snapshots_${freq}__retention_unit"

  if [ -n "${!var}" ]; then
    echo "${!var}"
    return 0
  else
    return 1
  fi
}

cleanup() {
  unlock_path "$vhost_conf_dir"
}

# main

declare -a aux_opts=()
getopt_flags='vqY'
unset quiet verbose confirmed
while getopts $getopt_flags OPTN; do
  case $OPTN in
    q)
      quiet=1
      aux_opts+=( -$OPTN )
      ;;
    v)
      verbose=1
      aux_opts+=( -$OPTN )
      ;;
    Y)
      confirmed=1
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

niceness=19
self_bin=$(readlink -e "$0")
if [ $? -ne 0 ]; then
  error "unable to identify the script path"
fi
self_dir="${self_bin%/*}"
sys_dir="${self_dir%/*}"
lib_file="$sys_dir/lib/functions"
system_cache_dir="$sys_dir/var/cache/vhost"

if ! source "$lib_file"; then
  error "unable to source file $lib_file"
fi
load_devpanel_config || exit $?

system_data_dir=$(get_devpanel_datadir ) || exit 1

# make file expansions return empty when no match is found
shopt -s nullglob

if [ -n "$verbose" -a -n "$quiet" ]; then
  error "-v and -q are conflicting options. Use only one at a time."
fi

op=${0##*/}

case $op in
  ${self_bin##*/})
    error "please don't execute this command directly. Use one of the auxiliary links."
    ;;

  create-recurring-snapshot)
    [ $# -lt 2 -o -z "$1" -o -z "$2" ] && usage_create_recurring_snapshot

    vhost="$1"
    frequency="$2"

    load_vhost_config "$vhost" || exit $?

    case $frequency in
      daily)
        hour="$v__recurring_snapshots_daily__hour"
        ;;
      weekly)
        hour="$v__recurring_snapshots_weekly__hour"
        day="$v__recurring_snapshots_weekly__day"
        ;;
      monthly)
        hour="$v__recurring_snapshots_monthly__hour"
        day="$v__recurring_snapshots_monthly__day"
        ;;
      *)
        error "invalid frequency specified. Valid ones are: daily, weekly or monthly"
        ;;
    esac

    if ! "$self_dir/check-vhost-name" archive "$vhost"; then
      exit 1
    fi
     
    vhost_user="$v__vhost__linux_user"
		vhost_group="$vhost_user"

    tmpl_var="conf__template_strings__vhost_snapshot_${frequency}"

    archive_template_str="${!tmpl_var}"
    vhost_archive_dir=$(get_vhost_archives_dir "$vhost" ) || exit $?

    if ! are_snapshots_enabled_for_vhost "$vhost" "$frequency"; then
      exit 0
    fi

    if ! should_run_backup_now "$frequency" "$hour" "$day"; then
      exit 0
    fi

    cache_dir="$system_cache_dir/$vhost"
    if [ ! -e "$cache_dir" ]; then
      if mkdir -m 750 "$cache_dir"; then
        if ! chown "root:$vhost_group" "$cache_dir"; then
          error "unable to chown $cache_dir"
        fi
      else
        error "unable to create cache dir $cache_dir"
      fi
    fi

    backup_basename=$(translate_archive_placeholders \
                        "$archive_template_str")
    backup_str="@vhost_archive_dir@/$backup_basename"

    archive_file="$vhost_archive_dir/$backup_basename"

    # check exclude files for each frequency
    unset exclude_file
    declare -i n_excl_files=0
    vhost_dir="$v__vhost__linux_user_home"
    for _tmp_freq in daily weekly monthly; do
      _tmp_excl_f="$vhost_dir/.devpanel/recurring-snapshots.exclude-$_tmp_freq"
      if [ -f "$_tmp_excl_f" ]; then
        n_excl_files+=1
        if [ "$frequency" == "$_tmp_freq" ]; then
          exclude_file="$_tmp_excl_f"
        fi
      fi
    done

    # defines 2 cache links:
    #   - one specific for the frequency to record the specific file name
    #   - a 'time' based (epoch_status_link) cache link to avoid duplication
    #     of backups for overlapping times
    epoch_str=$(get_epoch_str_for_frequency)
    epoch_status_link="$cache_dir/backup_snapshot.time.$epoch_str"
    frequency_status_link="$cache_dir/backup_snapshot.$frequency.$epoch_str"

    if [ -L "$epoch_status_link" ]; then
      epoch_link_contents=$(readlink "$epoch_status_link")

      # another frequency of the same hour has already completed a backup
      epoch_status_real_path="$vhost_archive_dir/$epoch_link_contents"
      frequency_status_real_path="$vhost_archive_dir/$epoch_link_contents"

      if [ -f "$epoch_status_real_path" ]; then
        # the epoch file already exists, check if it just needs to duplicate
        #  the frequency status (to avoid duplicating the data)
        #
        #  Will only hardlink if there are no exclude files for the
        #  frequencies (as the exclude files can be different and
        #  generate different backup files)
        if [ $n_excl_files -eq 0 -a \
             ! -e "$frequency_status_link" -a ! -L "$frequency_status_link" ];
          then

          if ln "$epoch_status_real_path" "$archive_file"; then
            if ! ln -s "$backup_basename" "$frequency_status_link" ; then
              error "unable to create frequency link $frequency_status_link"
            fi

            [ -z "$quiet" ] && echo "Successfully created (hardlinked) $archive_file"
            exit 0
          else
            error "unable to link '$epoch_status_real_path' to '$archive_file'"
          fi
        fi
      else # broken $epoch_link_status
        echo "Warning: broken time link $epoch_link_status, removing..." 1>&2
        sleep 1
        if ! rm -f "$epoch_link_status"; then
          error "unable to remove link $epoch_link_status"
        fi
      fi
    fi

    if [ -L "$frequency_status_link" ]; then
      freq_link_contents=$(readlink "$frequency_status_link")
      freq_real_path="$vhost_archive_dir/$freq_link_contents"

      if [ -f "$freq_real_path" ]; then
        if [ ! -L "$epoch_status_link" ]; then
          # try to fix missing epoch link
          if ! cp -P "$frequency_status_link" "$epoch_status_link"; then
            echo "Warning: failed to copy $frequency_status_link to $epoch_status_link" 1>&2
          fi
        fi

        if [ -z "$quiet" ]; then
          echo "Warning: file exists $freq_real_path" 1>&2
          msg="recurring $frequency backup already done"
          msg+=" for $vhost (no need to do it again now)"
          echo "Warning: $msg" 1>&2
        fi

        exit 0
      else
        echo "Warning: stale link exists $frequency_status_link, removing..." 1>&2
        sleep 1
        if ! rm -f "$frequency_status_link"; then
          error "unable to remove link $frequency_status_link"
        fi
      fi
    fi

    # no archive for the same frequency exists, go and archive it
    nice -n $niceness "$self_dir/archive-vhost" \
      ${exclude_file:+-e $exclude_file} "$vhost" "$backup_str"

    snap_st=$?

    if [ $snap_st -eq 0 ]; then
      if ln -s "$backup_basename" "$frequency_status_link"; then
        if ! ln -s "$backup_basename" "$epoch_status_link"; then
          error "unable to create epoch status link $epoch_status_link"
        fi
      fi
    fi

    # Run the post_cmd hook command.
    #
    # It runs regardless if the snapshot succeeded or not.
    # So it's up to the script to check for the exit code variable, if
    # needed.
    unset post_run_cmd
    if [ -n "$v__recurring_snapshots__post_run_cmd" ]; then
      # check first for a vhost specific command
      post_run_cmd="$v__recurring_snapshots__post_run_cmd"
    elif [ -n "$lamp__recurring_snapshots__post_run_cmd" ]; then
      # fallback to a global system command, if any
      post_run_cmd="$lamp__recurring_snapshots__post_run_cmd"
    fi

    if [ -n "$post_run_cmd" ]; then
      {
        DEVPANEL_VHOST=$vhost                             \
        DEVPANEL_SNAPSHOT_EXIT_CODE=$snap_st              \
        DEVPANEL_SNAPSHOT_FREQUENCY=$frequency            \
        DEVPANEL_SNAPSHOT_DAY=$day                        \
        DEVPANEL_SNAPSHOT_HOUR=$hour                      \
        DEVPANEL_SNAPSHOT_FILE=$archive_file            ; \
        eval "$post_run_cmd"
      }
    fi

    exit $snap_st
    ;;
  remove-old-snapshot-files)
    [ $# -lt 1 -o -z "$1" ] && usage_remove_old_snapshot_files

    vhost="$1"

    if ! "$self_dir/check-vhost-name" archive "$vhost"; then
      exit 1
    fi

    load_vhost_config "$vhost" || exit $?

    if [ -n "$verbose" ]; then
      echo "Evaluating vhost $vhost..."
    fi

    vhost_conf_dir="$v__vhost__config_dir"
    vhost_archive_dir=$(get_vhost_archives_dir "$vhost" ) || exit $?
    cache_dir="$system_cache_dir/$vhost"

    if [ ! -d "$cache_dir" ]; then
      exit 0
    fi

    if ! lock_path "$vhost_conf_dir" >/dev/null; then
      error "unable to lock vhost dir $vhost_conf_dir"
    fi
    trap 'cleanup' EXIT

    for frequency in daily weekly monthly; do
      keep_n=$(get_retention_unit_value "$frequency")
      if [ -z "$keep_n" ]; then
        if [ -n "$verbose" ]; then
          echo "Skipping: no retention policy defined for $frequency on vhost $vhost" 1>&2
        fi

        continue
      else
        if [ -n "$verbose" ]; then
          msg="Retention policy defines to keep $keep_n files for"
          msg+=" $frequency backups..."
          echo "$msg" 1>&2
        fi
      fi

      declare -a curr_list=()
      cache_list_ar=( $(echo "$cache_dir/backup_snapshot.$frequency."* | \
                           tr ' ' '\n' | sort -V ) )
      n_files=${#cache_list_ar[@]}
      if [ $n_files -eq 0 ]; then
        if [ -n "$verbose" ]; then
          echo "Warning: no backup files for frequency $frequency on vhost $vhost" 1>&2
        fi
        continue
      fi

      if [ $n_files -le $keep_n -a -n "$verbose" ]; then
        # written as a separate 'if' just to display the verbose msg
        tmp_msg="Skipping: retention defines $keep_n files to be kept, "
        tmp_msg+="but only $n_files files found for $frequency backups"
        echo "$tmp_msg" 1>&2
        continue
      fi

      declare -i n_curr=-1
      while [ $(( $n_files - $n_curr - 1 )) -gt $keep_n -a $n_curr -lt $n_files ]; do
        n_curr=$(( $n_curr + 1 ))
        cache_link=${cache_list_ar[$n_curr]}
        if [ ! -L "$cache_link" ]; then
          if [ -n "$verbose" ]; then
            echo "Skipping: missing cache link on index $n_curr ($cache_link)" 1>&2
          fi

          continue
        fi

        target=$(readlink "$cache_link")
        if [ $? -eq 0 ]; then
          target=${target##*/}
        else
          [ -z "$quiet" ] && echo "Warning: unable to dereference $cache_link" 1>&2
          if [ -n "$verbose" ]; then
            echo "Skipping: failed to dereference cache link $cache_link" 1>&2
          fi

          continue
        fi

        file_path="$vhost_archive_dir/$target"
        if rm -f "$cache_link" && [ -n "$verbose" ]; then
          echo "Removed $cache_link"
        fi

        if rm -f "$file_path"{,.md5,.sha1} && [ -n "$verbose" ]; then
          echo "Removed $file_path"
        fi

        epoch_str=${cache_link##*.}
        epoch_str=${epoch_str##*/}
        time_link="$cache_dir/backup_snapshot.time.$epoch_str"
        if [ -L "$time_link" ] && rm -f "$time_link"; then
          [ -n "$verbose" ] && echo "Removed $time_link"
        fi

      done
    done
    ;;

  create-recurring-snapshots-starter)
    [ -z "$confirmed" ] && usage_create_recurring_snapshots_starter

    # cycle through the list of vhosts creating snapshots for each time
    for freq in daily weekly monthly; do
      for vhost in $(get_list_of_vhosts); do
        "$self_dir/create-recurring-snapshot" "${aux_opts[@]}" "$vhost" "$freq"
      done
    done
    ;;

  remove-old-snapshots-starter)
    [ -z "$confirmed" ] && usage_remove_old_snapshots_starter
    # cycle through the list of vhosts executing remove-old-snapshot-files
    for vhost in $(get_list_of_vhosts); do
      "$self_dir/remove-old-snapshot-files" "${aux_opts[@]}" "$vhost"
    done
    ;;

  *)
    error "unknown command specified"
    ;;
esac
