#!/usr/bin/perl -w
# webenabled custom shell to be set as r_we root user's shell
use strict;
use Text::ParseWords;
use File::Basename;
use Fcntl ':flock';
my $log = "/var/log/webenabled.log";
$|++;
my $dir = dirname $0;
die "Directory not found\n" unless -d $dir;
$ENV{PATH}='/bin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin';

my @allowed_basename = qw(
  audit-entries
  archive-vhost
  check-vhost-name
  chpass-user
  chpass-vhost
  chpass-vhost-drupal
  chpass-vhost-joomla
  chpass-vhost-subsystem
  clone-vhost-local
  config-vhost-names
  config-vhost-names-default
  config-auth-get
  config-auth-keygen
  mysql-password-vhost
  htaccess-lock-vhost
  htaccess-unlock-vhost
  htaccess-lock-status-vhost
  crontab-vhost-get
  crontab-vhost-edit
  git-import
  wget-vhost
  command-cp
  command-tar
  command-rm
  list-vhost-names
  list-vhost-names-default
  lock-vhost
  manage-git
  public-key-vhost
  remove-vhost
  restore-vhost
  unlock-vhost
  svn-cwco
  archive-vhost-action
  archive-vhost-list
  archive-vhost-transfer
  archive-vhost-store
  export-vhost
  import-vhost
  phpmyadmin-token
  rawlogs-list
  drush
  drush-we
  config-vhost-quota
  check-disk-quota
  config-vhost-subsystem
  config-auth-tmp-keygen
  config-auth-tmp-authorized_keys
  remove-auth-tmp-private
  remove-auth-tmp-authorized_keys
  archive-vhost-multiserver-proxy
  clone-vhost-proxy
  webenabled-version
  config-vhost-ssl-disable
  config-vhost-ssl-key
  config-vhost-ssl-ca-cert
  config-vhost-ssl-cert
  run-vhost-shell
  run-root-shell
  client-unpriv
);

sub _validate_user {
  my ($user) = @_;
  if(length($user) > 0 && length($user) <= 8 && $user =~ /^[a-zA-Z0-9_]+$/) {
    return 1;
  } else {
    warn "_validate_user(): user must be at max 8 characters, and be composed of letters, numbers or underscores\n";
    return 0;
  }
}

sub _validate_group {
  my ($group) = @_;
  if(length($group) > 0 || length($group) <= 8 && $group =~ /^[a-zA-Z0-9_]+$/) {
    return 1;
  } else {
    warn "_validate_group(): target group must be at max 8 characters, and be composed of letters, numbers or underscores\n";
    return 0;
  }
}

sub _drop_privs {
  my($uid, $gid) = @_;

  undef($!); # undefine errno, if defined it'll interfere with getting the status of setuid and setgid
  $( = $) = $gid;  # setgid(); equivalent
  if($!) {
    warn "_drop_privs(): Unable to setgid() to target_group: $!\n";
    return 0;
  }

  $< = $> = $uid;  # setuid(); equivalent
  if($!) {
    warn "_drop_privs(): Unable to setuid() to target_user: $!\n";
    return 0;
  }

  return 1;
}

sub writelog
{
  my $message = shift;
  local *F;
  open F, ">> $log" or die $!;
  flock F, LOCK_EX or die $!;
  seek F, 0, 2 or die $!;
  print F scalar(localtime), " pid $$: ", $message;
  print F "\n" unless $message =~ /\n$/;
  flock F, LOCK_UN or die $!;
  close F;
}

sub error
{
  my $message = shift;
  writelog "ERROR: $message";
  die $message;
}

error "This account should not be accessed directly\n" if @ARGV != 2 || $ARGV[0] ne '-c';
my ($basename, @cmdline) = shellwords($ARGV[1]);
writelog "called from $ENV{SSH_CLIENT} as ". join(" ", map { "'$_'" } $basename, @cmdline);
$basename =~ s/-wrapper$// if defined $basename;
error "Invalid command\n" unless defined $basename && $basename ne '';

my(@user_params, @group_params, $target_user, $target_group, $target_uid, $target_gid);
my $unprivileged = 0;

if($basename eq 'client-unpriv') {
  # client-unpriv(0) target_user(1) target_group(2) cmd(3) args(4)
  if($#cmdline < 2) {
    error "Insufficient parameters for unprivileged client";
  }

  $target_user  = shift(@cmdline);
  $target_group = shift(@cmdline);
  $basename     = shift(@cmdline);

  if(!_validate_user($target_user)) {
    error "invalid username format.\n";
  } elsif($target_group ne "-" && !_validate_group($target_group)) {
    error "invalid group format.\n";
  }

  if(!(@user_params = getpwnam($target_user))) {
    error "unable to get information about the unprivileged user.\n";
  } elsif($target_group ne "-" && !(@group_params = getgrnam($target_group))) {
    error "unable to get information about the unprivileged group.\n";
  }
  $unprivileged = 1;
}

error "Permission denied (2)\n" unless grep { $_ eq $basename } @allowed_basename;

my $command;
if(-x "$dir/$basename" && !$unprivileged) {
  $command = "$dir/$basename";
} elsif(-x "$dir/../bin/$basename" && $unprivileged) {
  $command = "$dir/../bin/$basename";
} else {
  error "Permission denied (1)\n";
}

writelog "starting $basename";
my $pid = fork;
error "Cannot fork" unless defined $pid;
unless ($pid)
{
  if($unprivileged) {
    $target_uid = $user_params[2];
    $target_gid = $target_group eq "-" ? $user_params[3] : $group_params[2];

    if(!_drop_privs($target_uid, $target_gid)) {
      error "unable to drop privileges.\n";
    }

    $ENV{'USER'} = $ENV{'LOGNAME'} = $target_user;
    $ENV{'HOME'} = $user_params[7];
    if(-d "/tmp/.private/$target_user") {
      $ENV{'TMP'} = $ENV{'TMPDIR'} = "/tmp/.private/$target_user";
    } else {
      $ENV{'TMP'} = $ENV{'TMPDIR'} = "/tmp";
    }

    chdir($ENV{'HOME'});
  }

  exec { $command } ($command, @cmdline);
  exit $?;
}

wait;
my $status=$?;
writelog "$basename terminated with status $status";
exit 1 if $status;
