#!/bin/bash

usage() {
  local op="$1"

  local -A msgs=(
  [default]="
Usage: ${0##*/} <op> [args]

  Known operations:
    enable
    disable
    cron
"

  [enable]="
Usage: ${0##*/} $op <vhost>

  Enables Let's Encrypt and issues a new certificate for the 
  specified vhost (with the domains currently added to the domain).
"

  [disable]="
Usage: ${0##*/} $op <vhost>

  Disables Let's Encrypt for the specified vhost.
"

  )

  if [ -z "$op" ]; then
    echo "${msgs[default]}"
  elif [ -n "${msgs[$op]}" ]; then
    echo "${msgs[$op]}"
  else
    echo "Error: unknown operation" 1>&2
  fi

  exit 1
}

is_lets_encrypt_enabled_for_vhost() {
  local vhost="$1"

  local enabled

  enabled=$(get_vhost_key_value apache_vhost:_:config:lets_encrypt "$vhost" 2>/dev/null)
  if [ -n "$enabled" ]; then
    return 0
  else
    return 1
  fi
}

disable_lets_encrypt_for_vhost() {
  local vhost="$1"

	echo "rm apache_vhost:_:config:lets_encrypt" | \
    "$sys_dir/libexec/apache-metadata-handler" -q "$vhost"
}

set_lets_encrypt_metadata_for_vhost() {
  local vhost="$1"

  echo "set apache_vhost:_:config:lets_encrypt yes" | \
    "$sys_dir/libexec/apache-metadata-handler" -q "$vhost"
}

cleanup() {
	if [ -n "$moved_htaccess" ]; then
		su -l -s /bin/bash -c "mv -n $htaccess_file_moved $htaccess_file"
  fi
}

# main
[ -z "$1" ] && usage

declare -a acme_args

self_bin=`readlink -e "$0"`
if [ $? -ne 0 ]; then
  echo "Error: unable to get self path" 1>&2
  exit 1
fi

self_dir="${self_bin%/*}"
sys_dir="${self_dir%/*}"

lib_f="$sys_dir/lib/functions"
if ! . "$lib_f"; then
  echo "Error: unable to import $lib_f" 1>&2
  exit 1
fi

acme_bin="$sys_dir/bin/packages/acme.sh/acme.sh"
if [ ! -f "$acme_bin" -a -x "$acme_bin" ]; then
  error "missing executable binary file at $acme_bin"
fi

hash -p "$acme_bin" acme.sh

op="$1"
shift

umask 022

case "$op" in
  enable)
    [ $# -lt 1 -o -z "$1" ] && usage "$op"

    vhost="$1"
    shift

    if ! "$sys_dir/libexec/check-vhost-name" archive "$vhost"; then
      exit 1
    fi

    server_base_domain=$(get_server_base_domain) || exit 1

    certs_dir="$sys_dir/config/vhosts/$vhost/lets-encrypt"
    if [ -d "$certs_dir" ]; then
      chmod 700 "$certs_dir"
    else
      if ! mkdir -m 700 "$certs_dir"; then
        error "unable to create directory '$certs_dir'"
      fi
    fi

    acme_args+=( --home "$certs_dir" --renew-hook "$self_bin post-renew" )

    public_dir=$(eval echo -n \~w_$vhost/public_html/$vhost)
    if [ ! -d "$public_dir" ]; then
      error "public directory not found: $public_dir"
    fi

    tmp_domains=$(get_hostnames_from_vhost "$vhost")
    if [ $? -ne 0 ]; then
      error "unable to get domains from vhost $vhost"
    fi

    declare -a domain_args=()
    unset first_domain
    for tmp_domain in $tmp_domains; do
      if [[ "$tmp_domain" == *.$server_base_domain ]]; then
        continue
      else
        if [ ${#domain_args[@]} -eq 0 ] ; then
          first_domain="$tmp_domain"
        fi
        domain_args+=( -d "$tmp_domain" )
      fi
    done
      
    if [ ${#domain_args[@]} -eq 0 ]; then
      error "vhost '$vhost' doesn't have any custom domain. Need to add one first before using Let's Encrypt"
    fi

		trap cleanup EXIT

    htaccess_file="$public_dir/.htaccess"
    htaccess_file_moved="$htaccess_file.${RANDOM}_${RANDOM}"

		# if the .htaccess file exists, then move it out temporarily because
    # many apps have .htaccess rules that block the web validation of Let's
    # Encrypt. Will be brought back after the certificate generation
    unset moved_htaccess
    if [ -f "$htaccess_file" ]; then
      su -l -s /bin/bash -c "mv -n $htaccess_file $htaccess_file_moved" "w_$vhost"
      if [ $? -eq 0 ]; then
        moved_htaccess=1
      fi
    fi

    # the first domain on command line is the one used as the name of the
    # directory that stores the certificates
    cert_dir="$certs_dir/$first_domain"
    ca_file="$cert_dir/ca.cer"
    ca_bundle_file="$cert_dir/fullchain.cer"
    csr_file="$cert_dir/$first_domain.csr"
    cert_file="$cert_dir/$first_domain.cer"
    priv_key_file="$cert_dir/$first_domain.key"

    acme.sh --issue --force "${acme_args[@]}" \
         -w "$public_dir" "${domain_args[@]}"

    if [ $? -eq 0 ]; then
      set_lets_encrypt_metadata_for_vhost "$vhost"

      for tmp_ext in conf key header; do
        if ls "$certs_dir/"*.$tmp_ext &>/dev/null; then
          chmod 600 "$certs_dir/"*.$tmp_ext
        fi

        if ls "$certs_dir/ca/"*.$tmp_ext &>/dev/null; then
          chmod 600 "$certs_dir/ca/"*.$tmp_ext
        fi
      done

      chmod 600 "$priv_key_file"
      chmod 644 "$ca_file" "$ca_bundle_file" "$csr_file" "$cert_file"
    else
      error "unable to generate certificate"
    fi

    echo
    echo "Configuring certificates on Apache..."
     
    "$sys_dir/libexec/apply-ssl-config" -C "$ca_bundle_file" \
      -c "$cert_file" -k "$priv_key_file" "$vhost"
    ;;

  cron)
    for vhost in $(get_list_of_vhosts); do
      if is_lets_encrypt_enabled_for_vhost "$vhost"; then
        le_dir="$sys_dir/config/vhosts/$vhost/lets-encrypt"
        if [ -d "$le_dir" ]; then
          acme.sh --home "$le_dir" --cron
        fi
      fi
    done

    exit 0
    ;;

  post-renew)
    assign_deref_os_prop_or_exit apache_service "$sys_dir" \
      names/apache_service_name

    services_bin="$sys_dir/libexec/system-services"

    $services_bin $apache_service reload
    ;;

  disable)
    [ $# -lt 1 -o -z "$1" ] && usage "$op"

    vhost="$1"

    if ! "$sys_dir/libexec/check-vhost-name" archive "$vhost"; then
      exit 1
    fi

    if ! is_lets_encrypt_enabled_for_vhost "$vhost"; then
      echo "Warning: Let's Encrypt is not enabled for this vhost." 1>&2
      exit 0
    fi

    "$self_dir/disable-ssl-config" "$vhost"
    if [ $? -ne 0 ]; then
      error "unable to disable SSL config for vhost $vhost"
    fi

		if ! disable_lets_encrypt_for_vhost "$vhost"; then
			error "unable to remove Let's Encrypt metadata for vhost $vhost"
		fi

		exit 0
    ;;
  *)
    usage
    ;;
esac
