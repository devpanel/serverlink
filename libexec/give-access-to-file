#!/bin/bash

usage() {
  echo "Usage: $0 <user> <file> <out_fifo> [download_basename]

  This script gives temporary read access for a user to files that are not
  directly readable through the filesystem. It sends the file contents to a
  named pipe that is readable by the user. It has a defined timeout, that
  closes the process if the named pipe is not yet in use after a certain
  time.

"
  exit 1
}

[ $# -lt 3 -o -z "$1" -o -z "$2" -o -z "$3" ] && usage

self_bin=$(readlink -e "$0")
if [ $? -ne 0 ]; then
  echo "Error: unable to detect self path" 1>&2
  exit 1
fi
self_dir=${self_bin%/*}
sys_dir=${self_dir%/*}
lib_file="$sys_dir/lib/functions"

if ! source "$lib_file"; then
  echo "Error: unable to source file $lib_file"
  exit 1
fi

user="$1"
file="$2"

if ! getent passwd "$user" &>/dev/null; then
  exit 1
fi

user_home=$(eval echo \~$user)
if [ $? -ne 0 -o -z "$user_home" ]; then
  error "unable to determine home directory for user $user"
fi

out_fifo="$3"

# convenience feature: replace @user_home@ in the fifo
out_fifo=${out_fifo//@user_home@/$user_home}

out_fifo_esc=${out_fifo//\//-} # replace slashes(/) with dash(-)

download_basename="${4##*/}" # optional

assign_deref_os_prop_or_exit server_domain "$sys_dir" apache_virtwww_domain
assign_deref_os_prop_or_exit admin_apps_base_url "$sys_dir" admin_apps_base_url

if [ ! -f "$file" ]; then
  error "file path is not a regular file: $file"
fi
file_basename=${file##*/}

if [ -e "$out_fifo" ]; then
  error "named pipe $out_fifo is already created." 1>&2
fi

app="download-file"
token=$(su -l -s /bin/bash \
        -c "$sys_dir/bin/create-perl-cgi-session -o -e +5m \
        -P file=$out_fifo -P devpanel_app=$app \
       ${download_basename:+-P download_basename=$download_basename}" \
         "$user")

if [ $? -ne 0 -o -z "$token" ]; then
  error "unable to create session for web app"
fi

file_url="$admin_apps_base_url?token=$token"

file_url=${file_url//@server_domain@/$server_domain}
file_url=${file_url//@app_name@/$app}

monitoring_pid_file="$sys_dir/var/tmp/$out_fifo_esc.pid"

# create a fifo and cat the file contents to it. When the user accesses the
# URL the app will read from this fifo
(
  su -s /bin/bash -c "
    umask 0077

    if [ ! -p \"$out_fifo\" ] && ! mkfifo $out_fifo; then
      exit 1
    fi

    trap 'rm -f $out_fifo' EXIT

    cat >$out_fifo
  " "$user" < "$file"

  monitoring_pid=$(egrep -s -m 1 -o '^[0-9]+$' $monitoring_pid_file)
  if [ $? -eq 0 ]; then
    if kill -0 $monitoring_pid 2>/dev/null; then
      kill $monitoring_pid
    fi
  fi
) &
child_pid=$!

if ! kill -0 $child_pid; then
  error "child (PID: $child_pid) already exited"
fi

# start a monitoring process
# if after 5 minutes, no process is using the $out_fifo, then exit
( 
  trap '[ -f "$monitoring_pid_file" ] && rm -f -- $monitoring_pid_file' EXIT

  sleep 300
  if [ ! -e "$out_fifo" ]; then
    exit 0 # file is gone, just exit
  fi

  if ! fuser -s $out_fifo; then
    kill -0 $child_pid 2>/dev/null && kill $child_pid
  fi
) &

monitoring_pid=$!
echo "$monitoring_pid" >$monitoring_pid_file
echo "$file_url"
