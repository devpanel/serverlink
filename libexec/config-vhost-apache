#!/bin/bash
error() { echo "ERROR${@+: }$@" >&2; exit 1; }

usage() {
  local prog=`basename "$0"`
  echo "
  Usage: $prog [options] <vhost>

  Options:
    -D        disable the specified vhost
    -n        only write the config file, but don't restart apache

  This script generates the Apache configuration file for the specified
  vhost.
"

  exit 1
}

run()
{
  echo "  running $@"
  "$@"
}

format_hostname() {
  local server_hostname="$1"
  local local_hostname="$2"
  local hostname_stripped="" new_hostname=""

  # remove the server hostname from the end of name
  hostname_stripped=${local_hostname%$server_hostname}
  if [ "$hostname_stripped" == "$local_hostname" ]; then
    # is not a simple alias to the host domain...add a dot
    # to the end of the name
    new_hostname+="${local_hostname}."
  else
    new_hostname="$hostname_stripped"
  fi

  echo -n "$new_hostname"
}

get_vhost_data_link() {
  local base_dir="$1"
  local vhost="$2"
  local vhost_sym_name="$3"
  local tmpl_name="$4"
  local p_prefix="$5"
  local p_name="$6"

  local data_link=""

  local config_dir="$base_dir/config/vhosts/$vhost"
  local config_prefix="$config_dir/apache_vhost"

  local apache_svc_dir="$base_dir/config/packages/apache_vhost"
  local apache_svc_tmpl_dir="$apache_svc_dir/templates/$tmpl_name"

  local local_params_dir="$apache_svc_dir/local"

  local local_tmpl_dir="$apache_svc_dir/local/templates/$tmpl_name"

  local vhost_name_link="$config_prefix:_:name:$vhost_sym_name"
  local vhn=`deref_contents "$vhost_name_link"`

  local this_vhost_prefix="$config_prefix:$vhn"


  # checks for these parameters in the following order:
  # 1) vhost specific definition
  # 2) local template definition
  # 3) local server definition
  # 4) template shipped definion
  # 5) default shipped definion
  #
  # checks:
  #        config/vhosts/<vhost_name>/<vhost_prefix>:<param>
  #        config/packages/apache_vhost/local/<tmpl>/<param>
  #        config/packages/apache_vhost/local/<param>
  #        config/packages/apache_vhost/templates/<tmpl>/<param>
  #        config/packages/apache_vhost/<param>

  local p_link

  for p_link in \
    "$this_vhost_prefix:$p_prefix:$p_name" \
    "$local_tmpl_dir/$p_prefix:$p_name" \
    "$local_params_dir/$p_prefix:$p_name" \
    "$apache_svc_tmpl_dir/$p_prefix:$p_name" \
    "$apache_svc_dir/$p_prefix:$p_name"; do

    if [ -L "$p_link" ]; then
      data_link="$p_link"
      break
    fi
  done

  if [ -n "$data_link" ]; then
    echo -n "$data_link"
    return 0
  else
    return 1
  fi
}

get_vhost_metadata_link() {
  local base_dir="$1"
  local vhost="$2"
  local vhost_sym_name="$3"
  local tmpl_name="$4"
  local p_name="$5"

  local p_prefix="_"

  get_vhost_data_link "$base_dir" "$vhost" "$vhost_sym_name" "$tmpl_name" \
                      "$p_prefix" "$p_name"

}

get_vhost_param_link() {
  local base_dir="$1"
  local vhost="$2"
  local vhost_sym_name="$3"
  local tmpl_name="$4"
  local p_number="$5"
  local p_name="$6"

  local p_prefix="param:$p_number"

  get_vhost_data_link "$base_dir" "$vhost" "$vhost_sym_name" "$tmpl_name" \
                      "$p_prefix" "$p_name"

}

get_template_file() {
  local base_dir="$1"
  local vhost="$2"
  local vhost_sym_name="$3"

  local config_dir="$base_dir/config/vhosts/$vhost"
  local config_prefix="$config_dir/apache_vhost"

  local apache_svc_dir="$base_dir/config/packages/apache_vhost"

  local local_tmpl_dir="$apache_svc_dir/local/templates"
  local tmpl_dir="$apache_svc_dir/templates"
  local vhost_name_link="$config_prefix:_:name:$vhost_sym_name"

  local vhn=`deref_contents "$vhost_name_link"`

  local vhost_prefix="$config_prefix:$vhn"

  # 'template' is a special variable
  # as it's used below, and not set as a variable
  if [ -L "$vhost_prefix:_:template" ]; then
    local template_link="$vhost_prefix:_:template"
    local vhost_template=`deref_contents "$template_link"`
    if [ $? -ne 0 ]; then
      echo "$FUNCNAME(): error - unable to get vhost template name" 1>&2
      return 1
    fi
  elif [ -L "$vhost_prefix:_:template_ref" ]; then
    local tmpl_ref_name=`deref_contents "$vhost_prefix:_:template_ref"`
    if [ $? -eq 0 ]; then
      vhost_template=`deref_os_prop "$we_base_dir" "$tmpl_ref_name"`
    else
      echo "$FUNCNAME(): error - unable to de-reference template for vhost $vhn" 1>&2
      return 1
    fi
  else
    echo "$FUNCNAME(): error - no template is defined for vhost $vhn" 1>&2
    return 1
  fi

  # rename the variable below, use a dedicated variable for apache_svc
  local tmpl_basename=`basename "$vhost_template"`
  local local_template="$local_tmpl_dir/$tmpl_basename/template.contents"
  local template_file="$tmpl_dir/$tmpl_basename/template.contents"

  if [ -f "$local_template" ]; then
    template_file="$local_template"
  elif [ ! -f "$template_file" ]; then
    echo "$FUNCNAME(): error - missing template file '$template_file'" 1>&2
    return 1
  fi

  echo -n "$template_file"
}

get_template_include_file() {
  local base_dir="$1"
  local tmpl_name="$2"

  local apache_svc_dir="$base_dir/config/packages/apache_vhost"

  local local_tmpl_dir="$apache_svc_dir/local/templates/$tmpl_name"
  local tmpl_local_file="$local_tmpl_dir/template.contents"

  local tmpl_dir="$apache_svc_dir/templates/$tmpl_name"
  local tmpl_file="$tmpl_dir/template.contents"

  if [ -f "$tmpl_local_file" ]; then
    tmpl_file="$tmpl_local_file"
  elif [ ! -f "$tmpl_file" ]; then
    error "missing template $tmpl_file, when parsing $vhost_name"
  fi

  echo -n "$tmpl_file"
}

get_list_of_items() {
  local base_dir="$1"
  local vhost="$2"
  local vhost_sym_name="$3"
  local tmpl_name="$4"
  local p_prefix="$5"

  local data_link=""

  local config_dir="$base_dir/config/vhosts/$vhost"
  local config_prefix="$config_dir/apache_vhost"

  local apache_svc_dir="$base_dir/config/packages/apache_vhost"
  local apache_svc_tmpl_dir="$apache_svc_dir/templates/$tmpl_name"

  local local_params_dir="$apache_svc_dir/local"

  local local_tmpl_dir="$apache_svc_dir/local/templates/$tmpl_name"

  local vhost_name_link="$config_prefix:_:name:$vhost_sym_name"
  local vhn=`deref_contents "$vhost_name_link"`

  local this_vhost_prefix="apache_vhost:$vhn"


  # checks for these parameters in the following order:
  # 1) vhost specific definition
  # 2) local template definition
  # 3) local server definition
  # 4) template shipped definion
  # 5) default shipped definion
  #
  # checks:
  #        config/vhosts/<vhost_name>/<vhost_prefix>:<param>
  #        config/packages/apache_vhost/local/<tmpl>/<param>
  #        config/packages/apache_vhost/local/<param>
  #        config/packages/apache_vhost/templates/<tmpl>/<param>
  #        config/packages/apache_vhost/<param>

  local items_str="" tmp_str
  for tmp_str in "$config_dir/$this_vhost_prefix:$p_prefix"* \
                 "$local_tmpl_dir/$p_prefix"* \
                 "$local_params_dir/$p_prefix"* \
                 "$apache_svc_tmpl_dir/$p_prefix"* \
                 "$apache_svc_dir/$p_prefix"*; do
     [ ! -L "$tmp_str" ] && continue

     items_str+="$tmp_str"$'\n'
  done

  if [ -n "$items_str" ]; then
    echo -n "$items_str"
    return 0
  else
    return 1
  fi
}

cleanup() {

  [ -n "$tmp_new_vhost_file" ] && rm -f -- "$tmp_new_vhost_file"
  [ -n "$vhost_bkp_file" ] && rm -f -- "$vhost_bkp_file"

  unlock_path "$virtwww_dir"
}

# main

[ $# -eq 0 -o -z "$1" ] && usage

dir=`dirname "$0"`

restart_apache=1
getopt_flags='nD'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    D)
      disable_vhost=1
      ;;
    n)
      unset restart_apache
      ;;
    *)
      exit 1
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

[ $# -eq 0 -o -z "$1" ] && usage # yes, again

vhost="$1"
user="w_$vhost"

"$dir/check-vhost-name" name-only "$vhost" || error

we_base_dir=`readlink -e "$dir/.."`

lib_file="$we_base_dir/lib/functions"
vars_file="$we_base_dir/lib/variables"

shopt -s nullglob

for inc_file in "$lib_file" "$vars_file"; do
  if ! source "$inc_file"; then
    error "unable to source file '$inc_file'"
  fi
done

user_home=$(eval echo -n \~"$user")
if [ $? -ne 0 -o -z "$user_home" ]; then
  error "unable to get home directory of user '$user'"
fi

assign_deref_os_fs_path_ex_or_exit apachectl "$we_base_dir" pathnames/sbin/apachectl
assign_deref_os_fs_path_ex_or_exit virtwww_dir "$we_base_dir" pathnames/etc/apache_vhosts
assign_deref_os_prop_or_exit websites_basedir "$we_base_dir" apache_virtwww_homedir

if [ -f "$apachectl" -a -x "$apachectl" ]; then
  hash -p "$apachectl" apachectl
else
  error "problem with $apachectl, doing nothing."
fi

if ! lock_path "$virtwww_dir" >/dev/null; then
  error "Apache configuration is locked. There should have"\
 "another process running."
fi
trap 'exit 1' HUP INT QUIT ILL TRAP ABRT BUS FPE KILL SEGV \
              PIPE STOP ALRM TERM
trap 'cleanup' EXIT

if ! apachectl configtest &>/dev/null; then
  error "Apache configuration is broken. Please check it."
fi

virtwww_file="$virtwww_dir/$user.conf"
virtwww_file_old="$virtwww_file.old"
config_dir="$we_base_dir/config/vhosts/$vhost"
apache_svc_config_dir="$we_base_dir/config/packages/apache_vhost"

if [ -n "$disable_vhost" ]; then
  if [ -f "$virtwww_file" ]; then
    mv -f "$virtwww_file" "$virtwww_file.removed"
    if [ $? -eq 0 ]; then
      apachectl graceful
      if [ $? -eq 0 ]; then
        echo "Successfully disabled vhost $vhost"
        exit 0
      else
        error "apache configuration is broken. Failed to disable."
      fi
    else
      error "unable to move out $virtwww_file"
    fi
  else
    error "Error: didn't file virtwww file $virtwww_file. Aborted."
  fi
fi

if get_metadata_value "$config_dir" "$DEVPANEL_VHOST_LOCK_FLAG" &>/dev/null; then
  error "vhost $vhost is locked. Can't work on a locked vhost."
fi

unset is_htpasswd_locked
if get_metadata_value "$config_dir" "$DEVPANEL_VHOST_HTPASSWD_LOCK_FLAG" &>/dev/null; then
  if ! htpasswd_tmpl_name=`deref_os_prop "$we_base_dir" names/apache_htpasswd_template`; then
    error "couldn't get htpasswd template name"
  fi

  is_htpasswd_locked=1
fi

tmp_new_vhost_file=`mktemp "$virtwww_file.XXXXXXXXXXXXXXX"`
if [ $? -ne 0 ]; then
  error "unable to create temporary file"
fi

vhost_bkp_file=`mktemp "$virtwww_file.bkp.XXXXXXXXXXXXXXX"`
if [ $? -ne 0 ]; then
  error "unable to create a temporary backup file"
fi

if [ -f "$virtwww_file" ] && ! cat "$virtwww_file" > "$vhost_bkp_file"; then
  error "unable to write a copy of '$virtwww_file' into '$vhost_bkp_file'"
fi

if ! server_hostname=`deref_os_prop "$we_base_dir" apache_virtwww_domain`; then
  error "unable to default domain name for apache virtual host"
fi

declare -i n_vhosts=0
vhost_prefix_f="$config_dir/apache_vhost"
system_templates_prefix="$apache_svc_config_dir/template"

declare -a super_special_params=( 'IP' 'Port' )
declare -a special_params=( 'ServerName' 'DocumentRoot' 'SuexecUserGroup' \
                                'CustomLog' 'ErrorLog' )

for this_vhost_prefix in "$vhost_prefix_f:"[0-9] "$vhost_prefix_f:"[0-9][0-9]; do
  if [ "$this_vhost_prefix" == "$vhost_prefix_f:[0-9]" -o \
       "$this_vhost_prefix" == "$vhost_prefix_f:[0-9][0-9]" ]; then
    continue
  fi

  vhn=${this_vhost_prefix##*:}
  sed_line=""
  sed_include_str=""
  vhost_base_str=`basename "$this_vhost_prefix"`

  vhost_name=`deref_contents "$this_vhost_prefix"`
  if [ $? -ne 0 -o -z "$vhost_name" ]; then
    echo "Warning: skipping vhost '$vhost_name', unable to get vhost name" 1>&2
    continue
  fi

  declare -a vhost_param_links_ar=()
  declare -a vhost_rpl_param_links_ar=()
  declare -a vhost_tmpl_param_links_ar=()
  declare -a vhost_rpl_tmpl_param_links_ar=()
  declare -a vhost_sys_includes_ar=()
  declare -a vhost_rpl_sys_includes_ar=()
  declare -a vhost_usr_includes_ar=()
  declare -a vhost_rpl_usr_includes_ar=()
  declare -a vhost_var_links_ar=()
  declare -a vhost_rpl_var_links_ar=()

  # check if this template is meant to replicate data from another vhost
  # if it is, then all data (params, includes and vars) not set explictily
  # to this vhost, are copied from the replica template
  # 
  # This is meant to simplify the setup and maintanance of vhosts that are
  # basically replicas of others (e.g.  SSL x main)
  replicate_link="$this_vhost_prefix:_:replicate"
  if [ -L "$replicate_link" ]; then
    repl_name=`deref_contents "$replicate_link"`
    repl_n=`deref_contents "$vhost_prefix_f:_:name:$repl_name"`
    repl_prefix="$vhost_prefix_f:$repl_n"
    repl_template_file=`get_template_file "$we_base_dir" "$vhost" "$repl_name"`
    repl_template_dir=`dirname "$repl_template_file"`
    repl_template=`basename "$repl_template_dir"`
  fi

  template_file=`get_template_file "$we_base_dir" "$vhost" "$vhost_name" 2>/dev/null`
  if [ $? -ne 0 ]; then
    # didn't find a template on this vhost. So check the replicate vhost as
    # the last chance
    template_file=`get_template_file "$we_base_dir" "$vhost" "$repl_name" 2>/dev/null`
    if [ $? -ne 0 ]; then
      error "unable to de-reference template for vhost $vhn"
    fi
  fi

  tmp_tmpl_name=`dirname "$template_file"`
  tmpl_name=`basename "$tmp_tmpl_name"`
  if ! cat "$template_file" >>"$tmp_new_vhost_file"; then
    error "unable to copy template contents to '$tmp_new_vhost_file'"
  fi

  declare -a missing_params_ar
  # Super-special required parameters
  for param in ${super_special_params[*]}; do
    # check for these parameters in the following order:
    # 1) vhost     2) template   3) server
    if ! param_link=`get_vhost_metadata_link "$we_base_dir" "$vhost" "$vhost_name" \
                              "$tmpl_name" "$param"`; then
      # error "unable to determine apache parameter $param"
      missing_params_ar+=( "$param" )
    fi

    param_name=${param_link##*:}
    param_value=`readlink "$param_link"`
    param_name_escaped=`escape_sed "${param_name^^}"`
    param_value_escaped=`escape_sed "$param_value"`

    sed_line+="s/@@__PARAM_${param_name_escaped}__@@/$param_value_escaped/g;"
  done

  # a few special verbatim parameters
  # these are about system defaults, to avoid having to create links on all
  # vhosts
  #
  # This way when a larger system wide change happens, we just update it
  # once and it applies to all vhosts
  params_str=""
  for param in ${special_params[*]}; do
    if pl=`get_vhost_metadata_link "$we_base_dir" "$vhost" "$vhost_name" "$tmpl_name" "$param"`; then
      vhost_param_links_ar+=( "$pl" )
    elif [ -n "$repl_name" ]; then
      # if this vhost is set to replicate parameters from another vhost, then do
      # it now. The parameters are only replicated if they're not set in this
      # vhost
      if pl=`get_vhost_metadata_link "$we_base_dir" "$vhost" "$repl_name" \
                                                 "$repl_template" "$param"`; then
        vhost_rpl_param_links_ar+=( "$pl" )
      fi
    else
      # error "unable to determine apache parameter $param"
      missing_params_ar+=( "$param" )
    fi
  done

  if [ ${#missing_params_ar[@]} -gt 0 ]; then
    echo "Error: missing the following critical parameters on vhost $vhost_base_str ($vhost_name)" 1>&2
    for param in ${missing_params_ar[@]}; do
      echo "  $param"
    done

    exit 1
  fi

  # generic Apache parameters for the template, available system wide.
  # Have the same intent of the previous one, to make it easy to distribute
  # mass updates on system templates
  # for P in "$system_templates_prefix:$tmpl_name:param:"[0-9]:*; do
  #  [ "$P" == "$system_templates_prefix:$tmpl_name:param:[0-9]:*" ] && break
  #
  #  get_vhost_param_link
  #  vhost_tmpl_param_links_ar+=( "$P" )
  #done

  # if this vhost is a replica of another, then check if there are parameters 
  # to be imported from the template of the original vhost
  #if [ -n "$repl_name" ]; then
  #  for P in "$system_templates_prefix:$repl_template:param:"[0-9]:*; do
  #    [ "$P" == "$system_templates_prefix:$repl_template:param:[0-9]:*" ] && break
#
#      p_name=${P##*:}
#      p_number_step_1=${P##$system_templates_prefix:$repl_template:param:}
#      p_number=${p_number_step_1%:*}
#
#      sys_p="$system_templates_prefix:$tmpl_name:param"
#      if [ ! -L "$sys_p:$p_number:$p_name" ]; then
#        vhost_rpl_tmpl_param_links_ar+=( "$P" )
#      fi
#    done
#  fi

  # other less important (or less widely-distributed parameters)
  param_inc_list=`get_list_of_items "$we_base_dir" "$vhost" "$vhost_name" \
                                  "$tmpl_name" "param:"`
  if [ $? -eq 0 ]; then
    declare -a tmp_param_inc_list=()

    while read tmp_param_entry; do
      tmp_inc_basename=`basename "$tmp_param_entry"`
      tmp_stripped=${tmp_inc_basename#param:}
      tmp_stripped=${tmp_stripped#*:param:}
      tmp_p_n=${tmp_stripped%%:*}
      tmp_p_name=${tmp_inc_basename##*:}

      tmp_link=`get_vhost_param_link "$we_base_dir" "$vhost" "$vhost_name" \
                                    "$tmpl_name" "$tmp_p_n" "$tmp_p_name"`

      if [ $? -eq 0 ]; then
        if ! in_array "$tmp_inc_basename" "${tmp_param_inc_list[*]}"; then
          tmp_param_inc_list+=( "$tmp_inc_basename" )
          vhost_param_links_ar+=( "$tmp_link" )
        fi
      fi
    done <<< "$param_inc_list"
  fi

  if [ -n "$repl_name" ]; then
    repl_param_inc_list=`get_list_of_items "$we_base_dir" "$vhost" "$repl_name" \
                                    "$tmpl_name" "param:"`

    if [ $? -eq 0 ]; then
      declare -a tmp_repl_param_inc_list=()

      while read tmp_param_entry; do
        tmp_inc_basename=`basename "$tmp_param_entry"`
        tmp_stripped=${tmp_inc_basename#*:param:}
        tmp_p_n=${tmp_stripped%%:*}
        tmp_p_name=${tmp_inc_basename##*:}

        tmp_link=`get_vhost_param_link "$we_base_dir" "$vhost" "$vhost_name" \
                                      "$tmpl_name" "$tmp_p_n" "$tmp_p_name"`

        if [ $? -eq 0 ]; then
          continue # already defined in the original template
        else
          tmp_link=`get_vhost_param_link "$we_base_dir" "$vhost" "$repl_name" \
                                        "$repl_template" "$tmp_p_n" "$tmp_p_name"`

          if ! in_array "$tmp_inc_basename" "${tmp_repl_param_inc_list[*]}"; then
            tmp_repl_param_inc_list+=( "$tmp_inc_basename" )
            vhost_param_links_ar+=( "$tmp_link" )
          fi
        fi
      done <<< "$repl_param_inc_list"
    fi
  fi

  # old code, never committed
  # for P in "$this_vhost_prefix:param:"[0-9]:*; do
  #  [ "$P" == "$this_vhost_prefix:param:[0-9]:*" ] && break
  #
  # tmp_param_n_name=${P#$this_vhost_prefix:param:}
  #  tmp_param_n=${tmp_param_n_name%%:*}
  #  tmp_param_name=${tmp_param_n_name##*:}
  #
  #  tmp_p_link=`get_vhost_param_link "$we_base_dir" "$vhost" "$vhost_name" \
  #                   "$tmpl_name" "$tmp_param_n" "$tmp_param_name"`
  #
  # if [ $? -eq 0 ]; then
  #    vhost_param_links_ar+=( "$tmp_p_link" )
  #  fi
  # done
  #
  # if this vhost is a replica of another, then check if there are parameters 
  # to be imported from the template of the original vhost
  # 
  # NOTE: this is right, it's not a duplication of the previous section
  #
  # if [ -n "$repl_name" ]; then
  #   for P in "$repl_prefix:param:"[0-9]:*; do
  #     [ "$P" == "$repl_prefix:param:[0-9]:*" ] && break
  #
  #   p_n_name=${P#$repl_prefix:param:}
  #    p_name=${p_n_name##*:}
  #    p_number=${p_n_name%%:*}
  #
  #    # check if this parameter is set on the original vhost
  #    tmp_tmpl_link=`get_vhost_param_link "$we_base_dir" "$vhost" "$vhost_name" \
  #      "$tmpl_name" "$p_number" "$p_name"`
  #    if [ $? -ne 0 ]; then # if not set, then add it
  #      vhost_rpl_tmpl_param_links_ar+=( "$P" )
  #    fi
  #  done
  #fi

  sys_inc_list=`get_list_of_items "$we_base_dir" "$vhost" "$vhost_name" \
                                  "$tmpl_name" "include:"`

  if [ $? -eq 0 ]; then
    declare -a tmp_sys_inc_list=()

    while read tmp_sys_entry; do
      tmp_inc_basename=`basename "$tmp_sys_entry"`
      tmp_inc_name=${tmp_inc_basename##*:}

      tmp_link=`get_vhost_data_link "$we_base_dir" "$vhost" "$vhost_name" \
                                    "$tmpl_name" include "$tmp_inc_name"`

      if [ $? -eq 0 ]; then
        if ! in_array "$tmp_inc_name" "${tmp_sys_inc_list[*]}"; then
          tmp_sys_inc_list+=( "$tmp_inc_name" )
          vhost_sys_includes_ar+=( "$tmp_link" )
        fi
      fi
    done <<< "$sys_inc_list"
  fi

  # old code, never committed
  #sys_inc_base="$system_templates_prefix:$tmpl_name:include"
  #
  # for inc in "$sys_inc_base":*; do
  #  [ "$inc" == "$sys_inc_base:*" ] && break
  #
  #  tmp_tmpl_str=`readlink "$inc"`
  #  tmp_tmpl_name=`basename "$tmp_tmpl_str"`

  #  tmp_file=`get_vhost_data_link "$we_base_dir" "$vhost" "$vhost_name" \
  #            "$tmpl_name" include "$tmp_tmpl_name"`
  #  if [ $? -ne 0 ]; then
  #    error "unable to find the file for template name '$tmp_tmpl_name' on vhost $vhn"
  #  fi

  #  vhost_sys_includes_ar+=( "$tmp_file" )
  #done

  # if this template is marked as a replica of another template, then re-use
  # the system included templates from the replica
  # It takes care not to duplicate includes that are already included into
  # this one
  if [ -n "$repl_name" ]; then
    repl_incl_list=`get_list_of_items "$we_base_dir" "$vhost" "$repl_name" \
                   "$repl_template" "include:"`

    if [ $? -eq 0 ]; then
      declare -a tmp_rpl_inc_list=()
      while read tmp_inc; do
        tmp_inc_basename=`basename "$tmp_inc"`
        tmp_inc_name=${tmp_inc_basename##*:}

        tmp_sys_file=`get_vhost_data_link "$we_base_dir" "$vhost" \
                        "$vhost_name" "$tmpl_name" include "$tmp_inc_name"`
        if [ $? -eq 0 ]; then
          # found the same template on the main vhost, skipping
          continue
        else
          tmp_file=`get_vhost_data_link "$we_base_dir" "$vhost" \
                    "$repl_name" "$repl_template" include "$tmp_inc_name"`

          if [ $? -ne 0 ]; then
            error "unable to find template $repl_template for vhost $vhn"
          elif ! in_array "$tmp_inc_name" ${tmp_rpl_inc_list[@]}; then
            tmp_rpl_inc_list+=( "$tmp_inc_name" )
            vhost_rpl_sys_includes_ar+=( "$tmp_file" )
          fi
        fi
      done <<< "$repl_incl_list"
    fi
  fi

  var_inc_list=`get_list_of_items "$we_base_dir" "$vhost" "$vhost_name" \
                                  "$tmpl_name" "var:"`

  if [ $? -eq 0 ]; then
    declare -a tmp_var_inc_list=()

    while read tmp_var_entry; do
      tmp_var_basename=`basename "$tmp_var_entry"`
      tmp_var_name=${tmp_var_basename#var:}

      tmp_link=`get_vhost_data_link "$we_base_dir" "$vhost" "$vhost_name" \
                                    "$tmpl_name" var "$tmp_var_name"`

      if [ $? -eq 0 ]; then
        if ! in_array "$tmp_var_name" "${tmp_var_inc_list[*]}"; then
          tmp_var_inc_list+=( "$tmp_var_name" )
          vhost_var_links_ar+=( "$tmp_link" )
        fi
      fi
    done <<< "$var_inc_list"
  fi

  if [ -n "$repl_name" ]; then
    repl_var_inc_list=`get_list_of_items "$we_base_dir" "$vhost" "$repl_name" \
                                    "$repl_template" "var:"`

    if [ $? -eq 0 ]; then
      declare -a tmp_repl_var_inc_list=()

      while read tmp_var_entry; do
        tmp_var_basename=`basename "$tmp_var_entry"`
        tmp_var_name=${tmp_var_basename#var:}

        tmp_link=`get_vhost_data_link "$we_base_dir" "$vhost" "$vhost_name" \
                                      "$tmpl_name" var "$tmp_var_name"`

        if [ $? -eq 0 ]; then
          continue # already exists in the original template, skipping...
        else
          tmp_link=`get_vhost_data_link "$we_base_dir" "$vhost" "$repl_name" \
                                      "$repl_template" var "$tmp_var_name"`

          if ! in_array "$tmp_var_name" "${tmp_repl_var_inc_list[*]}"; then
            tmp_repl_var_inc_list+=( "$tmp_var_name" )
            vhost_rpl_var_links_ar+=( "$tmp_link" )
          fi
        fi
      done <<< "$repl_var_inc_list"
    fi
  fi

  # old code, never committed
  #
  # for V in "$this_vhost_prefix:var:"*; do
  #   [ "$V" == "$this_vhost_prefix:var:*" ] && break
  #
  #  vhost_var_links_ar+=( "$V" )
  # done
  #
  # if [ -n "$repl_name" ]; then
  #  for V in "$repl_prefix:var:"*; do
  #    [ "$V" == "$repl_prefix:var:*" ] && break
  #
  #    repl_var_basename=${V##*:}
  #    if [ ! -L "$this_vhost_prefix:var:$repl_var_basename" ]; then
  #      vhost_rpl_var_links_ar+=( "$V" )
  #    fi
  #  done
  #fi


  #####
  # replace all parameters collected previously
  #####

  # parameters
  for param_link in ${vhost_param_links_ar[@]} ${vhost_rpl_param_links_ar[@]} \
        ${vhost_tmpl_param_links_ar[@]} ${vhost_rpl_tmpl_param_links_ar[@]}; do

    # WTF!?
    # param_n_name=${param_link##*:param:}
    # param_n=${param_n_name%%:*}
    # param_name=${param_n_name##*:}

    param_name=${param_link##*:}
    param_name_escaped=`escape_sed "${param_name^^}"`

    param_value=`readlink "$param_link"`
    param_value_escaped=`escape_sed "$param_value"`

    params_str+="  $param_name $param_value"$'\n'
    sed_line+="s/@@__PARAM_${param_name_escaped}__@@/$param_value_escaped/g;"
  done

  # includes
  sys_include_str=""
  for inc in ${vhost_sys_includes_ar[@]} ${vhost_rpl_sys_includes_ar[@]}; do

    tmp_tmpl_file=`readlink "$inc"`
    if [ $? -ne 0 -o -z "$tmp_tmpl_file" ]; then
      error "unable to de-reference file '$inc'"
    fi
    tmp_tmpl_name=`basename "$tmp_tmpl_file"`


    if ! tmpl_file=`get_template_include_file "$we_base_dir" "$tmp_tmpl_name"`; then
      error "unable to get include file for template name $tmp_tmpl_name"
    fi
    
    if ! tmp_str=`cat "$tmpl_file"`; then
      error "unable to include template file '$tmpl_file' for template $vhost_template"
    fi

    sys_include_str+="  # system defined template include: $tmpl_file"$'\n'
    sys_include_str+="$tmp_str"$'\n'
    sys_include_str+="  # // end of system defined template include: $tmpl_file"$'\n\n'
  done

  # special include lines for the htpasswd lock template
  #
  # NOTE:
  # all these redundant lines below could be avoided if in the loop above
  # were used the template names, instead of the links
  if [ "$is_htpasswd_locked" -a "$vhost_name" != "devpanel_tools" ]; then
    tmpl_file=`get_template_include_file "$we_base_dir" "$htpasswd_tmpl_name"`
    if [ $? -ne 0 ]; then
      error "unable to find htpasswd template name '$htpasswd_tmpl_name'"
    fi

    if ! tmp_str=`cat "$tmpl_file"`; then
      error "unable to include template file '$tmpl_file' for htpasswd template '$htpasswd_tmpl_name'"
    fi

    sys_include_str+="  # system defined template include: $tmpl_file"$'\n'
    sys_include_str+="$tmp_str"$'\n'
    sys_include_str+="  # // end of system defined template include: $tmpl_file"$'\n\n'
  fi

  if [ -n "$sys_include_str" ]; then
    sys_include_str_escaped=`escape_sed "$sys_include_str"`
    sed_include_str+="s/^[[:space:]]*#[[:space:]]*@@__SYSTEM_INCLUDES__@@/$sys_include_str_escaped/g;"
  else
    sed_include_str+="/^[[:space:]]*#[[:space:]]*@@__SYSTEM_INCLUDES__@@/d;"
  fi

  # user defined includes
  usr_include_str=""
  for usr_inc in ${vhost_usr_includes_ar[@]} ${vhost_rpl_usr_includes_ar[@]}; do
    tmp_tmpl_file=`readlink "$inc"`
    if [ $? -ne 0 -o -z "$include_file" ]; then
      error "unable to de-reference file '$inc'"
    fi
    tmp_tmpl_name=`basename "$include_file"`

    if ! tmpl_file=`get_template_include_file "$we_base_dir" "$tmp_tmpl_name"`; then
      error "unable to get include file for template name $tmp_tmpl_name"
    fi

    if ! tmp_str=`cat "$tmpl_file"`; then
      error "unable to include template file '$tmpl_file' for template $vhost_template"
    fi

    usr_include_str+="  # user defined template include: $tmpl_file"$'\n'
    usr_include_str+="$tmp_str"$'\n'
    usr_include_str+="  # // end of user defined template include: $tmpl_file"$'\n\n'
  done

  if [ -n "$usr_include_str" ]; then
    usr_include_str_escaped=`escape_sed "$usr_include_str"`
    sed_include_str+="s/^[[:space:]]*#[[:space:]]*@@__USER_INCLUDES__@@/$usr_include_str_escaped/g;"
  else
    sed_include_str+="/^[[:space:]]*#[[:space:]]*@@__USER_INCLUDES__@@/d;"
  fi

  if [ -n "$params_str" ]; then
    params_str_escaped=`escape_sed "$params_str"`
    sed_line+="s/^[[:space:]]*#[[:space:]]*@@__PARAMS__@@/$params_str_escaped/g;"
  else
    sed_line+="/^[[:space:]]*#[[:space:]]*@@__PARAMS__@@/d;"
  fi

  # variables
  for var_link in ${vhost_var_links_ar[@]} ${vhost_rpl_var_links_ar[@]}; do
    var_basename=`basename "$var_link"`
    var_name=${var_basename##var:}
    var_value=`readlink "$var_link"`

    var_name_escaped=`escape_sed "${var_name^^}"`
    var_value_escaped=`escape_sed "$var_value"`

    sed_line+="s/@@__VAR_${var_name_escaped}__@@/$var_value_escaped/g;"
  done


  # first include all external files
  sed -i -e "$sed_include_str" "$tmp_new_vhost_file"
  if [ $? -ne 0 ]; then
    error "unable to update include lines on file '$tmp_new_vhost_file'"
  fi

  sed_line+="s/@@__DEVPANEL_BASEDIR__@@/`escape_sed "$we_base_dir"`/g;"
  sed_line+="s/@@__WEBSITES_BASEDIR__@@/`escape_sed "$websites_basedir"`/g;"
  sed_line+="s/@@__SERVER_HOSTNAME__@@/`escape_sed "$server_hostname"`/g;"
  sed_line+="s/@@__VHOST__@@/`escape_sed "$vhost"`/g;"
  sed_line+="s/@@__VHOST_INTERNAL_NAME__@@/`escape_sed "$vhost_name"`/g;"
  sed_line+="s/@@__VHOST_NUMBER__@@/$vhn/g;"
  sed_line+="s/@@__VHOST_USER_HOME__@@/`escape_sed "$user_home"`/g;"
  sed_line+="s/@@__TEMPLATE_FILE__@@/`escape_sed "$template_file"`/g;"
  sed_line+="s/@@__TEMPLATE_FILE_BASENAME__@@/`escape_sed "$vhost_template"`/g;"

  # then replace all parameters and variables
  sed -i -e "$sed_line" "$tmp_new_vhost_file"
  if [ $? -ne 0 ]; then
    error "unable to replace variables"
  fi

  echo >> "$tmp_new_vhost_file" # add a new line to make the file easier to
                                # read

  n_vhosts+=1
done

if [ $n_vhosts -eq 0 ]; then
  error "No vhost updated."
fi

echo Validating apache config syntax

if ! cat "$tmp_new_vhost_file" > "$virtwww_file"; then
  error "unable to copy contents from '$tmp_new_vhost_file'"\
" to '$virtwww_file'"
fi

if ! "$apachectl" configtest; then
  echo Syntax validation failed, reverting the changes
  if [ -f "$virtwww_file" ] && ! cat "$vhost_bkp_file" >"$virtwww_file"; then
    error "unable to copy back the contents from $vhost_bkp_file"\
" to '$virtwww_file'"
  fi

  echo
  echo "-- BROKEN TEMPLATE FILE (?) --"
  cat -n "$tmp_new_vhost_file"
  echo "-- END OF TEMPLATE --"
  echo

  if ! "$apachectl" configtest; then
    error "Apache config is broken, call a system administrator NOW!"
  fi

  error "nothing was updated because of errors on the new apache config"
else
  cp -f "$vhost_bkp_file" "$virtwww_file_old"
  if [ $? -eq 0 ]; then
    echo "Successfully saved previous vhost file on $virtwww_file_old"
  else
    echo "Warning: unable to save a copy of the old file (not critical)" 1>&2
  fi
fi

echo "Successfully updated vhost $vhost on file $virtwww_file"

if [ -n "$restart_apache" ]; then
  echo Restarting apache

  run "$apachectl" graceful || \
    error "Cannot restart apache, call a system administrator NOW!"
fi

exit 0
