#!/bin/bash

usage() {
  local prog=`basename "$0"`

  echo "Usage: $prog <options> <vhost>
  
  Options:
    -I          read certificates and key from STDIN 
                (see the format explanation below)
    -C <file>   read CA certificate bundle from file
    -c <file>   read site certificate from file
    -k <file>   read secret key from file
    -N          skip reading the CA certificate chain
    -o          overwrite existing configuration (if SSL is already
                configured with the same certificates or key)
    -z          don't apply the new config to production, just store the
                certs
    -q          print less informative messages
    -i ip_addr  configure SSL on the specified IP address only


  This script receives in STDIN the SSL files (CA bundle, certificate, key) and
  stores on the appropriate system directory

  When -I is used, the STDIN contents should be in this order and syntax:

  --start CA
  all CA certs PEM encoded
  --end CA
  the certificate pem encoded
  the key pem encoded

  To run it manually, you'd use something like:

  # { echo --start CA; cat CA-cert.pem ; echo --end CA; cat Cert.crt; \\
    cat Cert.key ; } | $prog -I vhost


  To run with files as input:

  # $prog -C CA_bundle_file.crt -c cert_file.crt -k key_file.key \\
      myvhost

  See also: apply-ssl-config
"
  
  exit 1
}

error() {
  local msg="$1"
  local ex=${2:-1}

  echo "Error: $msg" 1>&2
  exit $ex
}

validate_pem_certificate() {
  local cert="$1"

  openssl x509 -noout -in <(echo "$cert")
}

read_pem_certificate_stdin() {
  local line=""
  local read_cert=""

  local -r start_cert_regex='^-+BEGIN ([^ ]+ )*CERTIFICATE-+$'
  local -r end_cert_regex='^-+END ([^ ]+ )*CERTIFICATE-+$'
  local -i max_bytes=8192

  read line
  if ! [[ "$line" =~ $start_cert_regex ]]; then
    echo "$FUNCNAME(): doesn't seem like a certificate (didn't receive the starting header)" 1>&2
    echo "$line" # send the line anyway
    return 1
  fi
  read_cert+="$line\n"

  while read line; do
    read_cert+="$line\n"
    if [[ "$line" =~ $end_cert_regex ]]; then
      echo -n -e "$read_cert"
      return 0
    fi

    if [ ${#read_cert} -gt $max_bytes ]; then
      echo "$FUNCNAME(): read ${#read_cert} bytes already and hadn't completed a certificate yet" 1>&2
      return 1
    fi
  done

  echo "$FUNCNAME(): reached end-of-file and hadn't received the end cert line" 1>&2
  return 1
}

read_pem_key_stdin() {
  local line=""
  local read_key=""

  local -r start_key_regex='^-+BEGIN ([^ ]+ )*PRIVATE KEY-+$'
  local -r end_key_regex='^-+END ([^ ]+ )*PRIVATE KEY-+$'
  local -i max_bytes=8192

  read line
  if ! [[ "$line" =~ $start_key_regex ]]; then
    echo "$FUNCNAME(): doesn't seem like a key (didn't receive the starting header)" 1>&2
    echo "$line" # send the line anyway
    return 1
  fi
  read_key+="$line\n"

  while read line; do
    read_key+="$line\n"
    if [[ "$line" =~ $end_key_regex ]]; then
      echo -n -e "$read_key"
      return 0
    fi

    if [ ${#read_key} -gt $max_bytes ]; then
      echo "$FUNCNAME(): read ${#read_key} bytes already and hadn't completed a key yet" 1>&2
      return 1
    fi
  done

  echo "$FUNCNAME(): reached end-of-file and hadn't received the end key line" 1>&2
  
  return 1
}

validate_pem_key() {
  local key="$1"

  openssl rsa -check -noout -in <(echo "$key") &>/dev/null
}

backup_file() {
  local file="$1"

  if [ -L "$file" ]; then
    rm -f "$file"
    return $?
  fi

  local date=`date +%b-%d-%Y_%H:%M:%S`

  if [ -e "$file" ]; then
    mv -f "$file" "$file.$date--$RANDOM"
    if [ $? -ne 0 ]; then
      echo "$FUNCNAME(): unable to backup '$file'" 1>&2
      return 1
    fi
    return 0
  else
    echo "$FUNCNAME(): path '$file' doesn't exist" 1>&2
    return 1
  fi
}

# main

unset skip_CA previous_buffer overwrite_config quiet ip_address
unset orig_ca_bundle_file orig_cert_file orig_key_file from_stdin

apply_config=1
getopt_flags='IzNoC:c:k:i:'
while getopts $getopt_flags OPTN; do
  case "$OPTN" in
    N)
      skip_CA=1
      ;;
    o)
      overwrite_config=1
      ;;
    C)
      orig_ca_bundle_file="$OPTARG"
      ;;
    c)
      orig_cert_file="$OPTARG"
      ;;
    k)
      orig_key_file="$OPTARG"
      ;;
    I)
      from_stdin=1
      ;;
    q)
      quiet=1
      ;;
    i)
      ip_address="$OPTARG"
      ;;
    z)
      unset apply_config
      ;;
    *)
      usage
      ;;
  esac
done
shift $(( $OPTIND - 1 ))

[ $# -lt 1 -o -z "$1" ] && usage

vhost="$1"

declare -r n_max_ca_certs=7
declare -r start_ca_str='--start CA'
declare -r end_ca_str='--end CA'

self_bin=`readlink -e "$0"`
curr_dir=`dirname "$self_bin"`
we_base_dir=`readlink -e "$curr_dir/.."`

lib_file="$we_base_dir/lib/functions"
if ! source "$lib_file"; then
  error "unable to source lib file $lib_file"
fi

if ! "$curr_dir/check-vhost-name" archive "$vhost"; then
  error "Invalid vhost name"
fi

assign_deref_os_fs_path_ex_or_exit ssl_cert_dir "$we_base_dir" \
  pathnames/etc/ssl/certs

assign_deref_os_fs_path_ex_or_exit ssl_key_dir "$we_base_dir" \
  pathnames/etc/ssl/keys

umask 077

tmp_ssl_dir=`mktemp -d`
if [ $? -ne 0 ]; then
  error "unable to create temporary directory"
fi

tmp_ca_bundle_file=`mktemp "$tmp_ssl_dir/ca_bundle.XXXXXXXXXXXXX"`
if [ $? -ne 0 ]; then
  error "unable to create temporary file for CA bundle"
fi

tmp_cert_file=`mktemp "$tmp_ssl_dir/cert_file.XXXXXXXXXXXXXX"`
if [ $? -ne 0 ]; then
  error "unable to create temporary file for cert file"
fi

tmp_key_file=`mktemp "$tmp_ssl_dir/key_file.XXXXXXXXXXXXXX"`
if [ $? -ne 0 ]; then
  error "unable to create temporary file for key file"
fi

trap 'exit 1' QUIT INT HUP TERM
trap 'rm -f "$tmp_ca_bundle_file" "$tmp_cert_file" "$tmp_key_file"' \
  EXIT

declare -i n_ca_certs=0
if [ -z "$skip_CA" ]; then
  if [ -n "$from_stdin" ]; then
    echo "Reading CA cert from stdin..." 1>&2
    read line
    if [ "$line" != "$start_ca_str" ]; then
      error "expected line '$start_ca_str', but didn't receive it"
    fi

    while [ $n_ca_certs -lt $n_max_ca_certs ]; do
      cert=`read_pem_certificate_stdin 2>/dev/null`
      status=$?
      if [ $status -ne 0 -a "$cert" == "$end_ca_str" ]; then
        break # matched the $end_ca_str, finished reading all CA certificates
      elif [ $status -ne 0 ]; then
        error "unable to read CA cert information" # malformed cert
      fi

      if ! validate_pem_certificate "$cert"; then
        error "invalid CA certificate on position $(( ${#ca_cert[@]} + 1 ))"
      fi

      echo "$cert" >> "$tmp_ca_bundle_file"
      if [ $? -ne 0 ]; then
        error "unable to write CA to temp file '$tmp_ca_bundle_file'"
      fi

      n_ca_certs+=1
    done

    if [ ${#ca_certs[@]} -gt $n_max_ca_certs ]; then
      error "read $n_ca_certs certificates, and expected '$end_ca_str' line, but didn't receive it"
    fi

    orig_ca_bundle_file="$tmp_ca_bundle_file"
  elif [ -n "$orig_ca_bundle_file" ]; then
    validate_pem_certificate "`cat "$orig_ca_bundle_file"`"
    if [ $? -ne 0 ]; then
      error "CA bundle file '$orig_ca_bundle_file' seems invalid"
    fi
  else
    error "missing CA file (please specify it with -C)"
  fi
fi

if [ -n "$from_stdin" ]; then
  echo "Reading PEM certificate..." 1>&2
  domain_cert=`read_pem_certificate_stdin`
  if [ $? -ne 0 ]; then
    error "failed to read domain certificate"
  fi

  echo -n "$domain_cert" >> "$tmp_cert_file"
  if [ $? -ne 0 ]; then
    error "unable to write certificate to temp file '$tmp_cert_file'"
  fi

  orig_cert_file="$tmp_cert_file"
elif [ -n "$orig_cert_file" ]; then
  domain_cert=`cat "$orig_cert_file"`
  if [ $? -ne 0 ]; then
    error "unable to read from cert file $orig_cert_file"
  fi
else
  error "missing cert file (please specify it with -c)"
fi

if ! validate_pem_certificate "$domain_cert"; then
  error "failed to certificate"
fi

cert_modulus=`openssl x509 -noout -modulus -in <(echo -e "$domain_cert")`
if [ $? -ne 0 ]; then
  error "unable to get the modulus of the certificate"
fi
cert_modulus=${cert_modulus#*=}

if [ -n "$from_stdin" ]; then
  domain_key=`read_pem_key_stdin`
  if [ $? -ne 0 ]; then
    error "unable to read PEM key"
  fi

  echo -n "$domain_key" >> "$tmp_key_file"
  if [ $? -ne 0 ]; then
    error "unable to write key to temp file $tmp_key_file"
  fi

  orig_key_file="$tmp_key_file"
elif [ -n "$orig_key_file" ]; then
  domain_key=`cat "$orig_key_file"`
  if [ $? -ne 0 ]; then
    error "unable to read from key file $orig_key_file"
  fi
else
  error "missing key file (please specify it with -k)"
fi

if ! validate_pem_key "$domain_key"; then
  error "unable to validate domain key"
fi

key_modulus=`openssl rsa -noout -modulus -in <(echo -e "$domain_key")`
if [ $? -ne 0 ]; then
  error "unable to calculate key modulus"
fi
key_modulus=${key_modulus#*=}

if [ "$cert_modulus" != "$key_modulus" ]; then
  error "certificate and key mistach. Certificate modulus ($cert_modulus) "\
"doesn't match key modulus ($key_modulus)"
fi

# get domain from certificate (just for file naming purposes)
domain_str=`openssl x509 -noout -subject -in "$orig_cert_file" | \
              egrep -o '[Cc][Nn]=[^/]+'`
if [ $? -eq 0 -a -n "$domain_str" ]; then
  domain_str=${domain_str#[Cc][Nn]=} # remove leading CN=
  domain_str=${domain_str//\*./wildcard.} # replace *. with 'wildcard.'
else
  error "unable to get domain from certificate"
fi

# get the initial and end dates of the certificate
# this way we organize the files by date, and keep older files
initial_date_raw=`openssl x509 -noout -in "$orig_cert_file" -startdate`
if [ $? -ne 0 ]; then
  error "unable to get start date from cert file $orig_cert_file"
fi
initial_date_lnx=${initial_date_raw#*=}

end_date_raw=`openssl x509 -noout -in "$orig_cert_file" -enddate`
if [ $? -ne 0 ]; then
  error "unable to end date from $orig_cert_file"
fi
end_date_lnx=${end_date_raw#*=}

initial_date_year=`date -d "$initial_date_lnx" +%Y `
if [ $? -ne 0 ]; then
  error "unable to convert initial date to year"
fi

end_date_year=`date -d "$end_date_lnx" +%Y`
if [ $? -ne 0 ]; then
  error "unable to convert end date to year"
fi

cert_serial=`openssl x509 -noout -in "$orig_cert_file" -serial`
if [ $? -ne 0 -o -z "$cert_serial" ]; then
  error "unable to get serial for certificate file $orig_cert_file"
else
  cert_serial=${cert_serial#serial=}
fi

valid_date="${initial_date_year}-${end_date_year}"

target_ca_bundle_file="$ssl_cert_dir/CA-bundle--$domain_str--$cert_serial--$valid_date.crt"
target_cert_file="$ssl_cert_dir/$domain_str--$cert_serial--$valid_date.crt"
target_key_file="$ssl_key_dir/$domain_str--$cert_serial--$valid_date.key"

# all certificates and keys have have been validated so far

# check if the directory structure for the SSL dir is set

# if 'overwrite_config' is set, then backup the files before proceeding
if [ -n "$overwrite_config" ]; then
  for F in "$target_ca_bundle_file" "$target_cert_file" "$target_key_file"; do
    if [ -f "$F" ] && ! backup_file "$F"; then
      exit 1 # the error msg is provided by backup_file function
    fi
  done
else
  unset already_exists

  if [ -z "$skip_CA" ]; then
    if [ -e "$target_ca_bundle_file" ]; then
      echo "Error: file '$target_ca_bundle_file' already exists" 1>&2
      already_exists=1
    fi
  fi

  for tst_file in "$target_cert_file" "$target_key_file"; do
    if [ -e "$tst_file" ]; then
      echo "Error: file '$tst_file' already exists" 1>&2
      already_exists=1
    fi
  done

  if [ -n "$already_exists" ]; then
    error "won't overwrite existing files. Please add option -o to overwrite existing configuration."
  fi
fi

if [ -z "$skip_CA" ]; then
  if ! cp -f "$orig_ca_bundle_file" "$target_ca_bundle_file"; then
    error "unable to CA bundle file to '$target_ca_bundle_file'"
  fi

  chmod 644 "$target_ca_bundle_file"
  if [ $? -ne 0 ]; then
    error "unable to chmod $target_ca_bundle_file"
  fi
fi

if ! cp -f "$orig_cert_file" "$target_cert_file"; then
  error "unable to copy cert file to $target_cert_file"
fi

if ! chmod 644 "$target_cert_file"; then
  error "unable to chmod file $target_cert_file"
fi

if ! cp -f "$orig_key_file" "$target_key_file"; then
  error "unable to copy key file to $target_key_file"
fi

if ! chmod 600 "$target_key_file"; then
  error "unable to chmod file $target_key_file"
fi

if [ -z "$skip_CA" -a -z "$quiet" ]; then
  echo "Successfully wrote CA bundle file '$target_ca_bundle_file'"
fi

if [ -z "$quiet" ]; then
  echo "Successfully wrote certificate file '$target_cert_file'"
  echo "Successfully wrote private key file '$target_key_file'"
fi

if [ -n "$apply_config" ]; then
  "$curr_dir/apply-ssl-config" -c "$target_cert_file" -k "$target_key_file" \
    ${target_ca_bundle_file:+ -C "$target_ca_bundle_file"}                  \
    ${ip_address:+-i "$ip_address"} "$vhost"

  exit $?
fi

exit 0
