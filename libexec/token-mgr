#!/bin/bash

umask 077

token_length=50

usage() {
  local prog=$(basename "$0")
  echo "
This script manages the creation of tokens for DP services

Usage: $prog [ OPTIONS ] <vhost>

  Options:
    -n number         number of characters of the token
    -t type           Type of the token
    -T token_str      use the specified token (instead of generating a
                      random one)
    -r                remove the token specified in option -T
    -l                vhost is a literal user (don't prepend w_ to
                      the vhost name)
    -i                read the contents of the token file from stdin
    -p                print token to stdout
"
  exit 1
}

# main

[ $# -lt 1 ] && usage

dir=$( dirname "$0" )
if ! source "$dir/../lib/functions"; then
  echo "Error: unable to import auxiliary functions." >&2
  exit 1
fi
token_dir="$dir/../var/tokens"
if [ ! -e "$token_dir" ]; then
  error "token dir '$token_dir' doesn't exist."
elif [ ! -d "$token_dir" ]; then
  error "path '$token_dir' is not a directory"
fi

delete_token=0
unset token_str token_type token_str token_contents literal_user print_token
getopt_flags='rn:t:T:lip'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    n)
      if ! [[ "$OPTARG" =~ ^[0-9]+$ ]]; then
        error "the argument passed to -n should be numeric"
      elif [ $OPTARG -lt 20 ]; then
        error "the argument passed to -n should be greater than 20"
      else
        token_length=$OPTARG
      fi
      ;;
    t)
      if ! [[ "$OPTARG" =~ ^[A-Za-z0-9._]+$ ]]; then
        error "invalid token name. Accepts only [A-Za-z0-9._] characters"
      else
        token_type="$OPTARG"
      fi
      ;;
    T)
      if [ ${#OPTARG} -eq $token_length ]; then
        token_str="$OPTARG"
      else
        error "the specified token doesn't match the required token length ($token_length)"
      fi
      ;;
    r)
      delete_token=1
      ;;
    l)
      literal_user=1
      ;;
    i)
      echo "reading token contents from stdin" 1>&2
      read token_contents
      ;;
    p)
      print_token=1
      ;;
    *)
      usage
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

# missing vhost name
[ $# -lt 1 -o ${#1} -lt 1 ] && usage

if [ -z "$token_type" ]; then
  error "please specify the token type (-t)"
fi

vhost="$1"
if [ $delete_token -eq 1 -a -z "$token_str" ]; then
  error "requested token deletion (-r), but token string is missing (-T)"
elif [ $delete_token -eq 1 ]; then
  token_file="$token_dir/$vhost.$token_type.$token_str"
  if [ ! -e "$token_file" ]; then
    wedp_warn "token file doesn't exist"
    exit 0 # exit 0, not important here
  fi

  rm -f "$token_file"
  if [ $? -eq 0 ]; then
    exit 0
  else
    error "unable to delete token file '$token_file'"
  fi
fi

if [ -z "$token_str" ]; then
  for n in {1..5}; do
    if token_str=$( wedp_gen_random_str $token_length ); then
      token_file="$token_dir/$vhost.$token_type.$token_str"
      if [ -e "$token_file" ]; then
        wedp_warn "token_file '$token_file' already exists. Trying again"
      else
        break
      fi
    else
      continue
    fi
    token_file=""
  done
else
  token_file="$token_dir/$vhost.$token_type.$token_str"
fi

if [ -z "$token_file" ]; then
  error "unable to generate token file. Exceeded max number of attempts"
fi

if [ -e "$token_file" ]; then
  wedp_warn "token already exists (this is just a warning)"
  exit 0
fi

touch "$token_file"
status=$?
if [ $status -ne 0 ]; then
  error "unable to create token file. touch returned exit code: $status"
fi

if [ -n "$literal_user" ]; then
  token_owner="$vhost"
else
  token_owner="w_$vhost"
fi

if [ -n "$token_contents" ]; then
  echo "$token_contents" >"$token_file"
  if [ $? -ne 0 ]; then
    error "unable to save token_contents on token file '$token_file'"
  fi
fi

if ! getent passwd "$token_owner" >/dev/null; then
  wedp_warn "vhost '$token_owner' doesn't exist yet (this is just a warning)"
elif ! chown "$token_owner" "$token_file"; then
  error "unable to chown '$token_file' to '$token_owner'"
fi

if [ -n "$print_token" ]; then
  echo "$token_str"
fi

exit 0
