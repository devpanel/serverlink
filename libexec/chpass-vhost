#!/bin/bash
usage() {
  local prog=$(basename "$0")
  echo \
"
Usage: $prog [ options ] <vhost>

  Options:
    -i                Receive password from stdin, instead of randomly generating one
    -q                Don't print password to stdout after changing
"
  exit 1
}

dir=`dirname "$0"`
[ "$dir" == "." ] && dir="$PWD"

[ $# -lt 1 ] && usage  # received no args, show usage

unset pass_from_stdin password dont_print_pw OPTIND
getopt_flags="iq"

while getopts $getopt_flags OPTS; do
  case $OPTS in
    i)
      pass_from_stdin=1
      ;;
    q)
      dont_print_pw=1
      ;;
  esac
done

[ -n "$OPTIND" -a $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

[ $# -lt 1 -o "$1" == "" ] && usage

vhost="$1"
user="w_$vhost"
$dir/check-vhost-name config "$vhost" || exit 1

if [ -n "$pass_from_stdin" ]; then
  # received -i. read pass from stdin
  while [ -z "$password" ]; do
    echo -n "Reading password from stdin: " 1>&2
    read password
    [ -z "$password" ] && \
      echo "Error: received an empty password. Please, try again" 1>&2
  done

  cat << EOP | $dir/newpass ${dont_print_pw:+-q} -i "$user"
$password
EOP
  exit $? # exit with newpass return code
else
  # didn't receive -i, generate a random password
  $dir/newpass ${dont_print_pw:+-q} "$user"
  exit $? # exit with newpass return code
fi
