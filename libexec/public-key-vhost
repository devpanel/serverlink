#!/bin/bash
#set -x

usage() {
  local prog=$(basename "$0")
  cat << EOF
Usage: $prog [ options ] <vhost>
  Options:
    -a <key>        adds key to vhost
    -r <key>        removes key from vhost
    -i              read keys from stdin
    -d <directory>  install the key in a custom directory (not \$HOME)
    -S <string>     set a custom string to append to the key
    -R              set the key for a root user

  Options -a and -r can be used multiple times each.

  When passing keys via stdin (-i), print to stdin with the following syntax:
  -:key
  +:key

  The first line above, removes the key. The second line adds the key.

EOF
  exit 1
}

key_is_installed() {
  local user="$1"
  local key_file="$2"
  local key="$3"

  [ ! -e "$key_file" ] && return 1
  [ ! -f "$key_file" ] && return 1
  [ ! -s "$key_file" ] && return 1

  if su -l -c "fgrep -q '$key' '$key_file'" "$user" ; then
    return 0
  else
    return 1
  fi
}

install_key() {
  local user="$1"
  local key_file="$2"
  local key="$3"
  local ce_str="$4"

  cat << EOF >> "$key_file"
${key}${ce_str:+ $ce_str}
EOF
  return $? # status of cat
}

remove_key() {
  local user="$1"
  local key_file="$2"
  local key="$3"

  local key_sed_escaped=$(escape_sed "$key")

  su -l -c "sed -e /""`printf '%q' "$key_sed_escaped"`""/d -i `printf '%q' $key_file`" "$user"
  return $? # return the status of sed
}

key_substr() {
  local key="$1"
  local key_str

  key=${key#* *}
  if [ ${#key} -lt 40 ]; then
    key_str="$key"
  else
    key_str="${key:0:40}..."
  fi

  echo "$key_str"
}

validate_keystr() {
  local keystr="$1"
  [ -z "$keystr" ] && return 1

  # why doesn't this work on newer systems?
  # ssh-keygen -f <(echo "$keystr") -l &>/dev/null

  local tmp_file=`mktemp`
  [ $? -ne 0 ] && return 1

  echo "$keystr" >"$tmp_file"
  [ $? -ne 0 ] && return 1

  ssh-keygen -f "$tmp_file" -l &>/dev/null
  local status=$?
  rm -f "$tmp_file"

  return $status
}

# main()
[ $# -lt 1 ] && usage

self_bin=`readlink -e "$0"`
dir=`dirname "$self_bin"`
we_base_dir=`readlink -e "$dir/.."`
dir_bin=`readlink -e "$dir/../bin"`
www_group='virtwww'

declare -a add_keys
declare -a remove_keys

lib_file="$we_base_dir/lib/functions"
if ! source "$lib_file"; then
  echo "Error: unable to source lib file '$lib_file'" 1>&2
  exit 1
fi

getopt_flags="Rnir:a:d:S:"

unset read_stdin OPTS for_root append_str
while getopts $getopt_flags OPTS; do
  case "$OPTS" in
    a)
      if validate_keystr "$OPTARG"; then
        add_keys+=( "$OPTARG" )
      else
        echo "Error: unable to validate key to add, received on command line." 1>&2
        exit 1
      fi
      ;;
    r)
      if validate_keystr "$OPTARG"; then
        remove_keys+=( "$OPTARG" )
      else
        echo "Error: unable to validate key to remove, received on command line." 1>&2
        exit 1
      fi
      ;;
    i)
      read_stdin=1
      ;;
    d)
      key_dir="$OPTARG"
      ;;
    n)
      # this option is deprecated. Will not use it anymore
      # it's just here not to break any legacy code that might use it
      # will be removed soon
      :
      ;;
    S)
      append_str="$OPTARG"
      ;;
    R)
      for_root=1
      ;;
    ?)
      usage
      ;;
  esac
done
shift $(( $OPTIND - 1 ))

[ $# -lt 1 ] && usage

if [ -z "$for_root" ]; then
  vhost="$1"
  user="w_$vhost"
  # using mode archive: it's OK to operate on a locked vhost
  if ! $dir/check-vhost-name archive "$vhost"; then
    echo "Invalid vhost name." 1>&2
    exit 1
  fi
else
  user="$1"
fi

[ -z "$key_dir" ] && key_dir=$(eval echo \~$user/.ssh)
key_file="$key_dir/authorized_keys"

# Create .ssh directory and authorized_keys file if not existent
if [ ! -d "$key_dir" ]; then
    mkdir -m 700 "$key_dir"
    if [ $? -ne 0 ]; then
      echo "Error: unable to create key directory '$key_dir' for user '$user'" 1>&2
      exit 1
    fi
    chown "${user}":"${www_group}" "$key_dir"
fi

if [ ! -f "$key_file" ]; then
    touch "$key_file"
    chmod 600 "$key_file"
    chown "${user}":"${www_group}" "$key_file"
fi

lock_file="`lock_path "$key_file"`"
if [ $? -ne 0 ]; then
  exit 1
fi
trap 'exit 1' INT QUIT TERM HUP
trap 'rm -f -- "$lock_file"' EXIT

# reads from stdin if requested
line_n=0
if [ -n "$read_stdin" ]; then
  echo "Reading from STDIN, add keys with +:key_string, "\
"remove keys with -:key_string. One key per line." 1>&2

  while read LINE; do
    line_n=$(( $line_n + 1 ))
    [ ${#LINE} -eq 0 ] && continue # next if line empty
    [ "${LINE:0:1}" == "#" ] && continue

    cmd="${LINE:0:1}"
    if [ "$cmd" != "+" -a "$cmd" != "-" -o ${#LINE} -lt 3 -o "${LINE:1:1}" != ':' ]; then
      echo "Warning: invalid line $line_n"
      continue
    fi

    key=${LINE:2}
    if ! validate_keystr "$key"; then
      echo "Warning: failed validation for key received on STDIN on line $line_n. Skipping..." 1>&2
      continue
    fi

    if [ "$cmd" == "+" ]; then
      add_keys+=( "$key" )
    else
      remove_keys+=( "$key" )
    fi
  done
fi

# check if received any key
if [ ${#add_keys[@]} -eq 0 -a ${#remove_keys[@]} -eq 0 ]; then
  echo "Error: didn't receive any key to work on. Either pass keys on "\
"command line with -a or -r or send it through stdin (-i)."
  exit 1
fi

# Process the request
n_max=${#add_keys[@]}

declare -i n_eval=0
n_add=0
while [ $n_eval -ne $n_max ]; do
  new_key="${add_keys[$n_eval]}"
  n_eval+=1

  if key_is_installed "$user" "$key_file" "$new_key"; then
    key_str=$(key_substr "$new_key")
    echo "Warning: key '$key_str' already installed for user '$user'" 1>&2
  else
    install_key "$user" "$key_file" "$new_key" "$append_str"
    if [ $? -ne 0 ]; then
      echo "Error: unable to add key '$new_key'" 1>&2
      exit 1
    fi
    n_add=$(( $n_add + 1 ))
  fi
done

n_eval=0
n_rem=0
n_max=${#remove_keys[@]}
while [ $n_eval -ne $n_max ]; do
  new_key="${remove_keys[$n_eval]}"
  n_eval+=1
  if key_is_installed "$user" "$key_file" "$new_key"; then
    remove_key "$user" "$key_file" "$new_key"
    if [ $? -ne 0 ]; then
      echo "Error: unable to remove key from file '$key_file'" 1>&2
      exit 1
    fi
    n_rem=$(( $n_rem + 1 ))
  else
    key_str=$(key_substr "$new_key")
    echo "Warning: key '$key_str' is not installed for user '$user', ignoring..." 1>&2
  fi
done

echo "Added $n_add keys, removed $n_rem keys."
exit 0
