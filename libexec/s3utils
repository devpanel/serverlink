#!/bin/bash

error() {
  local msg="$1"
  local exit_code="${2:-1}"

  [ -n "$msg" ] && echo "Error: $msg" 1>&2
  exit $exit_code
}

usage_config_vhost() {
  echo "Usage: $self_bin $op [options] <vhost>

  Options:
    -e                  enable archive uploads to S3 for this vhost
    -D                  disable archive uploads to S3 for this vhost
    -F                  force disable when server wide uploads are enabled
    -b bucket_name      sets the bucket name to be used by the vhost
                        (overrides the global option, if that one is set)
    -i                  read key id and secret key from STDIN (in the format
                        specified below)
    -h                  displays the help msg


  Configures the S3 credentials for the specified vhost.

  Reads the S3 credentials from STDIN and writes the s3cfg file for the
  vhost specified.

  The STDIN input is expected to be in the following format:

default.access_key=asdadfasdf
default.secret_key=qwertyqwerty

  The contents are read from STDIN only for privacy, to avoid other users
  snooping it on shared servers.
"

  exit 1
}

usage() {
  echo "Usage: $self_bin_basename <action> [args] [-h]

  Known actions:
    config_server
    config_vhost

  To see the specific usage details for each action, run it as:
  # $self_bin_basename <action> -h
"

  exit 1
}

usage_config_server() {
  echo "Usage: $self_bin_basename $op [options]

  Options:
    -e                  enable archive uploads to S3 for this server
    -D                  disable archive uploads to S3 for this server
    -b bucket_name      sets the bucket name to be used by all vhosts on the
                        system
    -i                  read key id and secret key from STDIN (in the format
                        specified below)
    -h                  displays the help msg

  Creates the S3cfg file to be used by all vhosts on this server, 
  for uploading snapshots to S3.

  The STDIN input is expected to be in the following format:

default.access_key=asdadfasdf
default.secret_key=qwertyqwerty

  The contents are read from STDIN only for privacy, to avoid other users
  snooping it on shared servers.
"

  exit 1
}

# main

self_bin=$(readlink -e "$0")
if [ $? -ne 0 ]; then
  echo "Error: unable to get self path" 1>&2
  exit 1
fi
self_bin_basename="${self_bin##*/}"

self_dir="${self_bin%/*}"
sys_dir="${self_dir%/*}"

op="$1"
shift

case "$op" in
  config_vhost)
    [ $# -eq 0 -o -z "$1" ] && usage_config_vhost
    getopt_flags='hieDFb:'
    unset bucket_name read_stdin do_enable do_disable force_disable
    declare -i action_op=0
    while getopts $getopt_flags OPTN; do
      case $OPTN in
        h)
          usage_config_vhost
          ;;
        b)
          bucket_name="$OPTARG"
          do_enable=1
          action_opt+=1
          ;;
        e)
          do_enable=1
          action_opt+=1
          ;;
        i)
          read_stdin=1
          do_enable=1
          action_opt+=1
          ;;
        D)
          do_disable=1
          action_opt+=1
          ;;
        F)
          force_disable=1
          do_disable=1
          action_opt+=1
          ;;
        *)
          usage_config_vhost
          ;;
      esac
    done
    [ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

    [ $# -eq 0 -o -z "$1" ] && usage_config_vhost

    vhost="$1"

    "$sys_dir/libexec/check-vhost-name" archive "$vhost" || exit 1

    if [ $action_opt -eq 0 ]; then
      usage_config_vhost
    fi

    if [ -n "$do_enable" -a -n "$do_disable" ]; then
      error "can't enable and disable at the same time"
    fi

    system_wide_enabled=$(deref_os_prop "$sys_dir" upload_archives_to_s3 \
                          2>/dev/null )
    # just used to check whether there's a global bucket defined, in case
    # the specific vhost bucket is not defined
    system_wide_bucket=$(deref_os_prop "$sys_dir" s3_bucket_vhost_archives \
                          2>/dev/null )

    upd_str=""
    if [ -n "$do_enable" ]; then
      upd_str+="set config.upload_archives_to_s3 1"$'\n'
    elif [ -n "$do_disable" ]; then
      if [ -n "$system_wide_enabled" -a -z "$force_disable" ]; then
        error "server wide uploads are enabled. Please force disabling with option -F"
      fi

      if [ -n "$force_disable" ]; then
        upd_str+="set config.upload_archives_to_s3 -"$'\n'
      else
        upd_str+="rm config.upload_archives_to_s3"$'\n'
      fi
    fi

    if [ -n "$do_enable" -a -z "$bucket_name" -a -z "$system_wide_bucket" ]; then
      error "missing bucket name, as system wide bucket is not defined"
    fi

    if [ -n "$do_enable" -a -n "$bucket_name" ]; then
      upd_str+="set config.s3_bucket $bucket_name"$'\n'
    fi

    echo "$upd_str" | "$sys_dir/libexec/apache-metadata-handler" -q
    if [ $? -eq 0 ]; then
      echo "Successfully modified vhost options."
    else
      error "unable to update vhost options."
    fi

    st=0
    if [ -n "$read_stdin" ]; then
      umask 077
      s3cfg_file="$sys_dir/config/vhosts/$vhost/s3cfg"

      # for privacy reasons it reads only from STDIN
      #   (on shared servers it's a privacy leak to send the keys on command line)
      "$sys_dir/bin/update-ini-file" -c "$s3cfg_file"
      st=$?
    fi

    exit $st
    ;;
  config_server)
    unset bucket_name read_stdin do_enable do_disable
    declare -i action_opts=0
    getopt_flags='heDib:'
    while getopts $getopt_flags OPTN; do
      case $OPTN in
        h)
          usage_config_server
          ;;
        b)
          bucket_name="$OPTARG"
          do_enable=1
          ;;
        i)
          read_stdin=1
          do_enable=1
          action_opts+=1
          ;;
        e)
          do_enable=1
          action_opts+=1
          ;;
        D)
          do_disable=1
          action_opts+=1
          ;;
        *)
          usage_config_server
          ;;
      esac
    done
    [ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

    if [ $action_opts -eq 0 ]; then
      usage_config_server
    fi

    if [ -n "$do_enable" -a -n "$do_disable" ]; then
      error "can't enable and disable at the same time"
    fi

    upd_str=""
    if [ -n "$do_enable" ]; then
      upd_str+="set upload_archives_to_s3 1"$'\n'
    elif [ -n "$do_disable" ]; then
      upd_str+="rm upload_archives_to_s3"$'\n'
    fi

    if [ -n "$do_enable" -a -n "$bucket_name" ]; then
      upd_str+="set s3_bucket_vhost_archives $bucket_name"$'\n'
    fi

    echo "$upd_str" | "$sys_dir/libexec/system-metadata-handler" -q
    if [ $? -eq 0 ]; then
      echo "Successfully modified server options."
    else
      error "unable to update server options."
    fi

    st=0
    if [ -n "$read_stdin" ]; then
      s3cfg_file="$sys_dir/etc/s3cfg"

      umask 077
      "$sys_dir/bin/update-ini-file" -c "$s3cfg_file"
      st=$?
    fi

    exit $st
    ;;
  $self_bin_basename|*)
    usage
    ;;
esac
