#!/bin/bash

declare -a just_handled_ar

error() {
  local msg="$1"
  local exit_code="${2:-1}"

  [ -n "$msg" ] && echo "Error: $msg" 1>&2

  if [ "$exit_code" == - ]; then
    return 1
  else
    exit $exit_code
  fi
}

usage() {
  echo "Usage: ${0##*/} [global_options] <command> <options>

  Global Options:
    -h|--help [cmd]             show this help message

  Commands:
    install
    update-all
    list-packages
    remove
    enable-option
    disable-option

  To get help about a specific command, run:
  \$ ${0##*/} --help <command>
"

  exit 1
}

is_valid_package_name() {
  local name="$1"

  local pkg_regex='^[A-Za-z0-9]+[A-Za-z0-9_.-]+$'

  if [ -z "$name" ]; then
    echo "$FUNCNAME(): missing package name" 1>&2
    return 1
  fi

  if [[ "$name" =~ $pkg_regex ]]; then
    return 0
  else
    return 1
  fi
}

is_installed() {
  local pkg="$1"
  local system_dir="${2:-$system_dir}"

  if ! is_valid_package_name "$pkg"; then
    return 1
  fi

  if [ -L "$system_dir/config/packages/$pkg/version" ]; then
    return 0
  else
    return 1
  fi
}

has_config_link() {
  local pkg="$1"
  local link="$2"
  local system_dir="${3:-$system_dir}"

  if [ -L "$system_dir/config/packages/$pkg/$link" ]; then
    return 0
  else
    return 1
  fi
}

is_to_skip_install() {
  local pkg="$1"
  local system_dir="${2:-$system_dir}"

  has_config_link "$pkg" dont_install "$system_dir"
}

is_to_skip_updates() {
  local pkg="$1"
  local system_dir="${2:-$system_dir}"

  has_config_link "$pkg" dont_update "$system_dir" 
}

needs_update() {
  local pkg="$1"
  local serial="$2"
  local system_dir="${3:-$system_dir}"

  local curr_serial
  local serial_file="$system_dir/config/packages/$pkg/serial"

  # return 2 == internal error
  # return 1 == no update needed

  curr_serial=$(deref_contents "$serial_file") || return 2

  if [ $serial -gt $curr_serial ]; then
    return 0
  else
    return 1
  fi
}

remove_leftover_files() {
  local package="$1"
  local old_list="$2"
  local new_list="$3"
  local system_dir=${4:-$system_dir}

  if [ $# -ne 3 -o -z "$1" -o -z "$2" -o -z "$3" ]; then
    echo "$FUNCNAME(): missing arguments" 1>&2
    return 1
  fi

  local tmp_pkg_dir="$tmp_dir/$package"

  local old_list_sorted_txt="$tmp_pkg_dir/old_list_sorted.txt"
  local new_list_sorted_txt="$tmp_pkg_dir/new_list_sorted.txt"

  sort -u "$old_list" >"$old_list_sorted_txt"
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to sort file $old_list" 1>&2
    return 1
  fi

  sort -u "$new_list" >"$new_list_sorted_txt"
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to sort file $new_list" 1>&2
    return 1
  fi

  local only_in_old_txt="$tmp_pkg_dir/only_in_old.txt"
  comm -23 "$old_list_sorted_txt" "$new_list_sorted_txt" >"$only_in_old_txt"
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to get files only in previous pkg" 1>&2
    return 1
  fi

  if [ -s "$only_in_old_txt" ]; then
    # if there are files present only the in the previous version

    # remove the files that are only in the previous package
    remove_pkg_files_from_list "$only_in_old_txt" "$system_dir" "$tmp_pkg_dir"
  else
    # all files are the same
    return 0
  fi
}

remove_pkg_files_from_list() {
  local list_file="$1"
  local system_dir="$2"
  local tmp_dir="${3:-$tmp_dir}"

  if [ ! -e "$list_file" ]; then
    echo "$FUNCNAME(): list file '$list_file' doesn't exist" 1>&2
    return 1
  elif [ ! -f "$list_file" ]; then
    echo "$FUNCNAME(): list file '$list_file' is not a regular file" 1>&2
    return 1
  elif [ ! -s "$list_file" ]; then
    echo "$FUNCNAME(): list file '$list_file' is empty" 1>&2
    return 1
  fi

  if [ ! -d "$tmp_dir" ]; then
    echo "$FUNCNAME(): missing tmp dir '$tmp_dir'" 1>&2
    return 1
  fi

  local file full_file_path
  local dirs_txt="$tmp_dir/dirs.txt"
  local others_txt="$tmp_dir/others.txt"

  while read file; do
    full_file_path=$(readlink -m "$system_dir/$file")
    if [ $? -ne 0 ]; then
      echo "$FUNCNAME(): unable to get full path of file $file" 1>&2
      return 1
    fi

    if [ ! -e "$full_file_path" ]; then
      continue # skip files that have been removed
    elif [ -d "$full_file_path" ]; then
      echo "$full_file_path" >>"$dirs_txt"
    else
      echo "$full_file_path" >>"$others_txt"
    fi
  done < "$list_file"

  # first remove all files (and symlinks, etc)
  if [ -s "$others_txt" ]; then
    [ -n "$verbose" ] && echo "Removing left over files..."
    while read file; do
      if is_inside_system_dir "$file"; then
        [ -n "$verbose" ] && echo "  $file"
        rm -f "$file"
      else
        echo "  Warning: file $file is outside directory $system_dir, skipping..." 1>&2
        sleep 1
      fi
    done < "$others_txt"
  fi

  # now remove directories of the package
  if [ -s "$dirs_txt" ]; then

    # for directory removal the file needs to be reverse sorted because
    # directories need to be removed in an inverse order
    # e.g. /a /a/b  /a/b/c needs  to be removed first as /a/b/c then
    # /a/b and only then /a
    local dirs_rev_txt="$dirs_txt.rev"
    sort -r -u "$dirs_txt" >"$dirs_rev_txt"
    if [ $? -ne 0 ]; then
      echo "$FUNCNAME(): unable to sort-reverse file $dirs_txt" 1>&2
      return 1
    fi

    [ -n "$verbose" ] && echo "Removing left over directories..."

    local dir_name
    while read dir_name; do
      if is_inside_system_dir "$dir_name"; then
        n_entries=$(stat -c '%h' "$dir_name")
        if [ $? -ne 0 ]; then
          echo "Warning: unable to get number of entries in dir $dir_name." 1>&2
          continue
        fi

        if [ $n_entries -eq 2 ]; then
          [ -n "$verbose" ] && echo "  $dir_name/"
          # using rmdir to remove only empty directories (as files have been
          # removed in the previous step). Not using rm -rf $dir_name not to
          # remove system dirs (e.g. bin/ ) that are common to all packages
          #
          # By using rmdir it'll remove only non-empty directories.

          rmdir "$dir_name" 2>/dev/null
        else
          [ -n "$verbose" ] && echo "  $dir_name (keeping, not empty)"
        fi
      else
        echo "  Warning: directory $dir_name is outside directory $system_dir, skipping..." 1>&2
        sleep 1
      fi
    done < "$dirs_rev_txt"
  fi

  return 0
}

devpanel_install_pkg() {
  local package="$1"
  local serial="$2"
  local version="$3"
  local file="$4"
  local system_dir="$5"

  local tmp_pkg_dir="$tmp_dir/$package/pkg-extracted"
  if [ ! -d "$tmp_pkg_dir" ] && ! mkdir -p "$tmp_pkg_dir" ; then
    echo "$FUNCNAME(): unable to create temp dir '$tmp_pkg_dir'" 1>&2
    return 1
  fi

  local raw_files_list="$tmp_pkg_dir/pkg_raw_files.txt"
  extract_raw_file_list "$file" >"$raw_files_list"
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to extract the list of files in the package" 1>&2
    return 1
  fi

  local filtered_file_list="$tmp_pkg_dir/pkg_filtered_files.txt"
  filter_pkg_files "$raw_files_list" >"$filtered_file_list"
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): filter_pkg_files failed" 1>&2
    return 1
  fi

  local pkg_register_dir="$system_dir/config/packages/$package"
  if [ ! -d "$pkg_register_dir" ] && ! mkdir "$pkg_register_dir"; then
    echo "$FUNCNAME(): unable to create package dir '$pkg_register_dir'" 1>&2
    return 1
  fi

  tar --no-same-owner -zxf "$file" -C "$tmp_pkg_dir" ./setup/
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): unable to extract package setup files for package '$package-$version'" 1>&2
    return 1
  fi

  # old exec logic (to be removed after all packages are migrated)
  local pre_install_script="$tmp_pkg_dir/setup/pre-install"
  local post_install_script="$tmp_pkg_dir/setup/post-install"
  if [ -f "$pre_install_script" -a -x "$pre_install_script" ]; then
    "$pre_install_script" "$package" "$version" "$system_dir"
  fi

  # new exec logic
  local has_setup_script=""
  local setup_bin="$tmp_pkg_dir/setup/setup-package"
  if [ -f "$setup_bin" -a -x "$setup_bin" ]; then
    has_setup_script=1
  fi

  if [ -n "$has_setup_script" ]; then
    DEVPANEL_HOME="$DEVPANEL_HOME"       \
    DEVPANEL_PKG_NAME="$package"         \
    DEVPANEL_PKG_SERIAL="$serial"        \
    DEVPANEL_PKG_VERSION="$version"      \
      "$setup_bin" install pre-install
  fi

  tar --no-same-owner -zxf "$file" -C "$system_dir" --strip-components 2 ./pkg-files/
  if [ $? -eq 0 ]; then
    local final_file_list="$pkg_register_dir/filelist.txt"
    cp "$filtered_file_list" "$final_file_list"
    if [ $? -ne 0 ]; then
      echo "$FUNCNAME(): warning, failed to copy list of files" 1>&2
    fi
  else
    echo "$FUNCNAME(): unable to extract package files" 1>&2
    return 1
  fi

  # old exec logic (to be removed after all packages are migrated)
  if [ -f "$post_install_script" -a -x "$post_install_script" ]; then
    "$post_install_script" "$package" "$version" "$system_dir"
  fi

  # new exec logic
  if [ -n "$has_setup_script" ]; then
    DEVPANEL_HOME="$DEVPANEL_HOME"       \
    DEVPANEL_PKG_NAME="$package"         \
    DEVPANEL_PKG_SERIAL="$serial"        \
    DEVPANEL_PKG_VERSION="$version"      \
      "$setup_bin" install post-install
  fi

  devpanel_update_pkg_link_version "$package" "$serial" "$version" "$system_dir"
  if [ $? -ne 0 ]; then
    return 1
  fi

  return 0
}

devpanel_upgrade_pkg() {
  local package="$1"
  local serial="$2"
  local version="$3"
  local file="$4"
  local system_dir="$5"

  local pkg_reg_dir="$system_dir/config/packages/$package"
  if [ ! -d "$pkg_reg_dir" ]; then
    echo "$FUNCNAME(): cannot upgrade, missing pkg info dir $pkg_reg_dir" 1>&2
    return 1
  fi

  local tmp_pkg_dir="$tmp_dir/$package"
  if [ ! -d "$tmp_pkg_dir" ] && ! mkdir -p "$tmp_pkg_dir" ; then
    echo "$FUNCNAME(): unable to create temp dir '$tmp_pkg_dir'" 1>&2
    return 1
  fi

  local tmp_pkg_extracted_dir="$tmp_pkg_dir/pkg-extracted"
  if [ ! -d "$tmp_pkg_extracted_dir" ]; then
    if ! mkdir -p "$tmp_pkg_extracted_dir"; then
      echo "$FUNCNAME(): unable to create temp dir '$tmp_pkg_extracted_dir'" 1>&2
      return 1
    fi

    tar --no-same-owner -zxf "$file" -C "$tmp_pkg_extracted_dir" ./setup/
    if [ $? -ne 0 ]; then
      echo "$FUNCNAME(): unable to extract package setup files for package '$package-$version'" 1>&2
      return 1
    fi
  fi

  local curr_serial serial_file version_file previous_version
  serial_file="$pkg_reg_dir/serial"
  version_file="$pkg_reg_dir/version"
  curr_serial=$(deref_contents "$serial_file")       || return 2
  previous_version=$(deref_contents "$version_file") || return 2

  if [ "$serial" == "$curr_serial" ]; then
    echo "$FUNCNAME(): cannot upgrade, serial number is the same ($serial)" 1>&2
    return 1
  fi
  
  local file_list="$pkg_reg_dir/filelist.txt"
  local prev_files_list="$tmp_pkg_dir/prev_ver_files.txt"

  if ! cp "$file_list" "$prev_files_list"; then
    echo "$FUNCNAME(): unable to copy list of existing files" 1>&2
    return 1
  fi

  [ -n "$verbose" ] && \
    echo "Upgrading $package, pre-installing serial $serial, version $version"

  local has_setup_script=""
  local setup_bin="$tmp_pkg_extracted_dir/setup/setup-package"
  if [ -f "$setup_bin" -a -x "$setup_bin" ]; then
    has_setup_script=1
  fi

  if [ -n "$has_setup_script" ]; then
    DEVPANEL_HOME="$DEVPANEL_HOME"                          \
    DEVPANEL_PKG_NAME="$package"                            \
    DEVPANEL_PKG_SERIAL="$serial"                           \
    DEVPANEL_PKG_SERIAL_PREVIOUS="$curr_serial"             \
    DEVPANEL_PKG_VERSION="$version"                         \
    DEVPANEL_PKG_VERSION_PREVIOUS="$previous_version"       \
      "$setup_bin" update pre-update
  fi

  devpanel_install_pkg "$@"
  if [ $? -ne 0 ]; then
    echo "$FUNCNAME(): failed to pre-install package $package" 1>&2
    return 1
  fi

  if [ -n "$has_setup_script" ]; then
    DEVPANEL_HOME="$DEVPANEL_HOME"                          \
    DEVPANEL_PKG_NAME="$package"                            \
    DEVPANEL_PKG_SERIAL="$serial"                           \
    DEVPANEL_PKG_SERIAL_PREVIOUS="$curr_serial"             \
    DEVPANEL_PKG_VERSION="$version"                         \
    DEVPANEL_PKG_VERSION_PREVIOUS="$previous_version"       \
      "$setup_bin" update post-update
  fi

  remove_leftover_files "$package" "$prev_files_list" "$file_list"

  if [ -n "$has_setup_script" ]; then
    DEVPANEL_HOME="$DEVPANEL_HOME"                          \
    DEVPANEL_PKG_NAME="$package"                            \
    DEVPANEL_PKG_SERIAL="$serial"                           \
    DEVPANEL_PKG_SERIAL_PREVIOUS="$curr_serial"             \
    DEVPANEL_PKG_VERSION="$version"                         \
    DEVPANEL_PKG_VERSION_PREVIOUS="$previous_version"       \
      "$setup_bin" update post-cleanup
  fi

  return 0
}

devpanel_remove_package() {
  local package="${1##*/}"
  local system_dir="${2:-$system_dir}"

  if [ -z "$package" -o -z "$system_dir" ]; then
    echo "$FUNCNAME(): missing arguments" 1>&2
    return 1
  fi

  if [ ! -d "$system_dir" ]; then
    echo "$FUNCNAME(): missing system_dir directory '$system_dir'" 1>&2
    return 1
  fi

  local pkg_reg_dir file_list 
  pkg_reg_dir="$system_dir/config/packages/$package"
  file_list="$pkg_reg_dir/filelist.txt"
  if [ ! -d "$pkg_reg_dir" ]; then
    echo "$FUNCNAME(): missing package reg dir '$pkg_reg_dir'" 1>&2
    return 1
  fi

  if [ -s "$file_list" ]; then
    remove_pkg_files_from_list "$file_list" "$system_dir" "$tmp_dir"
    if [ $? -ne 0 ]; then
      echo "$FUNCNAME(): unable to remove package file" 1>&2
      return 1
    fi
  fi

  rm -rf "$pkg_reg_dir"
}

extract_raw_file_list() {
  local file="$1"

  if [ $# -lt 1 -o -z "$1" ]; then
    echo "$FUNCNAME(): missing arguments" 1>&2
    return 1
  fi

  if tar -ztf "$file"; then
    return 0
  else
    echo "$FUNCNAME(): unable to extract list of files from $file" 1>&2
    return 1
  fi
}

filter_pkg_files() {
  local input_file="$1"

  if [ $# -lt 1 -o -z "$1" ]; then
    echo "$FUNCNAME(): missing arguments" 1>&2
    return 1
  fi

  sed -e '
    /^[[:space:]]*\/\+/d; # remove lines starting in: space /
    /^\.\/pkg-files\//!d; # remove anything not starting in ./pkg-files/
    s/^\.\/pkg-files\///; # remove ./pkg-files/ prefix from files
    /^[[:space:]]*$/d;    # remove empty lines
  ' "$input_file"
}

usage_update_all() {
  echo "Usage: ${0##*/} update-all [ options ] -y

  Options:
    -y            effectively update
    -h            show this usage msg
"
  exit 1
}

usage_install() {
  echo "Usage: ${0##*/} install [options] <-f file> <-p name> <-V version>

  Options:
    -n package_name           name of the package
    -f package_file           file that has the package contents
    -V version                version string for the package
    -S serial_number          serial number of the package (by default 0)
    -h                        show this usage msg
"
  exit 1
}

usage_remove() {
  echo "Usage: ${0##*/} [options] remove <package>

  Options:
    -h            show this usage msg

  Remove the specified package from the system.
"
  exit 1
}

usage_list_packages() {
  echo "Usage: ${0##*/} list-packages

  Options:
    -n            list only the package names
    -h            show this usage msg

  Displays the list of packages installed.
"
  exit 1
}

usage_enable_option() {
  echo "Usage: ${0##*/} enable-option -p <package> -o <opt_name>

  Options:
    -p package_name       the name of the package to which the option applies

    -o option_name        the name of the option. Use this option multiple
                          times to set more than one option at a time.
                          Available options: dont_update, dont_install

    -h                    show this usage msg

  Enables configuration options on the specified packages.
"
  exit 1
}

usage_disable_option() {
  echo "Usage: ${0##*/} disable-option -p <package> -o <opt_name>

  Options:
    -p package_name       the name of the package to which the option applies

    -o option_name        the name of the option. Use this option multiple
                          times to set more than one option at a time.
                          Available options: dont_update, dont_install

    -h                    show this usage msg

  Disables configuration options on the specified packages.
"
  exit 1
}


cleanup() {
  unlock_path "$lock_file"

  [ -d "$tmp_dir" ] && rm -rf "$tmp_dir"
}

is_inside_system_dir() {
  local path="$1"
  local system_dir="${2:-$system_dir}"

  if [ "${path#$system_dir/}" == "$path" ]; then
    return 1
  else
    return 0
  fi
}

get_list_of_packages() {
  local pkg_reg_dir="$system_dir/config/packages"

  local _entry
  for _entry in $(ls "$pkg_reg_dir"); do
    if is_installed "$_entry"; then
      echo "$_entry"
    fi
  done
}

get_package_version() {
  local pkg="$1"
  local pkg_reg_dir="$system_dir/config/packages"

  readlink "$pkg_reg_dir/$pkg/version"
}

get_package_serial() {
  local pkg="$1"
  local pkg_reg_dir="$system_dir/config/packages"

  readlink "$pkg_reg_dir/$pkg/serial"
}

enable_dont_update() {
  local pkg="$1"

  local pkg_dir="$system_dir/config/packages/$pkg"
  local link="$pkg_dir/dont_update"

  rm -f "$link"

  ln -s 1 "$link"
}

disable_dont_update() {
  local pkg="$1"

  local pkg_dir="$system_dir/config/packages/$pkg"
  local link="$pkg_dir/dont_update"

  rm -f "$link"
}

enable_dont_install() {
  local pkg="$1"

  local pkg_dir="$system_dir/config/packages/$pkg"
  local link="$pkg_dir/dont_install"

  if [ ! -d "$pkg_dir" ]; then
    mkdir -m 755 "$pkg_dir"
  fi

  rm -f "$link"

  ln -s 1 "$link"
}

disable_dont_install() {
  local pkg="$1"

  local pkg_dir="$system_dir/config/packages/$pkg"
  local link="$pkg_dir/dont_install"

  rm -f "$link"
}

# main

[ -z "$1" ] && usage

#
# change the default umask so that files don't get too restriced
# permissions on systems with a more restrictive umask
#
umask 022

unset verbose
getopt_flags='vh-'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    [h-])
      if [ "$1" == "-h" -o "$1" == "--help" ]; then
        if [ -z "$2" ]; then
          usage
        elif [[ "$2" =~ ^[A-Za-z0-9]+[A-Za-z0-9_-]+$ ]]; then
          func=${2//-/_}
          if [ "$(type -t usage_$func)" == function ]; then
            usage_$func
          else
            error "unknown command '$2'"
          fi
        else
          error "unknown command '$2'"
        fi
      else
        error "unknown option '$1'"
      fi
      ;;
    v)
      verbose=1
      ;;
    *)
      error "unknown option"
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))
unset OPTIND

self_bin=`readlink -e "$0"`
if [ $? -ne 0 ]; then
  error "unable to determine self path"
fi

self_dir=${self_bin%/*}
system_dir=${self_dir%/*}
lib_file="$system_dir/lib/functions"
lock_file="$system_dir/var/lock/${0##*/}"

if ! source "$lib_file"; then
  echo "Error: unable to source file '$lib_file'" 1>&2
  exit 1
fi

packages_url=$(get_package_metadata_url ) || exit 1

if ! lock_path "$lock_file" >/dev/null; then
  error "unable to lock. There's probably another instance running."
fi
trap 'cleanup' EXIT

op="$1"
shift

case "$op" in
  update-all)
    getopt_flags='hy'
    unset yes_sure_update
    while getopts $getopt_flags OPTN; do
      case $OPTN in
        y)
          yes_sure_update=1
          ;;
        h|*)
          usage
          ;;
      esac
    done
    [ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

    if [ -z "$yes_sure_update" ]; then
      usage_update_all
    fi

    if is_package_updates_disabled; then
      error "this system is configured not to have automated updates."
    fi

    # should not use /tmp here because the need to execute post-install and
    # post-update scripts, and it breaks if /tmp is mounted with noexec
    if ! tmp_dir=`mktemp -d "$system_dir/var/tmp/tmp.XXXXXX"`; then
      error "unable to create temporary directory"
    fi
    trap 'exit 1' INT HUP TERM QUIT

    pkg_index_url="${packages_url%/}/metadata.ltsv"
    updates_file="$tmp_dir/package_index.ltsv"

    if ! download_file "$pkg_index_url" "$updates_file"; then
      error "unable to download update file"
    fi

    linux_distro=$(wedp_auto_detect_distro)
    if [ $? -ne 0 -o -z "$linux_distro" ]; then
      error "unable to detect the linux distribution of this server"
    fi

    distro_version=$(wedp_auto_detect_distro_version)
    if [ $? -ne 0 ]; then
      error "unable to detection version of current distro"
    fi

    distro_major=${distro_version%%.*}

    linux_arch=$(uname -m)
    if [ $? -ne 0 -o -z "$linux_arch" ]; then
      error "unable to detect the machine architecture"
    fi

    declare -i n_updated=0 n_failed_update=0 n_installed=0 n_failed_install=0
    declare -i line_n=0
    while read update_line; do
      line_n+=1
      # ignore: empty lines, line with only spaces or lines starting with "#"
      if [ -z "$update_line" ] || [[ "$update_line" =~ ^\ +$ ]] || \
        [[ "$update_line" =~ ^\ *# ]]; then
        continue
      fi

      unset v_installed v_needs_update has_missing_field

      declare -a fields_ar=( name serial version distro \
                              file_uri file_hash distro_version arch )

      for field in "${fields_ar[@]}"; do
        unset pkg_$field
        ltsv_get_value $field "$update_line" && declare pkg_$field="$_ltsv_value"
      done

      for field in "${fields_ar[@]}"; do
        field_var="pkg_$field"
        if [ -z "${!field_var}" ]; then
          has_missing_field=1
          echo "Warning: missing field $field on line $line_n" 1>&2
          sleep 1
          continue
        fi
      done

      if [ -n "$has_missing_field" ]; then
        echo "Warning: skipping line $line_n due to missing fields" 1>&2
        continue
      fi

      # this avoids a package from being installed or updated more than once
      # when there are multiple rules (e.g. a package with specific distro versions and
      # versions without a distro specification)
      if in_array "$pkg_name" ${just_handled_ar[*]}; then
        continue
      fi

      # skip if the package is for a specific distro that not the current one
      if [ "$pkg_distro" != "-" -a "$pkg_distro" != "$linux_distro" ]; then
        continue
      fi

      # skip if it's for an architecture other than this one
      if [ "$pkg_arch" != "-" -a "$pkg_arch" != "$linux_arch" ]; then
        continue
      fi

      # skip if the package is specific for a distro version not equal to the
      # current one
      if [ "$pkg_distro_version" != "-" \
        -a "$pkg_distro_version" != "$distro_version" \
        -a "$pkg_distro_version" != "$distro_major" ]; then

        continue
      fi

      if is_installed "$pkg_name" "$system_dir"; then
        v_installed=1
      fi

      if [ -z "$v_installed" ] && is_to_skip_install "$pkg_name"; then
        [ -n "$verbose" ] && echo "Skipping $pkg_name, configured not to install"
        continue # not installed, and configured not to install
      elif [ -n "$v_installed" ] && is_to_skip_updates "$pkg_name"; then
        [ -n "$verbose" ] && echo "Skipping $pkg_name, configured not to update"
        continue # installed but configured not to update
      elif [ -n "$v_installed" ] && needs_update "$pkg_name" "$pkg_serial"; then
        v_needs_update=1 # installed and needs update
      elif [ -n "$v_installed" -a -z "$v_needs_update" ]; then
        continue # is installed and doesn't need update
      fi

      if [ -z "$v_installed" -o -n "$v_needs_update" ]; then
        pkg_file="$tmp_dir/${pkg_file_uri##*/}"
        pkg_url="${packages_url%/}/${pkg_file_uri#/}"

        echo "Downloading $pkg_name $pkg_version from $pkg_url..." 1>&2
        just_handled_ar+=( "$pkg_name" )
        if ! download_file_n_check_sha512 "$pkg_url" "$pkg_file" '' '' \
            "$pkg_file_hash"; then
          echo "Warning: failed download for package '$pkg_name' version '$pkg_version' from URL '$pkg_url'" 1>&2
          n_failed_update+=1
          continue
        fi
      fi

      if [ -z "$v_installed" ]; then
        echo "Installing $pkg_name version $pkg_version..."
        devpanel_install_pkg "$pkg_name" "$pkg_serial" "$pkg_version" \
                             "$pkg_file" "$system_dir"
        if [ $? -eq 0 ]; then
          n_installed+=1
        else
          n_failed_install+=1
        fi
        just_handled_ar+=( "$pkg_name" )
      elif [ -n "$v_needs_update" ]; then
        echo "Updating $pkg_name ... (new serial: $pkg_serial, new version: $pkg_version)"
        devpanel_upgrade_pkg "$pkg_name" "$pkg_serial" "$pkg_version" \
                             "$pkg_file" "$system_dir"
        if [ $? -eq 0 ]; then
          n_updated+=1
        else
          n_failed_update=1
        fi
        just_handled_ar+=( "$pkg_name" )
      fi
    done < "$updates_file"

    if [ $n_failed_update -eq 0 -a $n_failed_install -eq 0 \
      -a $n_updated -eq 0 -a $n_installed -eq 0 ]; then

      echo "Everything up to date."
      exit 0
    fi

    if [ $n_failed_update -gt 0 ]; then
      echo "Failed to update $n_failed_update packages."
    fi

    if [ $n_failed_install -gt 0 ]; then
      echo "Failed to install $n_failed_install packages."
    fi

    if [ $n_updated -gt 0 ]; then
      echo "Updated $n_updated packages."
    fi

    if [ $n_installed -gt 0 ]; then
      echo "Installed $n_installed packages."
    elif [ $n_installed -eq 0 -a $n_updated -eq 0 ]; then
      echo "No packages were updated."
    fi

    exit 0
    ;;

  install)
    [ -z "$1" ] && usage_install

    unset file name version serial
    getopt_flags='f:n:V:S:h'
    while getopts $getopt_flags OPTN; do
      case $OPTN in
        f)
          file="$OPTARG"
          ;;
        n)
          name="$OPTARG"
          ;;
        V)
          version="$OPTARG"
          ;;
        S)
          serial="$OPTARG"
          ;;
        h)
          usage_install
          ;;
        *)
          error "unknown option"
          ;;
      esac
    done
    [ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

    for var in file name version; do
      [ -z "${!var}" ] && error "missing value for $var. Please specify it."
    done
    serial=${serial:-0}

    if [ ! -e "$file" ]; then
      error "file '$file' doesn't exist."
    elif [ ! -f "$file" ]; then
      error "path '$file' is not a regular file"
    fi

    # temp directory to be used by the devpanel_install_pkg function
    if ! tmp_dir=$(mktemp -d); then
      error "unable to create temporary directory."
    fi

    devpanel_install_pkg "$name" "$serial" "$version" "$file" "$system_dir"
    st=$?
    if [ $st -eq 0 ]; then
      echo "Successfully installed package $name."
    else
      error "unable to install package $name."
    fi
    exit $st

    ;;

  remove)
    [ -z "$1" ] && usage_$op

    package="$1"
    if ! is_installed "$package"; then
      error "package '$package' is not installed"
    fi

    tmp_dir=$(mktemp -d)
    if [ $? -ne 0 ]; then
      error "unable to create temporary directory"
    fi

    devpanel_remove_package "$package"
    if [ $? -eq 0 ]; then
      echo "Successfully removed package $package."
    else
      error "unable to remove package $package."
    fi

    ;;

  list-packages)
    getopt_flags='n'
    while getopts $getopt_flags OPTN; do
      case $OPTN in
        n)
          only_names=1
          ;;
        h)
          usage_list_packages
          ;;
        *)
          exit 1
          ;;
      esac
    done
    [ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

    for _entry in $(get_list_of_packages ); do
      pkg_str="$_entry"
      if [ -z "$only_names" ]; then
        pkg_str+=" ("
        version=$(get_package_version "$_entry")
        if [ $? -eq 0 ]; then
          pkg_str+="version: $version"
        fi

        serial=$(get_package_serial "$_entry" )
        if [ $? -eq 0 ]; then
          [ -n "$version" ] && pkg_str+=", "
          pkg_str+="serial: $serial"
        fi

        pkg_str+=")"
      fi

      echo "$pkg_str"
    done
    
    ;;

  enable-option|disable-option)
    if [[ $op == enable-option ]]; then
      sub_op=enable
    else
      sub_op=disable
    fi

    [ $# -eq 0 -o -z "$1" ] && usage_${sub_op}_option
    unset package opts_ar
    declare -a opts_ar=()
    getopt_flags='p:o:'
    while getopts $getopt_flags OPTN; do
      case $OPTN in
        p)
          package="$OPTARG"
          ;;

        o)
          opts_ar+=( "$OPTARG" )
          ;;
        *)
          exit 1
          ;;
      esac
    done
    [ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

    if [ -z "$package" ]; then
      error "missing package option. Please specify it."
    fi

    if ! is_valid_package_name "$package"; then
      error "name '$package' is not a valid package name."
    fi

    if [ -z "${#opts_ar[*]}" ]; then
      error "missing option. Please specify at least one."
    fi

    for _opt in "${opts_ar[@]}"; do
      case $_opt in
        dont_update)
          if ! is_installed "$package"; then
            error "package '$package' is not installed"
          fi

          ${sub_op}_dont_update "$package"
          if [ $? -eq 0 ]; then
            echo "Successfully ${sub_op}d option $_opt for $package."
          fi
          ;;

        dont_install)
          if [ "$sub_op" == enable ] && is_installed "$package"; then
            echo "Warning: package is already installed" 1>&2
          fi

          ${sub_op}_dont_install "$package"
          if [ $? -eq 0 ]; then
            echo "Successfully ${sub_op}d option $_opt for $package."
          fi
          ;;

        *)
          error "unknown option '$_opt'"
          ;;
      esac
    done
    ;;

  *)
    error "unknown operation"
    ;;
esac
