#!/bin/bash

run()
{
  echo "  Running $*"
  "$@"
}

error()
{
  echo "ERROR${1+: }$*" >&2
  exit 1
}

usage()
{
  echo "Usage: ${0##*/} SOURCE_VHOST TARGET_VHOST" >&2
  exit 1
}

cleanup() {
  rm -f "$tmp_archive_fp"
}

# main
[ $# -lt 2 ] && usage

self_bin=$(readlink -e "$0")
if [ $? -ne 0 ]; then
  echo "Error: unable to get self path" 1>&2
  exit 1
fi

dir=${self_bin%/*}
sys_dir=${dir%/*}
lib_file="$sys_dir/lib/functions"

while getopts "PpinS:IF" OPTOPT
do
  case "$OPTOPT" in
    P) options="${options+ }-P";;
    p) target_options="$target_options${target_options+ }-p";;
    i) opt_i=1; target_options="$target_options${target_options+ }-i";;
    I) opt_I=1;;
    n) opt_n=1; target_options="$target_options${target_options+ }-n";;
    F) initial_deployment=1; target_options="$target_options${target_options+ }$OPTOPT";;
    S) opt_S="$OPTARG";;
    *) exit 1 ;;
  esac
done
[ $OPTIND -gt 1 ] && shift `expr $OPTIND - 1`

[ -z "$1" -o -z "$2" ] && usage

src_vhost="$1"
tgt_vhost="$2"

$dir/check-vhost-name archive "$src_vhost" || usage
$dir/check-vhost-name restore "$tgt_vhost" || usage

if ! source "$lib_file"; then
  echo "Error: unable to load lib file '$lib_file'" 1>&2
  exit 1
fi
load_devpanel_config || exit $?

load_vhost_config "$src_vhost" || exit $?
source_vuser="$v__vhost__linux_user"

tmp_archive="tmp_archive_$src_vhost-$(date +%b-%d-%Y--%H-%M).tgz"
tmp_archive_fp="$v__vhost__archives_dir/$tmp_archive"

echo "Cloning stage 1: archive $src_vhost to $tmp_archive"
if ! $dir/archive-vhost "$src_vhost" "$tmp_archive"
then
  echo ERROR >&2
  exit 1
fi
trap 'cleanup' EXIT

echo "Cloning stage 2: restore $tgt_vhost from $tmp_archive"
devpanel create vhost --vhost "$tgt_vhost" --from "$tmp_archive_fp" || error

echo Done
