#!/bin/bash
usage() {
  echo "Usage: ${0##*/} <vhost> <app_name>

  This script generates a random token for the specified vhost and app and
  prints the access URL to stdout.
"

  exit 1
}

get_real_url() {
  if [ -z "$1" ]; then
    echo "$FUNCNAME(): missing param" 1>&2
    return 1
  fi

  local url="$1"

  url=${url//@virtwww_base_domain@/$virtwww_base_domain}
  url=${url//@app_name@/$app}
  url=${url//@vhost@/$vhost}
  url=${url//@token_str@/$token_str}

  echo "$url"
}

# main

[ $# -lt 2 -o -z "$1" -o -z "$2" ] && usage

self_bin=`readlink -e "$0"`
if [ $? -ne 0 ]; then
  echo "Error: unable to get self path" 1>&2
  exit 1
fi

self_dir="${self_bin%/*}"
sys_dir="${self_dir%/*}"

lib_f="$sys_dir/lib/functions"
if ! source "$lib_f"; then
  echo "Error: unable to import $lib_f" 1>&2
  exit 1
fi

vhost="$1"
app="${2##*/}"

[ -z "$1" -o -z "$2" ] && usage

user="w_$vhost"

assign_deref_os_prop_or_exit url_tmpl "$sys_dir" tools_base_url_tmpl

virtwww_base_domain=$(get_server_base_domain) || exit 1

# using mode archive: it's OK to operate on a locked vhost
"$self_dir/check-vhost-name" archive "$vhost" || exit 1

token_bin="$self_dir/token-mgr"

token_str=$("$token_bin" -p -t "$app" "$vhost")
if [ $? -ne 0 -o -z "$token_str" ]; then
  echo "Error: unable to get token." 1>&2
  exit 1
fi

url=$(get_real_url "$url_tmpl")

echo "$url"

exit 0
