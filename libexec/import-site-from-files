#!/bin/bash

usage() {
  echo "Usage: ${0##*/} <options> <vhost>

  Imports a site from the specified archive files.

  Options:
    -f files.tar.gz           archive containing the files with the
                              website contents (must be .zip or .tar.gz)

    -d db_file.sql            the mysqldump file of the database (must be
                              either .sql, .zip or .gz). If it's .zip the
                              file inside it must be named database.sql.

    -s subsystem              the subsystem type of the app (e.g. drupal,
                              wordpress, magento, etc)

    -p pack_file.tgz          create a new archive file ready to be imported,
                              but don't actually create the vhost. Only use
                              this option if you want to generate an archive
                              in the right format, but to be used later.
"
  exit 1
}

create_import_dirs() {
  local base_dir="$1"
  local vhost="$2"
  local subsystem="$3"

  mkdir "$base_dir/db"

  mkdir "$base_dir/web"

  touch "$base_dir/web/apache_$vhost.conf"

  echo "$subsystem" >"$base_dir/db/databases"

  echo "$vhost" >"$base_dir/web/id"
}

cleanup() {
  [ -d "$temp_dir" ] && rm_rf_safer "$temp_dir"
}

# main
[ $# -eq 0 -o -z "$1" ] && usage

self_bin=$(readlink -e "$0")
if [ $? -ne 0 ]; then
  echo "Error: unable to identify the script path" 1>&2
  exit 1
fi
self_dir=${self_bin%/*}
sys_dir=$(readlink -m $self_dir/..)
lib_file="$sys_dir/lib/functions"

if ! source "$lib_file"; then
  error "unable to source file $lib_file"
fi

getopt_flags='f:d:s:p:h'
unset orig_archive_file orig_db_dump_file subsystem
unset temp_dir just_pack pack_file
while getopts $getopt_flags OPTN; do
  case $OPTN in
    f)
      if [ ! -f "$OPTARG" ]; then
        error "missing file $OPTARG"
      fi

      orig_archive_file="$OPTARG"
      ;;
    d)
      if [ ! -f "$OPTARG" ]; then
        error "missing file $OPTARG"
      fi

      orig_db_dump_file="$OPTARG"
      ;;
    s)
      subsystem="$OPTARG"
      ;;
    p)
      if [ -f "$OPTARG" ]; then
        error "file $OPTARG already exists."
      fi

      just_pack=1
      pack_file="$OPTARG"
      ;;
    h)
      usage
      ;;
    *)
      exit 1
      ;;
  esac
done
[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

[ -z "$1" ] && usage
vhost="$1"

if [ -n "$just_pack" ]; then
  vhost_check="name-only"
else
  vhost_check=restore
fi

if ! "$self_dir/check-vhost-name" $vhost_check "$vhost"; then
  exit 1
fi

if [ -z "$orig_archive_file" ]; then
  error "missing archive file. Please specify it with option -f"
fi

if [ -z "$subsystem" ]; then
  error "missing subsystem. Please specify it with option -s"
elif ! is_known_seedapp_subsystem "$subsystem"; then
  error "unknown subsystem: $subsystem"
fi

case "$orig_archive_file" in
  *.[Tt][Aa][Rr].[Gg][Zz])
    archive_file_type=tar.gz
    ;;
  *.[Zz][Ii][Pp])
    archive_file_type=zip
    ;;
  *)
    error "the archive file needs to be either .tar.gz or .zip."
esac

if [ -z "$orig_db_dump_file" ]; then
  error "missing database dump file. Please specify it with option -d"
fi

case "$orig_db_dump_file" in
  *.[Ss][Qq][Ll])
    db_dump_type=sql
    ;;
  *.[Gg][Zz])
    db_dump_type=gz
    ;;
  *.[Zz][Ii][Pp])
    db_dump_type=zip
    ;;
  *)
    error "the dump file needs to be either .sql, .gz or .zip"
    ;;
esac

if [ "$archive_file_type" == zip -o "$db_dump_type" == zip ]; then
  if ! hash unzip &>/dev/null; then
    error "missing command: unzip. Please install it."
  fi
fi

temp_dir=$(mktemp -d)
if [ $? -ne 0 ]; then
  error "unable to create temporary directory"
fi
trap 'cleanup' EXIT

app_dir_dist="$temp_dir/app_files_dist"
db_dir_dist="$temp_dir/db_files_dist"
pack_dir="$temp_dir/pack_dir"
public_html_dir="$app_dir_dist/public_html/$vhost"

for dir in "$app_dir_dist" "$db_dir_dist" "$pack_dir" "$public_html_dir"; do
  if ! mkdir -p "$dir"; then
    error "unable to create directory: $dir"
  fi
done

if [ "$archive_file_type" == tar.gz ]; then
  tar --no-same-owner -pSxf "$orig_archive_file" -C "$public_html_dir"
  st=$?
elif [ "$archive_file_type" == zip ]; then
  unzip -q "$orig_archive_file" -d "$public_html_dir"
  st=$?
fi

if [ $st -ne 0 ]; then
  error "unable to extract archive file $orig_archive_file"
fi

create_import_dirs "$pack_dir" "$vhost" "$subsystem"

db_dumped_archive="$pack_dir/db/$subsystem.sql.gz"
if [ "$db_dump_type" == sql ]; then
  gzip -c "$orig_db_dump_file" >"$db_dumped_archive"
  if [ $? -ne 0 ]; then
    error "unable to create $db_dumped_archive"
  fi
elif [ "$db_dump_type" == gz ]; then
  # validate whether it's a valid .gz or not
  zcat "$orig_db_dump_file" >/dev/null
  if [ $? -ne 0 ]; then
    error "db dump file '$orig_db_dump_file' is not a valid gzip file."
  fi

  cp -a "$orig_db_dump_file" "$db_dumped_archive"
  if [ $? -ne 0 ]; then
    error "unable to copy '$orig_db_dump' to '$db_dumped_archive'"
  fi
elif [ "$db_dump_type" == zip ]; then
  unzip -q "$orig_db_dump_file" database.sql -d "$db_dir_dist"
  if [ $? -ne 0 ]; then
    error "unable to extract $orig_db_dump_file (or missing database.sql)"
  fi

  gzip -c "$db_dir_dist/database.sql" >"$db_dumped_archive"
  if [ $? -ne 0 ]; then
    error "unable to gzip database.sql to $db_dumped_archive"
  fi
fi

web_archive_file="$pack_dir/web/w_$vhost.tgz"
tar -zSpcf "$web_archive_file" -C "$app_dir_dist" .
if [ $? -ne 0 ]; then
  error "unable to pack web dir $app_dir_dist"
fi

if [ -n "$just_pack" ]; then
  final_archive_file="$pack_file"
else
  final_archive_file="$temp_dir/${vhost}_imported.tar.gz"
fi

tar -zSpcf "$final_archive_file" -C "$pack_dir" .
if [ $? -ne 0 ]; then
  error "unable to pack web dir $pack_dir"
fi

if [ -n "$just_pack" ]; then
  echo "Successfully created archive file $final_archive_file."
  exit 0
fi

"$self_dir/restore-vhost" -p "$vhost" "$final_archive_file"
if [ $? -eq 0 ]; then
  echo
  echo "Successfully imported files and created vhost $vhost"
else
  echo
  error "failed to import vhost $vhost"
fi
